
Last.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800af1c  0800af1c  0000bf1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aff0  0800aff0  0000c1cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800aff0  0800aff0  0000bff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aff8  0800aff8  0000c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aff8  0800aff8  0000bff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800affc  0800affc  0000bffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800b000  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1cc  2**0
                  CONTENTS
 10 .bss          0000146c  200001cc  200001cc  0000c1cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001638  20001638  0000c1cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001754d  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003954  00000000  00000000  00023749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  000270a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e12  00000000  00000000  00028300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000212da  00000000  00000000  00029112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ae43  00000000  00000000  0004a3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b73ab  00000000  00000000  0006522f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c5da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000508c  00000000  00000000  0011c620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  001216ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af04 	.word	0x0800af04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	0800af04 	.word	0x0800af04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Error>:
volatile int8_t avg_cnt;
//сумма для среднего арифметичесого
volatile int64_t tmp64[3];
//----------------------------------
void Error(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	LD3_ON; // красный светодиод
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800028a:	4802      	ldr	r0, [pc, #8]	@ (8000294 <Error+0x14>)
 800028c:	f001 f9ea 	bl	8001664 <HAL_GPIO_WritePin>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	48001000 	.word	0x48001000

08000298 <I2Cx_ReadData>:
//----------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af04      	add	r7, sp, #16
 800029e:	4603      	mov	r3, r0
 80002a0:	460a      	mov	r2, r1
 80002a2:	80fb      	strh	r3, [r7, #6]
 80002a4:	4613      	mov	r3, r2
 80002a6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80002a8:	2300      	movs	r3, #0
 80002aa:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80002b0:	797b      	ldrb	r3, [r7, #5]
 80002b2:	b29a      	uxth	r2, r3
 80002b4:	88f9      	ldrh	r1, [r7, #6]
 80002b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002ba:	9302      	str	r3, [sp, #8]
 80002bc:	2301      	movs	r3, #1
 80002be:	9301      	str	r3, [sp, #4]
 80002c0:	f107 030e 	add.w	r3, r7, #14
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	2301      	movs	r3, #1
 80002c8:	4807      	ldr	r0, [pc, #28]	@ (80002e8 <I2Cx_ReadData+0x50>)
 80002ca:	f001 fb93 	bl	80019f4 <HAL_I2C_Mem_Read>
 80002ce:	4603      	mov	r3, r0
 80002d0:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <I2Cx_ReadData+0x44>
  {
    Error();
 80002d8:	f7ff ffd2 	bl	8000280 <Error>
  }
  return value;
 80002dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	200001ec 	.word	0x200001ec

080002ec <Accel_IO_Read>:
//----------------------------------
uint8_t Accel_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr) //addr - адрес нашего датчика, регист - общение наших датчиков
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	460a      	mov	r2, r1
 80002f6:	80fb      	strh	r3, [r7, #6]
 80002f8:	4613      	mov	r3, r2
 80002fa:	717b      	strb	r3, [r7, #5]
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 80002fc:	797a      	ldrb	r2, [r7, #5]
 80002fe:	88fb      	ldrh	r3, [r7, #6]
 8000300:	4611      	mov	r1, r2
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ffc8 	bl	8000298 <I2Cx_ReadData>
 8000308:	4603      	mov	r3, r0
}
 800030a:	4618      	mov	r0, r3
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <I2Cx_WriteData>:
//----------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af04      	add	r7, sp, #16
 800031a:	4603      	mov	r3, r0
 800031c:	80fb      	strh	r3, [r7, #6]
 800031e:	460b      	mov	r3, r1
 8000320:	717b      	strb	r3, [r7, #5]
 8000322:	4613      	mov	r3, r2
 8000324:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000326:	2300      	movs	r3, #0
 8000328:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 800032a:	797b      	ldrb	r3, [r7, #5]
 800032c:	b29a      	uxth	r2, r3
 800032e:	88f9      	ldrh	r1, [r7, #6]
 8000330:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000334:	9302      	str	r3, [sp, #8]
 8000336:	2301      	movs	r3, #1
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2301      	movs	r3, #1
 8000340:	4806      	ldr	r0, [pc, #24]	@ (800035c <I2Cx_WriteData+0x48>)
 8000342:	f001 fa43 	bl	80017cc <HAL_I2C_Mem_Write>
 8000346:	4603      	mov	r3, r0
 8000348:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
 800034a:	7bfb      	ldrb	r3, [r7, #15]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <I2Cx_WriteData+0x40>
  {
    Error();
 8000350:	f7ff ff96 	bl	8000280 <Error>
  }
}
 8000354:	bf00      	nop
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200001ec 	.word	0x200001ec

08000360 <Accel_IO_Write>:
//----------------------------------
uint8_t Accel_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value) //addr - адрес нашего датчика, регист - общение наших датчиков
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	80fb      	strh	r3, [r7, #6]
 800036a:	460b      	mov	r3, r1
 800036c:	717b      	strb	r3, [r7, #5]
 800036e:	4613      	mov	r3, r2
 8000370:	713b      	strb	r3, [r7, #4]
	I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8000372:	793a      	ldrb	r2, [r7, #4]
 8000374:	7979      	ldrb	r1, [r7, #5]
 8000376:	88fb      	ldrh	r3, [r7, #6]
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ffcb 	bl	8000314 <I2Cx_WriteData>
}
 800037e:	bf00      	nop
 8000380:	4618      	mov	r0, r3
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <Accel_GetXYZ>:
//----------------------------------
void Accel_GetXYZ(int16_t* pData)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	  int16_t pnRawData[3]; // буфер для показания трех осей
	  uint8_t ctrlx[2]={0,0};
 8000390:	2300      	movs	r3, #0
 8000392:	82bb      	strh	r3, [r7, #20]
	  int8_t buffer[6];
	  uint8_t i = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	77fb      	strb	r3, [r7, #31]
	  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G; // чем меньше порог значений, то будет более точным выходное значение
 8000398:	2301      	movs	r3, #1
 800039a:	77bb      	strb	r3, [r7, #30]
	  /* Read the acceleration control register content */
	  ctrlx[0] = Accel_IO_Read(0x32, LSM303DLHC_CTRL_REG4_A); //LSM303DLHC_CTRL_REG4_A и LSM303DLHC_CTRL_REG5_A – это регистры 0x23 и 0x24, из которых мы считаем некоторые настройки датчика.
 800039c:	2123      	movs	r1, #35	@ 0x23
 800039e:	2032      	movs	r0, #50	@ 0x32
 80003a0:	f7ff ffa4 	bl	80002ec <Accel_IO_Read>
 80003a4:	4603      	mov	r3, r0
 80003a6:	753b      	strb	r3, [r7, #20]
	  ctrlx[1] = Accel_IO_Read(0x32, LSM303DLHC_CTRL_REG5_A);
 80003a8:	2124      	movs	r1, #36	@ 0x24
 80003aa:	2032      	movs	r0, #50	@ 0x32
 80003ac:	f7ff ff9e 	bl	80002ec <Accel_IO_Read>
 80003b0:	4603      	mov	r3, r0
 80003b2:	757b      	strb	r3, [r7, #21]
	  /* Read output register X, Y & Z acceleration */
	  buffer[0] = Accel_IO_Read(0x32, LSM303DLHC_OUT_X_L_A); //LSM303DLHC_OUT_X_L_A, LSM303DLHC_OUT_X_H_A, LSM303DLHC_OUT_Y_L_A, LSM303DLHC_OUT_Y_H_A, LSM303DLHC_OUT_Z_L_A и LSM303DLHC_OUT_Z_H_A – регистры в которых находятся показания датчика – раздельно младшие и старшие байты всех трёх осей координат. Их мы заносим в определенные ячейки буфера с байтами buffer.
 80003b4:	2128      	movs	r1, #40	@ 0x28
 80003b6:	2032      	movs	r0, #50	@ 0x32
 80003b8:	f7ff ff98 	bl	80002ec <Accel_IO_Read>
 80003bc:	4603      	mov	r3, r0
 80003be:	b25b      	sxtb	r3, r3
 80003c0:	733b      	strb	r3, [r7, #12]
	  buffer[1] = Accel_IO_Read(0x32, LSM303DLHC_OUT_X_H_A); // старший бит Х
 80003c2:	2129      	movs	r1, #41	@ 0x29
 80003c4:	2032      	movs	r0, #50	@ 0x32
 80003c6:	f7ff ff91 	bl	80002ec <Accel_IO_Read>
 80003ca:	4603      	mov	r3, r0
 80003cc:	b25b      	sxtb	r3, r3
 80003ce:	737b      	strb	r3, [r7, #13]
	  buffer[2] = Accel_IO_Read(0x32, LSM303DLHC_OUT_Y_L_A); // младший бит У
 80003d0:	212a      	movs	r1, #42	@ 0x2a
 80003d2:	2032      	movs	r0, #50	@ 0x32
 80003d4:	f7ff ff8a 	bl	80002ec <Accel_IO_Read>
 80003d8:	4603      	mov	r3, r0
 80003da:	b25b      	sxtb	r3, r3
 80003dc:	73bb      	strb	r3, [r7, #14]
	  buffer[3] = Accel_IO_Read(0x32, LSM303DLHC_OUT_Y_H_A); // старший бит У
 80003de:	212b      	movs	r1, #43	@ 0x2b
 80003e0:	2032      	movs	r0, #50	@ 0x32
 80003e2:	f7ff ff83 	bl	80002ec <Accel_IO_Read>
 80003e6:	4603      	mov	r3, r0
 80003e8:	b25b      	sxtb	r3, r3
 80003ea:	73fb      	strb	r3, [r7, #15]
	  buffer[4] = Accel_IO_Read(0x32, LSM303DLHC_OUT_Z_L_A); // младший бит Z
 80003ec:	212c      	movs	r1, #44	@ 0x2c
 80003ee:	2032      	movs	r0, #50	@ 0x32
 80003f0:	f7ff ff7c 	bl	80002ec <Accel_IO_Read>
 80003f4:	4603      	mov	r3, r0
 80003f6:	b25b      	sxtb	r3, r3
 80003f8:	743b      	strb	r3, [r7, #16]
	  buffer[5] = Accel_IO_Read(0x32, LSM303DLHC_OUT_Z_H_A); // старший бит Z
 80003fa:	212d      	movs	r1, #45	@ 0x2d
 80003fc:	2032      	movs	r0, #50	@ 0x32
 80003fe:	f7ff ff75 	bl	80002ec <Accel_IO_Read>
 8000402:	4603      	mov	r3, r0
 8000404:	b25b      	sxtb	r3, r3
 8000406:	747b      	strb	r3, [r7, #17]
	  /* Check in the control register4 the data alignment*/
	  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) //LSM303DLHC_BLE_MSB -В зависимости от его установки мы распределяем считанные байты в уже шестнадцатиразрядном буфере.
 8000408:	7d3b      	ldrb	r3, [r7, #20]
 800040a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800040e:	2b00      	cmp	r3, #0
 8000410:	d123      	bne.n	800045a <Accel_GetXYZ+0xd2>
	  {
	    for(i=0; i<3; i++)
 8000412:	2300      	movs	r3, #0
 8000414:	77fb      	strb	r3, [r7, #31]
 8000416:	e01c      	b.n	8000452 <Accel_GetXYZ+0xca>
	    {
	      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]); // buffer[2*i+1] - старшая часть, buffer[2*i] - младшая часть
 8000418:	7ffb      	ldrb	r3, [r7, #31]
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	3301      	adds	r3, #1
 800041e:	3320      	adds	r3, #32
 8000420:	443b      	add	r3, r7
 8000422:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000426:	b29b      	uxth	r3, r3
 8000428:	021b      	lsls	r3, r3, #8
 800042a:	b29a      	uxth	r2, r3
 800042c:	7ffb      	ldrb	r3, [r7, #31]
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	3320      	adds	r3, #32
 8000432:	443b      	add	r3, r7
 8000434:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000438:	b29b      	uxth	r3, r3
 800043a:	4413      	add	r3, r2
 800043c:	b29a      	uxth	r2, r3
 800043e:	7ffb      	ldrb	r3, [r7, #31]
 8000440:	b212      	sxth	r2, r2
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	3320      	adds	r3, #32
 8000446:	443b      	add	r3, r7
 8000448:	f823 2c08 	strh.w	r2, [r3, #-8]
	    for(i=0; i<3; i++)
 800044c:	7ffb      	ldrb	r3, [r7, #31]
 800044e:	3301      	adds	r3, #1
 8000450:	77fb      	strb	r3, [r7, #31]
 8000452:	7ffb      	ldrb	r3, [r7, #31]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d9df      	bls.n	8000418 <Accel_GetXYZ+0x90>
 8000458:	e022      	b.n	80004a0 <Accel_GetXYZ+0x118>
	    }
	  }
	  else
	  {
	    for(i=0; i<3; i++)
 800045a:	2300      	movs	r3, #0
 800045c:	77fb      	strb	r3, [r7, #31]
 800045e:	e01c      	b.n	800049a <Accel_GetXYZ+0x112>
	    {
	      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000460:	7ffb      	ldrb	r3, [r7, #31]
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	3320      	adds	r3, #32
 8000466:	443b      	add	r3, r7
 8000468:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800046c:	b29b      	uxth	r3, r3
 800046e:	021b      	lsls	r3, r3, #8
 8000470:	b29a      	uxth	r2, r3
 8000472:	7ffb      	ldrb	r3, [r7, #31]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	3301      	adds	r3, #1
 8000478:	3320      	adds	r3, #32
 800047a:	443b      	add	r3, r7
 800047c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000480:	b29b      	uxth	r3, r3
 8000482:	4413      	add	r3, r2
 8000484:	b29a      	uxth	r2, r3
 8000486:	7ffb      	ldrb	r3, [r7, #31]
 8000488:	b212      	sxth	r2, r2
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	3320      	adds	r3, #32
 800048e:	443b      	add	r3, r7
 8000490:	f823 2c08 	strh.w	r2, [r3, #-8]
	    for(i=0; i<3; i++)
 8000494:	7ffb      	ldrb	r3, [r7, #31]
 8000496:	3301      	adds	r3, #1
 8000498:	77fb      	strb	r3, [r7, #31]
 800049a:	7ffb      	ldrb	r3, [r7, #31]
 800049c:	2b02      	cmp	r3, #2
 800049e:	d9df      	bls.n	8000460 <Accel_GetXYZ+0xd8>
	    }
	  }
	  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G) // LSM303DLHC_FULLSCALE_16G - какое разрешение (амплитуда)
 80004a0:	7d3b      	ldrb	r3, [r7, #20]
 80004a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80004a6:	2b30      	cmp	r3, #48	@ 0x30
 80004a8:	d013      	beq.n	80004d2 <Accel_GetXYZ+0x14a>
 80004aa:	2b30      	cmp	r3, #48	@ 0x30
 80004ac:	dc14      	bgt.n	80004d8 <Accel_GetXYZ+0x150>
 80004ae:	2b20      	cmp	r3, #32
 80004b0:	d00c      	beq.n	80004cc <Accel_GetXYZ+0x144>
 80004b2:	2b20      	cmp	r3, #32
 80004b4:	dc10      	bgt.n	80004d8 <Accel_GetXYZ+0x150>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d002      	beq.n	80004c0 <Accel_GetXYZ+0x138>
 80004ba:	2b10      	cmp	r3, #16
 80004bc:	d003      	beq.n	80004c6 <Accel_GetXYZ+0x13e>
 80004be:	e00b      	b.n	80004d8 <Accel_GetXYZ+0x150>
	  {
	  case LSM303DLHC_FULLSCALE_2G:
	    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G; //LSM303DLHC_ACC_SENSITIVITY_xG – это серия макросов для настройки чувствительности акселерометра. Цифра перед G – множитель, на который мы умножаем значение G (9,8 м/с2).
 80004c0:	2301      	movs	r3, #1
 80004c2:	77bb      	strb	r3, [r7, #30]
	    break;
 80004c4:	e008      	b.n	80004d8 <Accel_GetXYZ+0x150>
	  case LSM303DLHC_FULLSCALE_4G:
	    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80004c6:	2302      	movs	r3, #2
 80004c8:	77bb      	strb	r3, [r7, #30]
	    break;
 80004ca:	e005      	b.n	80004d8 <Accel_GetXYZ+0x150>
	  case LSM303DLHC_FULLSCALE_8G:
	    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80004cc:	2304      	movs	r3, #4
 80004ce:	77bb      	strb	r3, [r7, #30]
	    break;
 80004d0:	e002      	b.n	80004d8 <Accel_GetXYZ+0x150>
	  case LSM303DLHC_FULLSCALE_16G:
	    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80004d2:	230c      	movs	r3, #12
 80004d4:	77bb      	strb	r3, [r7, #30]
	    break;
 80004d6:	bf00      	nop
	  }
	  /* Obtain the mg value for the three axis */
	  for(i=0; i<3; i++)
 80004d8:	2300      	movs	r3, #0
 80004da:	77fb      	strb	r3, [r7, #31]
 80004dc:	e014      	b.n	8000508 <Accel_GetXYZ+0x180>
	  {
	    pData[i]=(pnRawData[i] * sensitivity);
 80004de:	7ffb      	ldrb	r3, [r7, #31]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	3320      	adds	r3, #32
 80004e4:	443b      	add	r3, r7
 80004e6:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	7fbb      	ldrb	r3, [r7, #30]
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	fb12 f303 	smulbb	r3, r2, r3
 80004f4:	b299      	uxth	r1, r3
 80004f6:	7ffb      	ldrb	r3, [r7, #31]
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	4413      	add	r3, r2
 80004fe:	b20a      	sxth	r2, r1
 8000500:	801a      	strh	r2, [r3, #0]
	  for(i=0; i<3; i++)
 8000502:	7ffb      	ldrb	r3, [r7, #31]
 8000504:	3301      	adds	r3, #1
 8000506:	77fb      	strb	r3, [r7, #31]
 8000508:	7ffb      	ldrb	r3, [r7, #31]
 800050a:	2b02      	cmp	r3, #2
 800050c:	d9e7      	bls.n	80004de <Accel_GetXYZ+0x156>
	  }
}
 800050e:	bf00      	nop
 8000510:	bf00      	nop
 8000512:	3720      	adds	r7, #32
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <Accel_ReadID>:
//----------------------------------
uint8_t Accel_ReadID(void) //проверка для датчика (считывание)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800051e:	2300      	movs	r3, #0
 8000520:	71fb      	strb	r3, [r7, #7]
  ctrl = Accel_IO_Read(0x32, 0x0F); // 0x32 - запись; у датчика i2c подключение регистров зависит, что будет работать магнитометр или акселерометр.
 8000522:	210f      	movs	r1, #15
 8000524:	2032      	movs	r0, #50	@ 0x32
 8000526:	f7ff fee1 	bl	80002ec <Accel_IO_Read>
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
  return ctrl;
 800052e:	79fb      	ldrb	r3, [r7, #7]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <Mag_GetXYZ>:
	          LD9_OFF;
	          LD5_OFF;
}
//----------------------------------
void Mag_GetXYZ(int16_t* pData)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	uint8_t i=0;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]

	buffer[0] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_X_H_M); //LSM303DLHC_OUT_X_L_A, LSM303DLHC_OUT_X_H_A, LSM303DLHC_OUT_Y_L_A, LSM303DLHC_OUT_Y_H_A, LSM303DLHC_OUT_Z_L_A и LSM303DLHC_OUT_Z_H_A – регистры в которых находятся показания датчика – раздельно младшие и старшие байты всех трёх осей координат. Их мы заносим в определенные ячейки буфера с байтами buffer.
 8000544:	2103      	movs	r1, #3
 8000546:	203c      	movs	r0, #60	@ 0x3c
 8000548:	f7ff fed0 	bl	80002ec <Accel_IO_Read>
 800054c:	4603      	mov	r3, r0
 800054e:	723b      	strb	r3, [r7, #8]
	buffer[1] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_X_L_M);
 8000550:	2104      	movs	r1, #4
 8000552:	203c      	movs	r0, #60	@ 0x3c
 8000554:	f7ff feca 	bl	80002ec <Accel_IO_Read>
 8000558:	4603      	mov	r3, r0
 800055a:	727b      	strb	r3, [r7, #9]
	buffer[2] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_Y_H_M);
 800055c:	2107      	movs	r1, #7
 800055e:	203c      	movs	r0, #60	@ 0x3c
 8000560:	f7ff fec4 	bl	80002ec <Accel_IO_Read>
 8000564:	4603      	mov	r3, r0
 8000566:	72bb      	strb	r3, [r7, #10]
	buffer[3] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_Y_L_M);
 8000568:	2108      	movs	r1, #8
 800056a:	203c      	movs	r0, #60	@ 0x3c
 800056c:	f7ff febe 	bl	80002ec <Accel_IO_Read>
 8000570:	4603      	mov	r3, r0
 8000572:	72fb      	strb	r3, [r7, #11]
	buffer[4] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_Z_H_M);
 8000574:	2105      	movs	r1, #5
 8000576:	203c      	movs	r0, #60	@ 0x3c
 8000578:	f7ff feb8 	bl	80002ec <Accel_IO_Read>
 800057c:	4603      	mov	r3, r0
 800057e:	733b      	strb	r3, [r7, #12]
	buffer[5] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_Z_L_M);
 8000580:	2106      	movs	r1, #6
 8000582:	203c      	movs	r0, #60	@ 0x3c
 8000584:	f7ff feb2 	bl	80002ec <Accel_IO_Read>
 8000588:	4603      	mov	r3, r0
 800058a:	737b      	strb	r3, [r7, #13]

	for(i=0;i<3;i++)
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]
 8000590:	e022      	b.n	80005d8 <Mag_GetXYZ+0xa0>
	{
		if(pData[i]!=-4096) pData[i]=((uint16_t)((uint16_t)buffer[2*i]<<8)+buffer[2*i+1]);
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800059e:	f513 5f80 	cmn.w	r3, #4096	@ 0x1000
 80005a2:	d016      	beq.n	80005d2 <Mag_GetXYZ+0x9a>
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	3310      	adds	r3, #16
 80005aa:	443b      	add	r3, r7
 80005ac:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80005b0:	021b      	lsls	r3, r3, #8
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	7bfa      	ldrb	r2, [r7, #15]
 80005b6:	0052      	lsls	r2, r2, #1
 80005b8:	3201      	adds	r2, #1
 80005ba:	3210      	adds	r2, #16
 80005bc:	443a      	add	r2, r7
 80005be:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80005c2:	4413      	add	r3, r2
 80005c4:	b299      	uxth	r1, r3
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	b20a      	sxth	r2, r1
 80005d0:	801a      	strh	r2, [r3, #0]
	for(i=0;i<3;i++)
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3301      	adds	r3, #1
 80005d6:	73fb      	strb	r3, [r7, #15]
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d9d9      	bls.n	8000592 <Mag_GetXYZ+0x5a>
	}
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <MagInit>:
////	HAL_UART_Transmit(&huart2,buf2,8,0x1000);
//	CDC_Transmit_FS((uint8_t*)buf2, strlen(buf2));
}
//----------------------------------
void MagInit(uint32_t InitStruct)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	uint8_t ctrl = 0x00;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
	ctrl = (uint8_t) InitStruct;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(MAG_I2C_ADDRESS,LSM303DLHC_CRA_REG_M,ctrl);
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	461a      	mov	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	203c      	movs	r0, #60	@ 0x3c
 8000600:	f7ff feae 	bl	8000360 <Accel_IO_Write>
	ctrl = (uint8_t)(InitStruct<<8);
 8000604:	2300      	movs	r3, #0
 8000606:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(MAG_I2C_ADDRESS,LSM303DLHC_CRB_REG_M,ctrl);
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	461a      	mov	r2, r3
 800060c:	2101      	movs	r1, #1
 800060e:	203c      	movs	r0, #60	@ 0x3c
 8000610:	f7ff fea6 	bl	8000360 <Accel_IO_Write>
	ctrl = (uint8_t)(InitStruct<<16);
 8000614:	2300      	movs	r3, #0
 8000616:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(MAG_I2C_ADDRESS,LSM303DLHC_MR_REG_M,ctrl);
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	461a      	mov	r2, r3
 800061c:	2102      	movs	r1, #2
 800061e:	203c      	movs	r0, #60	@ 0x3c
 8000620:	f7ff fe9e 	bl	8000360 <Accel_IO_Write>
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <AccInit>:
//----------------------------------
void AccInit(uint16_t InitStruct )
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	 uint8_t ctrl = 0x00; // разделение на байты
 8000636:	2300      	movs	r3, #0
 8000638:	73fb      	strb	r3, [r7, #15]
     ctrl = (uint8_t) InitStruct;
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	73fb      	strb	r3, [r7, #15]
     Accel_IO_Write(0x32, LSM303DLHC_CTRL_REG1_A, ctrl); // младшая часть
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	461a      	mov	r2, r3
 8000642:	2120      	movs	r1, #32
 8000644:	2032      	movs	r0, #50	@ 0x32
 8000646:	f7ff fe8b 	bl	8000360 <Accel_IO_Write>
     ctrl = (uint8_t) (InitStruct << 8);
 800064a:	2300      	movs	r3, #0
 800064c:	73fb      	strb	r3, [r7, #15]
     Accel_IO_Write(0x32, LSM303DLHC_CTRL_REG4_A, ctrl); // старшая часть
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	461a      	mov	r2, r3
 8000652:	2123      	movs	r1, #35	@ 0x23
 8000654:	2032      	movs	r0, #50	@ 0x32
 8000656:	f7ff fe83 	bl	8000360 <Accel_IO_Write>
}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <Accel_AccFilterConfig>:
//----------------------------------
void Accel_AccFilterConfig(uint8_t FilterStruct)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
 8000668:	4603      	mov	r3, r0
 800066a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  tmpreg = Accel_IO_Read(0x32, LSM303DLHC_CTRL_REG2_A); //0x32 считывание данных с датчика
 800066c:	2121      	movs	r1, #33	@ 0x21
 800066e:	2032      	movs	r0, #50	@ 0x32
 8000670:	f7ff fe3c 	bl	80002ec <Accel_IO_Read>
 8000674:	4603      	mov	r3, r0
 8000676:	73fb      	strb	r3, [r7, #15]
  tmpreg &= 0x0C;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	f003 030c 	and.w	r3, r3, #12
 800067e:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000680:	7bfa      	ldrb	r2, [r7, #15]
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4313      	orrs	r3, r2
 8000686:	73fb      	strb	r3, [r7, #15]
  Accel_IO_Write(0x32, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	461a      	mov	r2, r3
 800068c:	2121      	movs	r1, #33	@ 0x21
 800068e:	2032      	movs	r0, #50	@ 0x32
 8000690:	f7ff fe66 	bl	8000360 <Accel_IO_Write>
}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <Accel_Ini>:
//----------------------------------
void Accel_Ini(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
	 uint16_t ctrl = 0x0000;
 80006a2:	2300      	movs	r3, #0
 80006a4:	80fb      	strh	r3, [r7, #6]
	        HAL_Delay(1000);
 80006a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006aa:	f000 fd2b 	bl	8001104 <HAL_Delay>
	        if(Accel_ReadID()==0x33) LD6_ON; // если подключение установлено - зеленый светодиод
 80006ae:	f7ff ff33 	bl	8000518 <Accel_ReadID>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b33      	cmp	r3, #51	@ 0x33
 80006b6:	d106      	bne.n	80006c6 <Accel_Ini+0x2a>
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006be:	4811      	ldr	r0, [pc, #68]	@ (8000704 <Accel_Ini+0x68>)
 80006c0:	f000 ffd0 	bl	8001664 <HAL_GPIO_WritePin>
 80006c4:	e001      	b.n	80006ca <Accel_Ini+0x2e>
	        else Error();
 80006c6:	f7ff fddb 	bl	8000280 <Error>
	        ctrl |= (LSM303DLHC_NORMAL_MODE|LSM303DLHC_ODR_50_HZ|LSM303DLHC_AXES_ENABLE);
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
 80006d0:	80fb      	strh	r3, [r7, #6]
	        ctrl |= ((LSM303DLHC_BlockUpdate_Continous | LSM303DLHC_BLE_LSB | LSM303DLHC_HR_ENABLE) <<8 );
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80006d8:	80fb      	strh	r3, [r7, #6]
	        AccInit(ctrl);
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ffa5 	bl	800062c <AccInit>
	        ctrl = (uint8_t) (LSM303DLHC_HPM_NORMAL_MODE | LSM303DLHC_HPFCF_16 |LSM303DLHC_HPF_AOI1_DISABLE | LSM303DLHC_HPF_AOI2_DISABLE);
 80006e2:	2390      	movs	r3, #144	@ 0x90
 80006e4:	80fb      	strh	r3, [r7, #6]
            Accel_AccFilterConfig(ctrl);
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ffb9 	bl	8000662 <Accel_AccFilterConfig>
            LD7_ON;
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006f6:	4803      	ldr	r0, [pc, #12]	@ (8000704 <Accel_Ini+0x68>)
 80006f8:	f000 ffb4 	bl	8001664 <HAL_GPIO_WritePin>
		//LSM303DLHC_AXES_ENABLE: значение 0x07. Здесь мы включаем все три младшие бита (Zen, Yen и Xen). То есть мы будем работать со всеми тремя осями координат.
		//LSM303DLHC_ODR_50_HZ: значение 0x40. Включаем только шестой бит ODR2, то есть скорость мы задаем 50 Гц.
	    //LSM303DLHC_BlockUpdate_Continous - данный бит регистра, чтобы датчик не считал не тот бит (младший/старший)
	    //LSM303DLHC_HR_ENABLE - высокое разрешение измерения (точность)
        // HPCF2-HPCF1 -  частота среза
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	48001000 	.word	0x48001000

08000708 <AccelMag_Ini>:
//----------------------------------
void AccelMag_Ini(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	uint16_t ctrl = 0x0000;
 800070e:	2300      	movs	r3, #0
 8000710:	80fb      	strh	r3, [r7, #6]
	uint32_t ctrl32 = 0x00000000;
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
	avg_cnt=0;//счетчик заполнения
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <AccelMag_Ini+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 800071c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000720:	f000 fcf0 	bl	8001104 <HAL_Delay>
	if(Accel_ReadID()==0x33) LD6_ON; // если подключение установлено - зеленый светодиод
 8000724:	f7ff fef8 	bl	8000518 <Accel_ReadID>
 8000728:	4603      	mov	r3, r0
 800072a:	2b33      	cmp	r3, #51	@ 0x33
 800072c:	d106      	bne.n	800073c <AccelMag_Ini+0x34>
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000734:	480e      	ldr	r0, [pc, #56]	@ (8000770 <AccelMag_Ini+0x68>)
 8000736:	f000 ff95 	bl	8001664 <HAL_GPIO_WritePin>
 800073a:	e001      	b.n	8000740 <AccelMag_Ini+0x38>
	else Error();
 800073c:	f7ff fda0 	bl	8000280 <Error>
//	ctrl|=((LSM303DLHC_BlockUpdate_Continous|LSM303DLHC_BLE_LSB|LSM303DLHC_HR_ENABLE)<<8);
//	AccInit(ctrl);
//	ctrl=(uint8_t)(LSM303DLHC_HPM_NORMAL_MODE|LSM303DLHC_HPFCF_16|\
//								 LSM303DLHC_HPF_AOI1_DISABLE|LSM303DLHC_HPF_AOI2_DISABLE);
//	Accel_AccFilter(ctrl);
	ctrl32|=(LSM303DLHC_TEMPSENSOR_DISABLE|LSM303DLHC_ODR_220_HZ);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	f043 031c 	orr.w	r3, r3, #28
 8000746:	603b      	str	r3, [r7, #0]
	ctrl32|=LSM303DLHC_FS_4_0_GA<<8;
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800074e:	603b      	str	r3, [r7, #0]
	ctrl32|=LSM303DLHC_CONTINUOS_CONVERSION<<16;
	MagInit(ctrl32);
 8000750:	6838      	ldr	r0, [r7, #0]
 8000752:	f7ff ff49 	bl	80005e8 <MagInit>
	LD7_ON;
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <AccelMag_Ini+0x68>)
 800075e:	f000 ff81 	bl	8001664 <HAL_GPIO_WritePin>
			//LSM303DLHC_AXES_ENABLE: значение 0x07. Здесь мы включаем все три младшие бита (Zen, Yen и Xen). То есть мы будем работать со всеми тремя осями координат.
			//LSM303DLHC_ODR_50_HZ: значение 0x40. Включаем только шестой бит ODR2, то есть скорость мы задаем 50 Гц.
		    //LSM303DLHC_BlockUpdate_Continous - данный бит регистра, чтобы датчик не считал не тот бит (младший/старший)
		    //LSM303DLHC_HR_ENABLE - высокое разрешение измерения (точность)
	        // HPCF2-HPCF1 -  частота среза
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200001e8 	.word	0x200001e8
 8000770:	48001000 	.word	0x48001000

08000774 <V3fTransform>:
MRes[2][0] = M1[2][0]*M2[0][0] + M1[2][1]*M2[1][0] + M1[2][2]*M2[2][0];
MRes[2][1] = M1[2][0]*M2[0][1] + M1[2][1]*M2[1][1] + M1[2][2]*M2[2][1];
MRes[2][2] = M1[2][0]*M2[0][2] + M1[2][1]*M2[1][2] + M1[2][2]*M2[2][2];
}
void V3fTransform(Vector3f V, Matrix3f M, Vector3f VRes) // умножение вектора на матрицу
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
	VRes[0] = V[0]*M[0][0] + V[1]*M[1][0] + V[2]*M[2][0];
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	ed93 7a00 	vldr	s14, [r3]
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	edd3 7a00 	vldr	s15, [r3]
 800078c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	3304      	adds	r3, #4
 8000794:	edd3 6a00 	vldr	s13, [r3]
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	330c      	adds	r3, #12
 800079c:	edd3 7a00 	vldr	s15, [r3]
 80007a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3308      	adds	r3, #8
 80007ac:	edd3 6a00 	vldr	s13, [r3]
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	3318      	adds	r3, #24
 80007b4:	edd3 7a00 	vldr	s15, [r3]
 80007b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	edc3 7a00 	vstr	s15, [r3]
	VRes[1] = V[0]*M[0][1] + V[1]*M[1][1] + V[2]*M[2][1];
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	ed93 7a00 	vldr	s14, [r3]
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80007d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3304      	adds	r3, #4
 80007da:	edd3 6a00 	vldr	s13, [r3]
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	330c      	adds	r3, #12
 80007e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80007e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	3308      	adds	r3, #8
 80007f2:	edd3 6a00 	vldr	s13, [r3]
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	3318      	adds	r3, #24
 80007fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80007fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3304      	adds	r3, #4
 8000806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800080a:	edc3 7a00 	vstr	s15, [r3]
	VRes[2] = V[0]*M[0][2] + V[1]*M[1][2] + V[2]*M[2][2];
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	ed93 7a00 	vldr	s14, [r3]
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	edd3 7a02 	vldr	s15, [r3, #8]
 800081a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	3304      	adds	r3, #4
 8000822:	edd3 6a00 	vldr	s13, [r3]
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	330c      	adds	r3, #12
 800082a:	edd3 7a02 	vldr	s15, [r3, #8]
 800082e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000832:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	3308      	adds	r3, #8
 800083a:	edd3 6a00 	vldr	s13, [r3]
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	3318      	adds	r3, #24
 8000842:	edd3 7a02 	vldr	s15, [r3, #8]
 8000846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3308      	adds	r3, #8
 800084e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000852:	edc3 7a00 	vstr	s15, [r3]
}
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
	...

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000866:	b0bd      	sub	sp, #244	@ 0xf4
 8000868:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086a:	f000 fbe5 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086e:	f000 f8b7 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000872:	f000 f9c5 	bl	8000c00 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000876:	f000 f915 	bl	8000aa4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800087a:	f000 f953 	bl	8000b24 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800087e:	f000 f98f 	bl	8000ba0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000882:	f009 f9d7 	bl	8009c34 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  //AccelMag_Ini();
  Accel_Ini();
 8000886:	f7ff ff09 	bl	800069c <Accel_Ini>
    AccelMag_Ini();
 800088a:	f7ff ff3d 	bl	8000708 <AccelMag_Ini>
    char str1[60] = {0};
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000894:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000898:	2238      	movs	r2, #56	@ 0x38
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f009 feb1 	bl	800a604 <memset>
      int16_t AccelData[3];
      int16_t MagData[3];
      Matrix3f MagCalibr, AccCalibr;
      Vector3f MagR, AccR, Mag, Acc, MagShift, AccShift;

      MagShift[0] =-20.637076f;
 80008a2:	4b45      	ldr	r3, [pc, #276]	@ (80009b8 <main+0x154>)
 80008a4:	613b      	str	r3, [r7, #16]
      MagShift[1] =-67.148205f;
 80008a6:	4b45      	ldr	r3, [pc, #276]	@ (80009bc <main+0x158>)
 80008a8:	617b      	str	r3, [r7, #20]
      MagShift[2] =-296.580905f;
 80008aa:	4b45      	ldr	r3, [pc, #276]	@ (80009c0 <main+0x15c>)
 80008ac:	61bb      	str	r3, [r7, #24]

      MagCalibr[0][0] =1.021984f;
 80008ae:	4b45      	ldr	r3, [pc, #276]	@ (80009c4 <main+0x160>)
 80008b0:	673b      	str	r3, [r7, #112]	@ 0x70
      MagCalibr[0][1] =0.004194f;
 80008b2:	4b45      	ldr	r3, [pc, #276]	@ (80009c8 <main+0x164>)
 80008b4:	677b      	str	r3, [r7, #116]	@ 0x74
      MagCalibr[0][2] =0.018345f;
 80008b6:	4b45      	ldr	r3, [pc, #276]	@ (80009cc <main+0x168>)
 80008b8:	67bb      	str	r3, [r7, #120]	@ 0x78

      MagCalibr[1][0] =0.004194f;
 80008ba:	4b43      	ldr	r3, [pc, #268]	@ (80009c8 <main+0x164>)
 80008bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
      MagCalibr[1][1] =1.018923f;
 80008be:	4b44      	ldr	r3, [pc, #272]	@ (80009d0 <main+0x16c>)
 80008c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      MagCalibr[1][2] =0.014422f;
 80008c4:	4b43      	ldr	r3, [pc, #268]	@ (80009d4 <main+0x170>)
 80008c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      MagCalibr[2][0] =0.018345f;
 80008ca:	4b40      	ldr	r3, [pc, #256]	@ (80009cc <main+0x168>)
 80008cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      MagCalibr[2][1] =0.014422f;
 80008d0:	4b40      	ldr	r3, [pc, #256]	@ (80009d4 <main+0x170>)
 80008d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      MagCalibr[2][2] =1.112105f;
 80008d6:	4b40      	ldr	r3, [pc, #256]	@ (80009d8 <main+0x174>)
 80008d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 // AccelMag_Read();
	  Accel_GetXYZ(AccelData);
 80008dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fd51 	bl	8000388 <Accel_GetXYZ>
	  Mag_GetXYZ(MagData);
 80008e6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe24 	bl	8000538 <Mag_GetXYZ>
	  MagR[0] = (float)MagData[0] - MagShift[0]; //MagShift - это вектор до матрицы
 80008f0:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 80008f4:	ee07 3a90 	vmov	s15, r3
 80008f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000900:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000904:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	  MagR[1] = (float)MagData[1] - MagShift[1];
 8000908:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 800090c:	ee07 3a90 	vmov	s15, r3
 8000910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000914:	edd7 7a05 	vldr	s15, [r7, #20]
 8000918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800091c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	  MagR[2] = (float)MagData[2] - MagShift[2];
 8000920:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	@ 0x98
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800092c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000934:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	  V3fTransform(MagR, MagCalibr, Mag);
 8000938:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800093c:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000940:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff15 	bl	8000774 <V3fTransform>
	  sprintf(str1, "%06d;%06d;%06d;%06d;%06d;%06d;", AccelData[0], AccelData[1], AccelData[2], (int)Mag[0], (int)Mag[1], (int)Mag[2]); // до калибровки
 800094a:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	@ 0x9c
 800094e:	461a      	mov	r2, r3
 8000950:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8000954:	4619      	mov	r1, r3
 8000956:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800095a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800095e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000962:	ee17 4a90 	vmov	r4, s15
 8000966:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800096a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800096e:	ee17 5a90 	vmov	r5, s15
 8000972:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000976:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800097a:	ee17 6a90 	vmov	r6, s15
 800097e:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8000982:	9603      	str	r6, [sp, #12]
 8000984:	9502      	str	r5, [sp, #8]
 8000986:	9401      	str	r4, [sp, #4]
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	460b      	mov	r3, r1
 800098c:	4913      	ldr	r1, [pc, #76]	@ (80009dc <main+0x178>)
 800098e:	f009 fe19 	bl	800a5c4 <siprintf>
	  CDC_Transmit_FS((uint8_t*)str1, strlen(str1));
 8000992:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fc1a 	bl	80001d0 <strlen>
 800099c:	4603      	mov	r3, r0
 800099e:	b29a      	uxth	r2, r3
 80009a0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009a4:	4611      	mov	r1, r2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f009 fa02 	bl	8009db0 <CDC_Transmit_FS>
	  HAL_Delay(50);
 80009ac:	2032      	movs	r0, #50	@ 0x32
 80009ae:	f000 fba9 	bl	8001104 <HAL_Delay>
  {
 80009b2:	bf00      	nop
 80009b4:	e792      	b.n	80008dc <main+0x78>
 80009b6:	bf00      	nop
 80009b8:	c1a518bb 	.word	0xc1a518bb
 80009bc:	c2864be2 	.word	0xc2864be2
 80009c0:	c3944a5b 	.word	0xc3944a5b
 80009c4:	3f82d05f 	.word	0x3f82d05f
 80009c8:	3b896dd2 	.word	0x3b896dd2
 80009cc:	3c964841 	.word	0x3c964841
 80009d0:	3f826c12 	.word	0x3f826c12
 80009d4:	3c6c4a41 	.word	0x3c6c4a41
 80009d8:	3f8e5975 	.word	0x3f8e5975
 80009dc:	0800af1c 	.word	0x0800af1c

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b09e      	sub	sp, #120	@ 0x78
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80009ea:	2228      	movs	r2, #40	@ 0x28
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f009 fe08 	bl	800a604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a04:	463b      	mov	r3, r7
 8000a06:	223c      	movs	r2, #60	@ 0x3c
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f009 fdfa 	bl	800a604 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a10:	2303      	movs	r3, #3
 8000a12:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a18:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a22:	2310      	movs	r3, #16
 8000a24:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a2e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a30:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a34:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a36:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 f916 	bl	8003c6c <HAL_RCC_OscConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a46:	f000 f959 	bl	8000cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a60:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a64:	2102      	movs	r1, #2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f004 f93e 	bl	8004ce8 <HAL_RCC_ClockConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a72:	f000 f943 	bl	8000cfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <SystemClock_Config+0xc0>)
 8000a78:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000a82:	2300      	movs	r3, #0
 8000a84:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f004 fb4d 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a94:	f000 f932 	bl	8000cfc <Error_Handler>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3778      	adds	r7, #120	@ 0x78
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	00020022 	.word	0x00020022

08000aa4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8000b1c <MX_I2C1_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b20 <MX_I2C1_Init+0x7c>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aba:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ade:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ae0:	f000 fdd8 	bl	8001694 <HAL_I2C_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aea:	f000 f907 	bl	8000cfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	4809      	ldr	r0, [pc, #36]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000af2:	f001 fb5b 	bl	80021ac <HAL_I2CEx_ConfigAnalogFilter>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000afc:	f000 f8fe 	bl	8000cfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000b04:	f001 fb9d 	bl	8002242 <HAL_I2CEx_ConfigDigitalFilter>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b0e:	f000 f8f5 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200001ec 	.word	0x200001ec
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	00201d2b 	.word	0x00201d2b

08000b24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <MX_SPI1_Init+0x74>)
 8000b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b9c <MX_SPI1_Init+0x78>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <MX_SPI1_Init+0x74>)
 8000b30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b36:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <MX_SPI1_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	@ (8000b98 <MX_SPI1_Init+0x74>)
 8000b3e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000b42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b44:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <MX_SPI1_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <MX_SPI1_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <MX_SPI1_Init+0x74>)
 8000b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <MX_SPI1_Init+0x74>)
 8000b5a:	2208      	movs	r2, #8
 8000b5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <MX_SPI1_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <MX_SPI1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <MX_SPI1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b70:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <MX_SPI1_Init+0x74>)
 8000b72:	2207      	movs	r2, #7
 8000b74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <MX_SPI1_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <MX_SPI1_Init+0x74>)
 8000b7e:	2208      	movs	r2, #8
 8000b80:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_SPI1_Init+0x74>)
 8000b84:	f004 fc80 	bl	8005488 <HAL_SPI_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b8e:	f000 f8b5 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000240 	.word	0x20000240
 8000b9c:	40013000 	.word	0x40013000

08000ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000ba6:	4a15      	ldr	r2, [pc, #84]	@ (8000bfc <MX_USART2_UART_Init+0x5c>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000baa:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_USART2_UART_Init+0x58>)
 8000be4:	f004 fcfb 	bl	80055de <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bee:	f000 f885 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200002a4 	.word	0x200002a4
 8000bfc:	40004400 	.word	0x40004400

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	@ 0x28
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c16:	4b37      	ldr	r3, [pc, #220]	@ (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4a36      	ldr	r2, [pc, #216]	@ (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c20:	6153      	str	r3, [r2, #20]
 8000c22:	4b34      	ldr	r3, [pc, #208]	@ (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	4b31      	ldr	r3, [pc, #196]	@ (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	4a30      	ldr	r2, [pc, #192]	@ (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c38:	6153      	str	r3, [r2, #20]
 8000c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c46:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c50:	6153      	str	r3, [r2, #20]
 8000c52:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b25      	ldr	r3, [pc, #148]	@ (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	4a24      	ldr	r2, [pc, #144]	@ (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c68:	6153      	str	r3, [r2, #20]
 8000c6a:	4b22      	ldr	r3, [pc, #136]	@ (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c80:	6153      	str	r3, [r2, #20]
 8000c82:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf4 <MX_GPIO_Init+0xf4>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000c94:	4818      	ldr	r0, [pc, #96]	@ (8000cf8 <MX_GPIO_Init+0xf8>)
 8000c96:	f000 fce5 	bl	8001664 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000c9a:	2337      	movs	r3, #55	@ 0x37
 8000c9c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c9e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	4812      	ldr	r0, [pc, #72]	@ (8000cf8 <MX_GPIO_Init+0xf8>)
 8000cb0:	f000 fb5e 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000cb4:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000cb8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480a      	ldr	r0, [pc, #40]	@ (8000cf8 <MX_GPIO_Init+0xf8>)
 8000cce:	f000 fb4f 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce8:	f000 fb42 	bl	8001370 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	@ 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48001000 	.word	0x48001000

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <Error_Handler+0x8>

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <HAL_MspInit+0x44>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	4a0e      	ldr	r2, [pc, #56]	@ (8000d4c <HAL_MspInit+0x44>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6193      	str	r3, [r2, #24]
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <HAL_MspInit+0x44>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <HAL_MspInit+0x44>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	4a08      	ldr	r2, [pc, #32]	@ (8000d4c <HAL_MspInit+0x44>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d30:	61d3      	str	r3, [r2, #28]
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_MspInit+0x44>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d3e:	2007      	movs	r0, #7
 8000d40:	f000 fad4 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a17      	ldr	r2, [pc, #92]	@ (8000dcc <HAL_I2C_MspInit+0x7c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d127      	bne.n	8000dc2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <HAL_I2C_MspInit+0x80>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a16      	ldr	r2, [pc, #88]	@ (8000dd0 <HAL_I2C_MspInit+0x80>)
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <HAL_I2C_MspInit+0x80>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d8a:	23c0      	movs	r3, #192	@ 0xc0
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8e:	2312      	movs	r3, #18
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <HAL_I2C_MspInit+0x84>)
 8000da6:	f000 fae3 	bl	8001370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <HAL_I2C_MspInit+0x80>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	4a08      	ldr	r2, [pc, #32]	@ (8000dd0 <HAL_I2C_MspInit+0x80>)
 8000db0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000db4:	61d3      	str	r3, [r2, #28]
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_I2C_MspInit+0x80>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	@ 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	48000400 	.word	0x48000400

08000dd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	@ 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a17      	ldr	r2, [pc, #92]	@ (8000e54 <HAL_SPI_MspInit+0x7c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d128      	bne.n	8000e4c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dfa:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <HAL_SPI_MspInit+0x80>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	4a16      	ldr	r2, [pc, #88]	@ (8000e58 <HAL_SPI_MspInit+0x80>)
 8000e00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e04:	6193      	str	r3, [r2, #24]
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <HAL_SPI_MspInit+0x80>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <HAL_SPI_MspInit+0x80>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <HAL_SPI_MspInit+0x80>)
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1c:	6153      	str	r3, [r2, #20]
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <HAL_SPI_MspInit+0x80>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000e2a:	23e0      	movs	r3, #224	@ 0xe0
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e48:	f000 fa92 	bl	8001370 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	@ 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40013000 	.word	0x40013000
 8000e58:	40021000 	.word	0x40021000

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a17      	ldr	r2, [pc, #92]	@ (8000ed8 <HAL_UART_MspInit+0x7c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d128      	bne.n	8000ed0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <HAL_UART_MspInit+0x80>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a16      	ldr	r2, [pc, #88]	@ (8000edc <HAL_UART_MspInit+0x80>)
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <HAL_UART_MspInit+0x80>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <HAL_UART_MspInit+0x80>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <HAL_UART_MspInit+0x80>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea0:	6153      	str	r3, [r2, #20]
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <HAL_UART_MspInit+0x80>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ecc:	f000 fa50 	bl	8001370 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	@ 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40004400 	.word	0x40004400
 8000edc:	40021000 	.word	0x40021000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f36:	f000 f8c5 	bl	80010c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000f46:	f001 fab5 	bl	80024b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000ffc 	.word	0x20000ffc

08000f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f5c:	4a14      	ldr	r2, [pc, #80]	@ (8000fb0 <_sbrk+0x5c>)
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <_sbrk+0x60>)
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f68:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <_sbrk+0x64>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	@ (8000fbc <_sbrk+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d207      	bcs.n	8000f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f84:	f009 fb46 	bl	800a614 <__errno>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	e009      	b.n	8000fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <_sbrk+0x64>)
 8000fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000a000 	.word	0x2000a000
 8000fb4:	00000400 	.word	0x00000400
 8000fb8:	2000032c 	.word	0x2000032c
 8000fbc:	20001638 	.word	0x20001638

08000fc0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800101c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe8:	f7ff ffea 	bl	8000fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	@ (8001024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <LoopForever+0xe>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	@ (8001030 <LoopForever+0x16>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001012:	f009 fb05 	bl	800a620 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001016:	f7ff fc25 	bl	8000864 <main>

0800101a <LoopForever>:

LoopForever:
    b LoopForever
 800101a:	e7fe      	b.n	800101a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800101c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001028:	0800b000 	.word	0x0800b000
  ldr r2, =_sbss
 800102c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001030:	20001638 	.word	0x20001638

08001034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC1_2_IRQHandler>
	...

08001038 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <HAL_Init+0x28>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	@ (8001060 <HAL_Init+0x28>)
 8001042:	f043 0310 	orr.w	r3, r3, #16
 8001046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 f94f 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104e:	2000      	movs	r0, #0
 8001050:	f000 f808 	bl	8001064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001054:	f7ff fe58 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40022000 	.word	0x40022000

08001064 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_InitTick+0x54>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <HAL_InitTick+0x58>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f967 	bl	8001356 <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e00e      	b.n	80010b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b0f      	cmp	r3, #15
 8001096:	d80a      	bhi.n	80010ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f000 f92f 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a4:	4a06      	ldr	r2, [pc, #24]	@ (80010c0 <HAL_InitTick+0x5c>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000004 	.word	0x20000004

080010c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_IncTick+0x20>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_IncTick+0x24>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <HAL_IncTick+0x24>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000330 	.word	0x20000330

080010ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80010f0:	4b03      	ldr	r3, [pc, #12]	@ (8001100 <HAL_GetTick+0x14>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000330 	.word	0x20000330

08001104 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff ffee 	bl	80010ec <HAL_GetTick>
 8001110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111c:	d005      	beq.n	800112a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_Delay+0x44>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800112a:	bf00      	nop
 800112c:	f7ff ffde 	bl	80010ec <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f7      	bhi.n	800112c <HAL_Delay+0x28>
  {
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000008 	.word	0x20000008

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001174:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800117c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117e:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	60d3      	str	r3, [r2, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	@ (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	@ (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	@ (800123c <__NVIC_SetPriority+0x50>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	@ 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	@ 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff29 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001314:	f7ff ff3e 	bl	8001194 <__NVIC_GetPriorityGrouping>
 8001318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff ff8e 	bl	8001240 <NVIC_EncodePriority>
 8001324:	4602      	mov	r2, r0
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff5d 	bl	80011ec <__NVIC_SetPriority>
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff31 	bl	80011b0 <__NVIC_EnableIRQ>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffa2 	bl	80012a8 <SysTick_Config>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	e154      	b.n	800162a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2101      	movs	r1, #1
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 8146 	beq.w	8001624 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d005      	beq.n	80013b0 <HAL_GPIO_Init+0x40>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d130      	bne.n	8001412 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e6:	2201      	movs	r2, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	f003 0201 	and.w	r2, r3, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b03      	cmp	r3, #3
 800141c:	d017      	beq.n	800144e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d123      	bne.n	80014a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	6939      	ldr	r1, [r7, #16]
 800149e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0203 	and.w	r2, r3, #3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80a0 	beq.w	8001624 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e4:	4b58      	ldr	r3, [pc, #352]	@ (8001648 <HAL_GPIO_Init+0x2d8>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a57      	ldr	r2, [pc, #348]	@ (8001648 <HAL_GPIO_Init+0x2d8>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b55      	ldr	r3, [pc, #340]	@ (8001648 <HAL_GPIO_Init+0x2d8>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014fc:	4a53      	ldr	r2, [pc, #332]	@ (800164c <HAL_GPIO_Init+0x2dc>)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001526:	d019      	beq.n	800155c <HAL_GPIO_Init+0x1ec>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a49      	ldr	r2, [pc, #292]	@ (8001650 <HAL_GPIO_Init+0x2e0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d013      	beq.n	8001558 <HAL_GPIO_Init+0x1e8>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a48      	ldr	r2, [pc, #288]	@ (8001654 <HAL_GPIO_Init+0x2e4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d00d      	beq.n	8001554 <HAL_GPIO_Init+0x1e4>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a47      	ldr	r2, [pc, #284]	@ (8001658 <HAL_GPIO_Init+0x2e8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d007      	beq.n	8001550 <HAL_GPIO_Init+0x1e0>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a46      	ldr	r2, [pc, #280]	@ (800165c <HAL_GPIO_Init+0x2ec>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d101      	bne.n	800154c <HAL_GPIO_Init+0x1dc>
 8001548:	2304      	movs	r3, #4
 800154a:	e008      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 800154c:	2305      	movs	r3, #5
 800154e:	e006      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 8001550:	2303      	movs	r3, #3
 8001552:	e004      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 8001554:	2302      	movs	r3, #2
 8001556:	e002      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 800155c:	2300      	movs	r3, #0
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	f002 0203 	and.w	r2, r2, #3
 8001564:	0092      	lsls	r2, r2, #2
 8001566:	4093      	lsls	r3, r2
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800156e:	4937      	ldr	r1, [pc, #220]	@ (800164c <HAL_GPIO_Init+0x2dc>)
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800157c:	4b38      	ldr	r3, [pc, #224]	@ (8001660 <HAL_GPIO_Init+0x2f0>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001660 <HAL_GPIO_Init+0x2f0>)
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <HAL_GPIO_Init+0x2f0>)
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015ca:	4a25      	ldr	r2, [pc, #148]	@ (8001660 <HAL_GPIO_Init+0x2f0>)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015d0:	4b23      	ldr	r3, [pc, #140]	@ (8001660 <HAL_GPIO_Init+0x2f0>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43db      	mvns	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001660 <HAL_GPIO_Init+0x2f0>)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015fa:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <HAL_GPIO_Init+0x2f0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800161e:	4a10      	ldr	r2, [pc, #64]	@ (8001660 <HAL_GPIO_Init+0x2f0>)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3301      	adds	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	fa22 f303 	lsr.w	r3, r2, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	f47f aea3 	bne.w	8001380 <HAL_GPIO_Init+0x10>
  }
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	371c      	adds	r7, #28
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40021000 	.word	0x40021000
 800164c:	40010000 	.word	0x40010000
 8001650:	48000400 	.word	0x48000400
 8001654:	48000800 	.word	0x48000800
 8001658:	48000c00 	.word	0x48000c00
 800165c:	48001000 	.word	0x48001000
 8001660:	40010400 	.word	0x40010400

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001680:	e002      	b.n	8001688 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e08d      	b.n	80017c2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d106      	bne.n	80016c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fb48 	bl	8000d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2224      	movs	r2, #36	@ 0x24
 80016c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0201 	bic.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d107      	bne.n	800170e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	e006      	b.n	800171c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800171a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d108      	bne.n	8001736 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	e007      	b.n	8001746 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001744:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001758:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001768:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69d9      	ldr	r1, [r3, #28]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1a      	ldr	r2, [r3, #32]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4603      	mov	r3, r0
 80017dc:	817b      	strh	r3, [r7, #10]
 80017de:	460b      	mov	r3, r1
 80017e0:	813b      	strh	r3, [r7, #8]
 80017e2:	4613      	mov	r3, r2
 80017e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b20      	cmp	r3, #32
 80017f0:	f040 80f9 	bne.w	80019e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_I2C_Mem_Write+0x34>
 80017fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d105      	bne.n	800180c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001806:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0ed      	b.n	80019e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_I2C_Mem_Write+0x4e>
 8001816:	2302      	movs	r3, #2
 8001818:	e0e6      	b.n	80019e8 <HAL_I2C_Mem_Write+0x21c>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001822:	f7ff fc63 	bl	80010ec <HAL_GetTick>
 8001826:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2319      	movs	r3, #25
 800182e:	2201      	movs	r2, #1
 8001830:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f000 fac3 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0d1      	b.n	80019e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2221      	movs	r2, #33	@ 0x21
 8001848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2240      	movs	r2, #64	@ 0x40
 8001850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6a3a      	ldr	r2, [r7, #32]
 800185e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001864:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800186c:	88f8      	ldrh	r0, [r7, #6]
 800186e:	893a      	ldrh	r2, [r7, #8]
 8001870:	8979      	ldrh	r1, [r7, #10]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	4603      	mov	r3, r0
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 f9d3 	bl	8001c28 <I2C_RequestMemoryWrite>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0a9      	b.n	80019e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001898:	b29b      	uxth	r3, r3
 800189a:	2bff      	cmp	r3, #255	@ 0xff
 800189c:	d90e      	bls.n	80018bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	22ff      	movs	r2, #255	@ 0xff
 80018a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	8979      	ldrh	r1, [r7, #10]
 80018ac:	2300      	movs	r3, #0
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 fc47 	bl	8002148 <I2C_TransferConfig>
 80018ba:	e00f      	b.n	80018dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	8979      	ldrh	r1, [r7, #10]
 80018ce:	2300      	movs	r3, #0
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 fc36 	bl	8002148 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 fac6 	bl	8001e72 <I2C_WaitOnTXISFlagUntilTimeout>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e07b      	b.n	80019e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800190a:	b29b      	uxth	r3, r3
 800190c:	3b01      	subs	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001918:	3b01      	subs	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001924:	b29b      	uxth	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d034      	beq.n	8001994 <HAL_I2C_Mem_Write+0x1c8>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800192e:	2b00      	cmp	r3, #0
 8001930:	d130      	bne.n	8001994 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001938:	2200      	movs	r2, #0
 800193a:	2180      	movs	r1, #128	@ 0x80
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 fa3f 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e04d      	b.n	80019e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001950:	b29b      	uxth	r3, r3
 8001952:	2bff      	cmp	r3, #255	@ 0xff
 8001954:	d90e      	bls.n	8001974 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	22ff      	movs	r2, #255	@ 0xff
 800195a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001960:	b2da      	uxtb	r2, r3
 8001962:	8979      	ldrh	r1, [r7, #10]
 8001964:	2300      	movs	r3, #0
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 fbeb 	bl	8002148 <I2C_TransferConfig>
 8001972:	e00f      	b.n	8001994 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001978:	b29a      	uxth	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001982:	b2da      	uxtb	r2, r3
 8001984:	8979      	ldrh	r1, [r7, #10]
 8001986:	2300      	movs	r3, #0
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 fbda 	bl	8002148 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001998:	b29b      	uxth	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d19e      	bne.n	80018dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 faac 	bl	8001f00 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e01a      	b.n	80019e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2220      	movs	r2, #32
 80019b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_I2C_Mem_Write+0x224>)
 80019c6:	400b      	ands	r3, r1
 80019c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2220      	movs	r2, #32
 80019ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80019e6:	2302      	movs	r3, #2
  }
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	fe00e800 	.word	0xfe00e800

080019f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	4608      	mov	r0, r1
 80019fe:	4611      	mov	r1, r2
 8001a00:	461a      	mov	r2, r3
 8001a02:	4603      	mov	r3, r0
 8001a04:	817b      	strh	r3, [r7, #10]
 8001a06:	460b      	mov	r3, r1
 8001a08:	813b      	strh	r3, [r7, #8]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	f040 80fd 	bne.w	8001c16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <HAL_I2C_Mem_Read+0x34>
 8001a22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0f1      	b.n	8001c18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_I2C_Mem_Read+0x4e>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e0ea      	b.n	8001c18 <HAL_I2C_Mem_Read+0x224>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a4a:	f7ff fb4f 	bl	80010ec <HAL_GetTick>
 8001a4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2319      	movs	r3, #25
 8001a56:	2201      	movs	r2, #1
 8001a58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 f9af 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0d5      	b.n	8001c18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2222      	movs	r2, #34	@ 0x22
 8001a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2240      	movs	r2, #64	@ 0x40
 8001a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a3a      	ldr	r2, [r7, #32]
 8001a86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a94:	88f8      	ldrh	r0, [r7, #6]
 8001a96:	893a      	ldrh	r2, [r7, #8]
 8001a98:	8979      	ldrh	r1, [r7, #10]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 f913 	bl	8001cd0 <I2C_RequestMemoryRead>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0ad      	b.n	8001c18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2bff      	cmp	r3, #255	@ 0xff
 8001ac4:	d90e      	bls.n	8001ae4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	8979      	ldrh	r1, [r7, #10]
 8001ad4:	4b52      	ldr	r3, [pc, #328]	@ (8001c20 <HAL_I2C_Mem_Read+0x22c>)
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 fb33 	bl	8002148 <I2C_TransferConfig>
 8001ae2:	e00f      	b.n	8001b04 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	8979      	ldrh	r1, [r7, #10]
 8001af6:	4b4a      	ldr	r3, [pc, #296]	@ (8001c20 <HAL_I2C_Mem_Read+0x22c>)
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 fb22 	bl	8002148 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 f956 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e07c      	b.n	8001c18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d034      	beq.n	8001bc4 <HAL_I2C_Mem_Read+0x1d0>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d130      	bne.n	8001bc4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2180      	movs	r1, #128	@ 0x80
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f927 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e04d      	b.n	8001c18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	2bff      	cmp	r3, #255	@ 0xff
 8001b84:	d90e      	bls.n	8001ba4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	8979      	ldrh	r1, [r7, #10]
 8001b94:	2300      	movs	r3, #0
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 fad3 	bl	8002148 <I2C_TransferConfig>
 8001ba2:	e00f      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	8979      	ldrh	r1, [r7, #10]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 fac2 	bl	8002148 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d19a      	bne.n	8001b04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 f994 	bl	8001f00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e01a      	b.n	8001c18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2220      	movs	r2, #32
 8001be8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <HAL_I2C_Mem_Read+0x230>)
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e000      	b.n	8001c18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001c16:	2302      	movs	r3, #2
  }
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	80002400 	.word	0x80002400
 8001c24:	fe00e800 	.word	0xfe00e800

08001c28 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	4608      	mov	r0, r1
 8001c32:	4611      	mov	r1, r2
 8001c34:	461a      	mov	r2, r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	817b      	strh	r3, [r7, #10]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	813b      	strh	r3, [r7, #8]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	8979      	ldrh	r1, [r7, #10]
 8001c48:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <I2C_RequestMemoryWrite+0xa4>)
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 fa79 	bl	8002148 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	69b9      	ldr	r1, [r7, #24]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 f909 	bl	8001e72 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e02c      	b.n	8001cc4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c70:	893b      	ldrh	r3, [r7, #8]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c7a:	e015      	b.n	8001ca8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c7c:	893b      	ldrh	r3, [r7, #8]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	69b9      	ldr	r1, [r7, #24]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f8ef 	bl	8001e72 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e012      	b.n	8001cc4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c9e:	893b      	ldrh	r3, [r7, #8]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2180      	movs	r1, #128	@ 0x80
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f884 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	80002000 	.word	0x80002000

08001cd0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	4608      	mov	r0, r1
 8001cda:	4611      	mov	r1, r2
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4603      	mov	r3, r0
 8001ce0:	817b      	strh	r3, [r7, #10]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	813b      	strh	r3, [r7, #8]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	8979      	ldrh	r1, [r7, #10]
 8001cf0:	4b20      	ldr	r3, [pc, #128]	@ (8001d74 <I2C_RequestMemoryRead+0xa4>)
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 fa26 	bl	8002148 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	69b9      	ldr	r1, [r7, #24]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 f8b6 	bl	8001e72 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e02c      	b.n	8001d6a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d105      	bne.n	8001d22 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d16:	893b      	ldrh	r3, [r7, #8]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d20:	e015      	b.n	8001d4e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d22:	893b      	ldrh	r3, [r7, #8]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	69b9      	ldr	r1, [r7, #24]
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 f89c 	bl	8001e72 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e012      	b.n	8001d6a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d44:	893b      	ldrh	r3, [r7, #8]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2200      	movs	r2, #0
 8001d56:	2140      	movs	r1, #64	@ 0x40
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 f831 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	80002000 	.word	0x80002000

08001d78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d103      	bne.n	8001d96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2200      	movs	r2, #0
 8001d94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d007      	beq.n	8001db4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699a      	ldr	r2, [r3, #24]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	619a      	str	r2, [r3, #24]
  }
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dd0:	e03b      	b.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	6839      	ldr	r1, [r7, #0]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f8d6 	bl	8001f88 <I2C_IsErrorOccurred>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e041      	b.n	8001e6a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d02d      	beq.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dee:	f7ff f97d 	bl	80010ec <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d302      	bcc.n	8001e04 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d122      	bne.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	bf0c      	ite	eq
 8001e14:	2301      	moveq	r3, #1
 8001e16:	2300      	movne	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d113      	bne.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f043 0220 	orr.w	r2, r3, #32
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2220      	movs	r2, #32
 8001e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00f      	b.n	8001e6a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699a      	ldr	r2, [r3, #24]
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4013      	ands	r3, r2
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	bf0c      	ite	eq
 8001e5a:	2301      	moveq	r3, #1
 8001e5c:	2300      	movne	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d0b4      	beq.n	8001dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e7e:	e033      	b.n	8001ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 f87f 	bl	8001f88 <I2C_IsErrorOccurred>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e031      	b.n	8001ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9a:	d025      	beq.n	8001ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9c:	f7ff f926 	bl	80010ec <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d302      	bcc.n	8001eb2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d11a      	bne.n	8001ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d013      	beq.n	8001ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec4:	f043 0220 	orr.w	r2, r3, #32
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e007      	b.n	8001ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d1c4      	bne.n	8001e80 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f0c:	e02f      	b.n	8001f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f838 	bl	8001f88 <I2C_IsErrorOccurred>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e02d      	b.n	8001f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f22:	f7ff f8e3 	bl	80010ec <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d302      	bcc.n	8001f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d11a      	bne.n	8001f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d013      	beq.n	8001f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	f043 0220 	orr.w	r2, r3, #32
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e007      	b.n	8001f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0320 	and.w	r3, r3, #32
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d1c8      	bne.n	8001f0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d068      	beq.n	8002086 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2210      	movs	r2, #16
 8001fba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fbc:	e049      	b.n	8002052 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d045      	beq.n	8002052 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fc6:	f7ff f891 	bl	80010ec <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <I2C_IsErrorOccurred+0x54>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d13a      	bne.n	8002052 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fe6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001fee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ffa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ffe:	d121      	bne.n	8002044 <I2C_IsErrorOccurred+0xbc>
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002006:	d01d      	beq.n	8002044 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	2b20      	cmp	r3, #32
 800200c:	d01a      	beq.n	8002044 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800201c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800201e:	f7ff f865 	bl	80010ec <HAL_GetTick>
 8002022:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002024:	e00e      	b.n	8002044 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002026:	f7ff f861 	bl	80010ec <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b19      	cmp	r3, #25
 8002032:	d907      	bls.n	8002044 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	f043 0320 	orr.w	r3, r3, #32
 800203a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002042:	e006      	b.n	8002052 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b20      	cmp	r3, #32
 8002050:	d1e9      	bne.n	8002026 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b20      	cmp	r3, #32
 800205e:	d003      	beq.n	8002068 <I2C_IsErrorOccurred+0xe0>
 8002060:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0aa      	beq.n	8001fbe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800206c:	2b00      	cmp	r3, #0
 800206e:	d103      	bne.n	8002078 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2220      	movs	r2, #32
 8002076:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00b      	beq.n	80020b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	f043 0308 	orr.w	r3, r3, #8
 80020c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00b      	beq.n	80020f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	f043 0302 	orr.w	r3, r3, #2
 80020e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80020f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01c      	beq.n	8002136 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f7ff fe3b 	bl	8001d78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6859      	ldr	r1, [r3, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <I2C_IsErrorOccurred+0x1bc>)
 800210e:	400b      	ands	r3, r1
 8002110:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	431a      	orrs	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002136:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800213a:	4618      	mov	r0, r3
 800213c:	3728      	adds	r7, #40	@ 0x28
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	fe00e800 	.word	0xfe00e800

08002148 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	817b      	strh	r3, [r7, #10]
 8002156:	4613      	mov	r3, r2
 8002158:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800215a:	897b      	ldrh	r3, [r7, #10]
 800215c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002160:	7a7b      	ldrb	r3, [r7, #9]
 8002162:	041b      	lsls	r3, r3, #16
 8002164:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002168:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	4313      	orrs	r3, r2
 8002172:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002176:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	0d5b      	lsrs	r3, r3, #21
 8002182:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002186:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <I2C_TransferConfig+0x60>)
 8002188:	430b      	orrs	r3, r1
 800218a:	43db      	mvns	r3, r3
 800218c:	ea02 0103 	and.w	r1, r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	03ff63ff 	.word	0x03ff63ff

080021ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b20      	cmp	r3, #32
 80021c0:	d138      	bne.n	8002234 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e032      	b.n	8002236 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2224      	movs	r2, #36	@ 0x24
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6819      	ldr	r1, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2220      	movs	r2, #32
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	e000      	b.n	8002236 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002234:	2302      	movs	r3, #2
  }
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002242:	b480      	push	{r7}
 8002244:	b085      	sub	sp, #20
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b20      	cmp	r3, #32
 8002256:	d139      	bne.n	80022cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002262:	2302      	movs	r3, #2
 8002264:	e033      	b.n	80022ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2224      	movs	r2, #36	@ 0x24
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002294:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0b9      	b.n	8002460 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d106      	bne.n	8002306 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f007 fe8b 	bl	800a01c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2203      	movs	r2, #3
 800230a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fdb8 	bl	8005e88 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e03e      	b.n	800239c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	440b      	add	r3, r1
 800232c:	3311      	adds	r3, #17
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	3310      	adds	r3, #16
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	440b      	add	r3, r1
 8002354:	3313      	adds	r3, #19
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	3320      	adds	r3, #32
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	3324      	adds	r3, #36	@ 0x24
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	3301      	adds	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	791b      	ldrb	r3, [r3, #4]
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d3bb      	bcc.n	800231e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	e044      	b.n	8002436 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	440b      	add	r3, r1
 80023ba:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	440b      	add	r3, r1
 80023d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	440b      	add	r3, r1
 80023e6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023ee:	7bfa      	ldrb	r2, [r7, #15]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	440b      	add	r3, r1
 80023fc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	3301      	adds	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	791b      	ldrb	r3, [r3, #4]
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	429a      	cmp	r2, r3
 800243e:	d3b5      	bcc.n	80023ac <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3304      	adds	r3, #4
 8002448:	e893 0006 	ldmia.w	r3, {r1, r2}
 800244c:	f003 fd37 	bl	8005ebe <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_PCD_Start+0x16>
 800247a:	2302      	movs	r3, #2
 800247c:	e016      	b.n	80024ac <HAL_PCD_Start+0x44>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f003 fce5 	bl	8005e5a <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002490:	2101      	movs	r1, #1
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f008 f85e 	bl	800a554 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f005 ffa3 	bl	80083e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f005 ff9c 	bl	80083fe <USB_ReadInterrupts>
 80024c6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fab1 	bl	8002a3a <PCD_EP_ISR_Handler>

    return;
 80024d8:	e0bd      	b.n	8002656 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024f6:	b292      	uxth	r2, r2
 80024f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f007 fe2e 	bl	800a15e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002502:	2100      	movs	r1, #0
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f8a9 	bl	800265c <HAL_PCD_SetAddress>

    return;
 800250a:	e0a4      	b.n	8002656 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00c      	beq.n	8002530 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800251e:	b29a      	uxth	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002528:	b292      	uxth	r2, r2
 800252a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800252e:	e092      	b.n	8002656 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00c      	beq.n	8002554 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002542:	b29a      	uxth	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800254c:	b292      	uxth	r2, r2
 800254e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002552:	e080      	b.n	8002656 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d027      	beq.n	80025ae <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002566:	b29a      	uxth	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0204 	bic.w	r2, r2, #4
 8002570:	b292      	uxth	r2, r2
 8002572:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800257e:	b29a      	uxth	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0208 	bic.w	r2, r2, #8
 8002588:	b292      	uxth	r2, r2
 800258a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f007 fe1e 	bl	800a1d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025a6:	b292      	uxth	r2, r2
 80025a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80025ac:	e053      	b.n	8002656 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d027      	beq.n	8002608 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0208 	orr.w	r2, r2, #8
 80025ca:	b292      	uxth	r2, r2
 80025cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025d8:	b29a      	uxth	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025e2:	b292      	uxth	r2, r2
 80025e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0204 	orr.w	r2, r2, #4
 80025fa:	b292      	uxth	r2, r2
 80025fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f007 fdcb 	bl	800a19c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002606:	e026      	b.n	8002656 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00f      	beq.n	8002632 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800261a:	b29a      	uxth	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002624:	b292      	uxth	r2, r2
 8002626:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f007 fd89 	bl	800a142 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002630:	e011      	b.n	8002656 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00c      	beq.n	8002656 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002644:	b29a      	uxth	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800264e:	b292      	uxth	r2, r2
 8002650:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002654:	bf00      	nop
  }
}
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_PCD_SetAddress+0x1a>
 8002672:	2302      	movs	r3, #2
 8002674:	e012      	b.n	800269c <HAL_PCD_SetAddress+0x40>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f005 fe97 	bl	80083c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	4608      	mov	r0, r1
 80026ae:	4611      	mov	r1, r2
 80026b0:	461a      	mov	r2, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	70fb      	strb	r3, [r7, #3]
 80026b6:	460b      	mov	r3, r1
 80026b8:	803b      	strh	r3, [r7, #0]
 80026ba:	4613      	mov	r3, r2
 80026bc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	da0e      	bge.n	80026e8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	f003 0207 	and.w	r2, r3, #7
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	3310      	adds	r3, #16
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	705a      	strb	r2, [r3, #1]
 80026e6:	e00e      	b.n	8002706 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	f003 0207 	and.w	r2, r3, #7
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002712:	883a      	ldrh	r2, [r7, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	78ba      	ldrb	r2, [r7, #2]
 800271c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800271e:	78bb      	ldrb	r3, [r7, #2]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d102      	bne.n	800272a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_PCD_EP_Open+0x94>
 8002734:	2302      	movs	r3, #2
 8002736:	e00e      	b.n	8002756 <HAL_PCD_EP_Open+0xb2>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68f9      	ldr	r1, [r7, #12]
 8002746:	4618      	mov	r0, r3
 8002748:	f003 fbd8 	bl	8005efc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002754:	7afb      	ldrb	r3, [r7, #11]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800276a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800276e:	2b00      	cmp	r3, #0
 8002770:	da0e      	bge.n	8002790 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	f003 0207 	and.w	r2, r3, #7
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	3310      	adds	r3, #16
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	705a      	strb	r2, [r3, #1]
 800278e:	e00e      	b.n	80027ae <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	f003 0207 	and.w	r2, r3, #7
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_PCD_EP_Close+0x6a>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e00e      	b.n	80027e6 <HAL_PCD_EP_Close+0x88>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68f9      	ldr	r1, [r7, #12]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 ff54 	bl	8006684 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	460b      	mov	r3, r1
 80027fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027fe:	7afb      	ldrb	r3, [r7, #11]
 8002800:	f003 0207 	and.w	r2, r3, #7
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4413      	add	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2200      	movs	r2, #0
 8002826:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2200      	movs	r2, #0
 800282c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800282e:	7afb      	ldrb	r3, [r7, #11]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	b2da      	uxtb	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6979      	ldr	r1, [r7, #20]
 8002840:	4618      	mov	r0, r3
 8002842:	f004 f90c 	bl	8006a5e <USB_EPStartXfer>

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	f003 0207 	and.w	r2, r3, #7
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	440b      	add	r3, r1
 800286e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	460b      	mov	r3, r1
 800288e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002890:	7afb      	ldrb	r3, [r7, #11]
 8002892:	f003 0207 	and.w	r2, r3, #7
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	3310      	adds	r3, #16
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2201      	movs	r2, #1
 80028ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028cc:	7afb      	ldrb	r3, [r7, #11]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6979      	ldr	r1, [r7, #20]
 80028de:	4618      	mov	r0, r3
 80028e0:	f004 f8bd 	bl	8006a5e <USB_EPStartXfer>

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028fa:	78fb      	ldrb	r3, [r7, #3]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	7912      	ldrb	r2, [r2, #4]
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e03e      	b.n	800298a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800290c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002910:	2b00      	cmp	r3, #0
 8002912:	da0e      	bge.n	8002932 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	f003 0207 	and.w	r2, r3, #7
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	3310      	adds	r3, #16
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4413      	add	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	705a      	strb	r2, [r3, #1]
 8002930:	e00c      	b.n	800294c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	b2da      	uxtb	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_PCD_EP_SetStall+0x7e>
 8002968:	2302      	movs	r3, #2
 800296a:	e00e      	b.n	800298a <HAL_PCD_EP_SetStall+0x9c>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68f9      	ldr	r1, [r7, #12]
 800297a:	4618      	mov	r0, r3
 800297c:	f005 fc21 	bl	80081c2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	460b      	mov	r3, r1
 800299c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	7912      	ldrb	r2, [r2, #4]
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d901      	bls.n	80029b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e040      	b.n	8002a32 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	da0e      	bge.n	80029d6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	f003 0207 	and.w	r2, r3, #7
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	3310      	adds	r3, #16
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	4413      	add	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	705a      	strb	r2, [r3, #1]
 80029d4:	e00e      	b.n	80029f4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	f003 0207 	and.w	r2, r3, #7
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	4413      	add	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_PCD_EP_ClrStall+0x82>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e00e      	b.n	8002a32 <HAL_PCD_EP_ClrStall+0xa0>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68f9      	ldr	r1, [r7, #12]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f005 fc1e 	bl	8008264 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b096      	sub	sp, #88	@ 0x58
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a42:	e3bb      	b.n	80031bc <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a4c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a50:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8002a5e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f040 8175 	bne.w	8002d52 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d14e      	bne.n	8002b12 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a84:	81fb      	strh	r3, [r7, #14]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	89fb      	ldrh	r3, [r7, #14]
 8002a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3310      	adds	r3, #16
 8002a9c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	441a      	add	r2, r3
 8002ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ad8:	2100      	movs	r1, #0
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f007 fb17 	bl	800a10e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	7b1b      	ldrb	r3, [r3, #12]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8368 	beq.w	80031bc <PCD_EP_ISR_Handler+0x782>
 8002aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 8363 	bne.w	80031bc <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7b1b      	ldrb	r3, [r3, #12]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	731a      	strb	r2, [r3, #12]
 8002b10:	e354      	b.n	80031bc <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b18:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b24:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d034      	beq.n	8002b9a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	3306      	adds	r3, #6
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b68:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b6c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f005 fc9b 	bl	80084aa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002b80:	4013      	ands	r3, r2
 8002b82:	823b      	strh	r3, [r7, #16]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	8a3a      	ldrh	r2, [r7, #16]
 8002b8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b8e:	b292      	uxth	r2, r2
 8002b90:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f007 fa8e 	bl	800a0b4 <HAL_PCD_SetupStageCallback>
 8002b98:	e310      	b.n	80031bc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b9a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f280 830c 	bge.w	80031bc <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	83fb      	strh	r3, [r7, #30]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	8bfa      	ldrh	r2, [r7, #30]
 8002bba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bbe:	b292      	uxth	r2, r2
 8002bc0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3306      	adds	r3, #6
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d019      	beq.n	8002c2a <PCD_EP_ISR_Handler+0x1f0>
 8002bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d015      	beq.n	8002c2a <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c04:	6959      	ldr	r1, [r3, #20]
 8002c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c08:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c0c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	f005 fc4b 	bl	80084aa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	441a      	add	r2, r3
 8002c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c20:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c22:	2100      	movs	r1, #0
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f007 fa57 	bl	800a0d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002c34:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f040 82bd 	bne.w	80031bc <PCD_EP_ISR_Handler+0x782>
 8002c42:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002c46:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002c4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c4e:	f000 82b5 	beq.w	80031bc <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	4413      	add	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	801a      	strh	r2, [r3, #0]
 8002c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10a      	bne.n	8002ca0 <PCD_EP_ISR_Handler+0x266>
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	801a      	strh	r2, [r3, #0]
 8002c9e:	e039      	b.n	8002d14 <PCD_EP_ISR_Handler+0x2da>
 8002ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ca6:	d818      	bhi.n	8002cda <PCD_EP_ISR_Handler+0x2a0>
 8002ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	085b      	lsrs	r3, r3, #1
 8002cae:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <PCD_EP_ISR_Handler+0x288>
 8002cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	029b      	lsls	r3, r3, #10
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	801a      	strh	r2, [r3, #0]
 8002cd8:	e01c      	b.n	8002d14 <PCD_EP_ISR_Handler+0x2da>
 8002cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <PCD_EP_ISR_Handler+0x2ba>
 8002cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	029b      	lsls	r3, r3, #10
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	4313      	orrs	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d24:	827b      	strh	r3, [r7, #18]
 8002d26:	8a7b      	ldrh	r3, [r7, #18]
 8002d28:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002d2c:	827b      	strh	r3, [r7, #18]
 8002d2e:	8a7b      	ldrh	r3, [r7, #18]
 8002d30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002d34:	827b      	strh	r3, [r7, #18]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	8a7b      	ldrh	r3, [r7, #18]
 8002d3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	8013      	strh	r3, [r2, #0]
 8002d50:	e234      	b.n	80031bc <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d66:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f280 80fc 	bge.w	8002f68 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002d86:	4013      	ands	r3, r2
 8002d88:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002d9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002da2:	b292      	uxth	r2, r2
 8002da4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002da6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dbe:	7b1b      	ldrb	r3, [r3, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d125      	bne.n	8002e10 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3306      	adds	r3, #6
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002df0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8092 	beq.w	8002f1e <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e00:	6959      	ldr	r1, [r3, #20]
 8002e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e04:	88da      	ldrh	r2, [r3, #6]
 8002e06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e0a:	f005 fb4e 	bl	80084aa <USB_ReadPMA>
 8002e0e:	e086      	b.n	8002f1e <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e12:	78db      	ldrb	r3, [r3, #3]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d10a      	bne.n	8002e2e <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f9d9 	bl	80031d8 <HAL_PCD_EP_DB_Receive>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002e2c:	e077      	b.n	8002f1e <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e48:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	441a      	add	r2, r3
 8002e5a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d024      	beq.n	8002ed6 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002eb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d02e      	beq.n	8002f1e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec6:	6959      	ldr	r1, [r3, #20]
 8002ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eca:	891a      	ldrh	r2, [r3, #8]
 8002ecc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ed0:	f005 faeb 	bl	80084aa <USB_ReadPMA>
 8002ed4:	e023      	b.n	8002f1e <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	3306      	adds	r3, #6
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002efe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002f02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f10:	6959      	ldr	r1, [r3, #20]
 8002f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f14:	895a      	ldrh	r2, [r3, #10]
 8002f16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f1a:	f005 fac6 	bl	80084aa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f26:	441a      	add	r2, r3
 8002f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f2e:	695a      	ldr	r2, [r3, #20]
 8002f30:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f34:	441a      	add	r2, r3
 8002f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f38:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <PCD_EP_ISR_Handler+0x514>
 8002f42:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d206      	bcs.n	8002f5c <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	4619      	mov	r1, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f007 f8bf 	bl	800a0d8 <HAL_PCD_DataOutStageCallback>
 8002f5a:	e005      	b.n	8002f68 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 fd7b 	bl	8006a5e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f68:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8123 	beq.w	80031bc <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f76:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	3310      	adds	r3, #16
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	4413      	add	r3, r2
 8002f88:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fa4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	441a      	add	r2, r3
 8002fb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc8:	78db      	ldrb	r3, [r3, #3]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	f040 80a2 	bne.w	8003114 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd8:	7b1b      	ldrb	r3, [r3, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8093 	beq.w	8003106 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fe0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d046      	beq.n	800307a <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fee:	785b      	ldrb	r3, [r3, #1]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d126      	bne.n	8003042 <PCD_EP_ISR_Handler+0x608>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003002:	b29b      	uxth	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	4413      	add	r3, r2
 800300a:	627b      	str	r3, [r7, #36]	@ 0x24
 800300c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	011a      	lsls	r2, r3, #4
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	4413      	add	r3, r2
 8003016:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800301a:	623b      	str	r3, [r7, #32]
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003026:	b29a      	uxth	r2, r3
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	801a      	strh	r2, [r3, #0]
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	b29b      	uxth	r3, r3
 8003032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800303a:	b29a      	uxth	r2, r3
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	801a      	strh	r2, [r3, #0]
 8003040:	e061      	b.n	8003106 <PCD_EP_ISR_Handler+0x6cc>
 8003042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d15d      	bne.n	8003106 <PCD_EP_ISR_Handler+0x6cc>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305e:	4413      	add	r3, r2
 8003060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	011a      	lsls	r2, r3, #4
 8003068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306a:	4413      	add	r3, r2
 800306c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003070:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003074:	2200      	movs	r2, #0
 8003076:	801a      	strh	r2, [r3, #0]
 8003078:	e045      	b.n	8003106 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003082:	785b      	ldrb	r3, [r3, #1]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d126      	bne.n	80030d6 <PCD_EP_ISR_Handler+0x69c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	637b      	str	r3, [r7, #52]	@ 0x34
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003096:	b29b      	uxth	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800309c:	4413      	add	r3, r2
 800309e:	637b      	str	r3, [r7, #52]	@ 0x34
 80030a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	011a      	lsls	r2, r3, #4
 80030a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a8:	4413      	add	r3, r2
 80030aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80030b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030be:	801a      	strh	r2, [r3, #0]
 80030c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d2:	801a      	strh	r2, [r3, #0]
 80030d4:	e017      	b.n	8003106 <PCD_EP_ISR_Handler+0x6cc>
 80030d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d8:	785b      	ldrb	r3, [r3, #1]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d113      	bne.n	8003106 <PCD_EP_ISR_Handler+0x6cc>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ec:	4413      	add	r3, r2
 80030ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	011a      	lsls	r2, r3, #4
 80030f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030f8:	4413      	add	r3, r2
 80030fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003102:	2200      	movs	r2, #0
 8003104:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	4619      	mov	r1, r3
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f006 fffe 	bl	800a10e <HAL_PCD_DataInStageCallback>
 8003112:	e053      	b.n	80031bc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003114:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d146      	bne.n	80031ae <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003128:	b29b      	uxth	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	3302      	adds	r3, #2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003148:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800314c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800314e:	699a      	ldr	r2, [r3, #24]
 8003150:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003154:	429a      	cmp	r2, r3
 8003156:	d907      	bls.n	8003168 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315a:	699a      	ldr	r2, [r3, #24]
 800315c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003160:	1ad2      	subs	r2, r2, r3
 8003162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003164:	619a      	str	r2, [r3, #24]
 8003166:	e002      	b.n	800316e <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316a:	2200      	movs	r2, #0
 800316c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800316e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4619      	mov	r1, r3
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f006 ffc6 	bl	800a10e <HAL_PCD_DataInStageCallback>
 8003182:	e01b      	b.n	80031bc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800318c:	441a      	add	r2, r3
 800318e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003190:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800319a:	441a      	add	r2, r3
 800319c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800319e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031a6:	4618      	mov	r0, r3
 80031a8:	f003 fc59 	bl	8006a5e <USB_EPStartXfer>
 80031ac:	e006      	b.n	80031bc <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80031ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80031b2:	461a      	mov	r2, r3
 80031b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f91b 	bl	80033f2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	b21b      	sxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f6ff ac3b 	blt.w	8002a44 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3758      	adds	r7, #88	@ 0x58
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	4613      	mov	r3, r2
 80031e4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d07e      	beq.n	80032ee <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	3302      	adds	r3, #2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003218:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	8b7b      	ldrh	r3, [r7, #26]
 8003220:	429a      	cmp	r2, r3
 8003222:	d306      	bcc.n	8003232 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	8b7b      	ldrh	r3, [r7, #26]
 800322a:	1ad2      	subs	r2, r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	619a      	str	r2, [r3, #24]
 8003230:	e002      	b.n	8003238 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2200      	movs	r2, #0
 8003236:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d123      	bne.n	8003288 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	b29b      	uxth	r3, r3
 8003252:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800325a:	833b      	strh	r3, [r7, #24]
 800325c:	8b3b      	ldrh	r3, [r7, #24]
 800325e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003262:	833b      	strh	r3, [r7, #24]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	441a      	add	r2, r3
 8003272:	8b3b      	ldrh	r3, [r7, #24]
 8003274:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003278:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800327c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003284:	b29b      	uxth	r3, r3
 8003286:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01f      	beq.n	80032d2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ac:	82fb      	strh	r3, [r7, #22]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	441a      	add	r2, r3
 80032bc:	8afb      	ldrh	r3, [r7, #22]
 80032be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032d2:	8b7b      	ldrh	r3, [r7, #26]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 8087 	beq.w	80033e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	6959      	ldr	r1, [r3, #20]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	891a      	ldrh	r2, [r3, #8]
 80032e6:	8b7b      	ldrh	r3, [r7, #26]
 80032e8:	f005 f8df 	bl	80084aa <USB_ReadPMA>
 80032ec:	e07c      	b.n	80033e8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	3306      	adds	r3, #6
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003316:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	699a      	ldr	r2, [r3, #24]
 800331c:	8b7b      	ldrh	r3, [r7, #26]
 800331e:	429a      	cmp	r2, r3
 8003320:	d306      	bcc.n	8003330 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	8b7b      	ldrh	r3, [r7, #26]
 8003328:	1ad2      	subs	r2, r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	619a      	str	r2, [r3, #24]
 800332e:	e002      	b.n	8003336 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2200      	movs	r2, #0
 8003334:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d123      	bne.n	8003386 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003358:	83fb      	strh	r3, [r7, #30]
 800335a:	8bfb      	ldrh	r3, [r7, #30]
 800335c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003360:	83fb      	strh	r3, [r7, #30]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	441a      	add	r2, r3
 8003370:	8bfb      	ldrh	r3, [r7, #30]
 8003372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800337a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800337e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003382:	b29b      	uxth	r3, r3
 8003384:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d11f      	bne.n	80033d0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033aa:	83bb      	strh	r3, [r7, #28]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	441a      	add	r2, r3
 80033ba:	8bbb      	ldrh	r3, [r7, #28]
 80033bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033d0:	8b7b      	ldrh	r3, [r7, #26]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	6959      	ldr	r1, [r3, #20]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	895a      	ldrh	r2, [r3, #10]
 80033e2:	8b7b      	ldrh	r3, [r7, #26]
 80033e4:	f005 f861 	bl	80084aa <USB_ReadPMA>
    }
  }

  return count;
 80033e8:	8b7b      	ldrh	r3, [r7, #26]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3720      	adds	r7, #32
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b0a4      	sub	sp, #144	@ 0x90
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	4613      	mov	r3, r2
 80033fe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 81dd 	beq.w	80037c6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003414:	b29b      	uxth	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	3302      	adds	r3, #2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	4413      	add	r3, r2
 800342a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003434:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	699a      	ldr	r2, [r3, #24]
 800343c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003440:	429a      	cmp	r2, r3
 8003442:	d907      	bls.n	8003454 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800344c:	1ad2      	subs	r2, r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	619a      	str	r2, [r3, #24]
 8003452:	e002      	b.n	800345a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f040 80b9 	bne.w	80035d6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	785b      	ldrb	r3, [r3, #1]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d126      	bne.n	80034ba <HAL_PCD_EP_DB_Transmit+0xc8>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800347a:	b29b      	uxth	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003480:	4413      	add	r3, r2
 8003482:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	011a      	lsls	r2, r3, #4
 800348a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800348c:	4413      	add	r3, r2
 800348e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003492:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	b29b      	uxth	r3, r3
 800349a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800349e:	b29a      	uxth	r2, r3
 80034a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a2:	801a      	strh	r2, [r3, #0]
 80034a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b6:	801a      	strh	r2, [r3, #0]
 80034b8:	e01a      	b.n	80034f0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	785b      	ldrb	r3, [r3, #1]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d116      	bne.n	80034f0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d6:	4413      	add	r3, r2
 80034d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	011a      	lsls	r2, r3, #4
 80034e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e2:	4413      	add	r3, r2
 80034e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80034e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80034ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ec:	2200      	movs	r2, #0
 80034ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	785b      	ldrb	r3, [r3, #1]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d126      	bne.n	800354c <HAL_PCD_EP_DB_Transmit+0x15a>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800350c:	b29b      	uxth	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	4413      	add	r3, r2
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	011a      	lsls	r2, r3, #4
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	b29b      	uxth	r3, r3
 800352c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003530:	b29a      	uxth	r2, r3
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	801a      	strh	r2, [r3, #0]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003544:	b29a      	uxth	r2, r3
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	801a      	strh	r2, [r3, #0]
 800354a:	e017      	b.n	800357c <HAL_PCD_EP_DB_Transmit+0x18a>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	785b      	ldrb	r3, [r3, #1]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d113      	bne.n	800357c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800355c:	b29b      	uxth	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003562:	4413      	add	r3, r2
 8003564:	627b      	str	r3, [r7, #36]	@ 0x24
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	011a      	lsls	r2, r3, #4
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	4413      	add	r3, r2
 8003570:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003574:	623b      	str	r3, [r7, #32]
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	2200      	movs	r2, #0
 800357a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	4619      	mov	r1, r3
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f006 fdc3 	bl	800a10e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 82fc 	beq.w	8003b8c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ae:	82fb      	strh	r3, [r7, #22]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	441a      	add	r2, r3
 80035be:	8afb      	ldrh	r3, [r7, #22]
 80035c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	8013      	strh	r3, [r2, #0]
 80035d4:	e2da      	b.n	8003b8c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d021      	beq.n	8003624 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	461a      	mov	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035fa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	441a      	add	r2, r3
 800360c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003610:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003614:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003618:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800361c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003620:	b29b      	uxth	r3, r3
 8003622:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800362a:	2b01      	cmp	r3, #1
 800362c:	f040 82ae 	bne.w	8003b8c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003638:	441a      	add	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	69da      	ldr	r2, [r3, #28]
 8003642:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003646:	441a      	add	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	6a1a      	ldr	r2, [r3, #32]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	429a      	cmp	r2, r3
 8003656:	d30b      	bcc.n	8003670 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	6a1a      	ldr	r2, [r3, #32]
 8003664:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003668:	1ad2      	subs	r2, r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	621a      	str	r2, [r3, #32]
 800366e:	e017      	b.n	80036a0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d108      	bne.n	800368a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003678:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800367c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003688:	e00a      	b.n	80036a0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2200      	movs	r2, #0
 800369e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	785b      	ldrb	r3, [r3, #1]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d165      	bne.n	8003774 <HAL_PCD_EP_DB_Transmit+0x382>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036bc:	4413      	add	r3, r2
 80036be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	011a      	lsls	r2, r3, #4
 80036c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c8:	4413      	add	r3, r2
 80036ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036da:	b29a      	uxth	r2, r3
 80036dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036de:	801a      	strh	r2, [r3, #0]
 80036e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10a      	bne.n	80036fe <HAL_PCD_EP_DB_Transmit+0x30c>
 80036e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fa:	801a      	strh	r2, [r3, #0]
 80036fc:	e057      	b.n	80037ae <HAL_PCD_EP_DB_Transmit+0x3bc>
 80036fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003702:	2b3e      	cmp	r3, #62	@ 0x3e
 8003704:	d818      	bhi.n	8003738 <HAL_PCD_EP_DB_Transmit+0x346>
 8003706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800370e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_PCD_EP_DB_Transmit+0x32e>
 800371a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800371c:	3301      	adds	r3, #1
 800371e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	b29a      	uxth	r2, r3
 8003726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003728:	b29b      	uxth	r3, r3
 800372a:	029b      	lsls	r3, r3, #10
 800372c:	b29b      	uxth	r3, r3
 800372e:	4313      	orrs	r3, r2
 8003730:	b29a      	uxth	r2, r3
 8003732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003734:	801a      	strh	r2, [r3, #0]
 8003736:	e03a      	b.n	80037ae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003738:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <HAL_PCD_EP_DB_Transmit+0x360>
 800374c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800374e:	3b01      	subs	r3, #1
 8003750:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	b29a      	uxth	r2, r3
 8003758:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800375a:	b29b      	uxth	r3, r3
 800375c:	029b      	lsls	r3, r3, #10
 800375e:	b29b      	uxth	r3, r3
 8003760:	4313      	orrs	r3, r2
 8003762:	b29b      	uxth	r3, r3
 8003764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800376c:	b29a      	uxth	r2, r3
 800376e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003770:	801a      	strh	r2, [r3, #0]
 8003772:	e01c      	b.n	80037ae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	785b      	ldrb	r3, [r3, #1]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d118      	bne.n	80037ae <HAL_PCD_EP_DB_Transmit+0x3bc>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	647b      	str	r3, [r7, #68]	@ 0x44
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800378a:	b29b      	uxth	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003790:	4413      	add	r3, r2
 8003792:	647b      	str	r3, [r7, #68]	@ 0x44
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	011a      	lsls	r2, r3, #4
 800379a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800379c:	4413      	add	r3, r2
 800379e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80037a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	6959      	ldr	r1, [r3, #20]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	891a      	ldrh	r2, [r3, #8]
 80037ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f004 fe2d 	bl	800841e <USB_WritePMA>
 80037c4:	e1e2      	b.n	8003b8c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	3306      	adds	r3, #6
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ee:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d307      	bcc.n	800380e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003806:	1ad2      	subs	r2, r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	619a      	str	r2, [r3, #24]
 800380c:	e002      	b.n	8003814 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2200      	movs	r2, #0
 8003812:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f040 80c0 	bne.w	800399e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	785b      	ldrb	r3, [r3, #1]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d126      	bne.n	8003874 <HAL_PCD_EP_DB_Transmit+0x482>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003834:	b29b      	uxth	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800383a:	4413      	add	r3, r2
 800383c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	011a      	lsls	r2, r3, #4
 8003844:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003846:	4413      	add	r3, r2
 8003848:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800384c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800384e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003858:	b29a      	uxth	r2, r3
 800385a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800386c:	b29a      	uxth	r2, r3
 800386e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003870:	801a      	strh	r2, [r3, #0]
 8003872:	e01a      	b.n	80038aa <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	785b      	ldrb	r3, [r3, #1]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d116      	bne.n	80038aa <HAL_PCD_EP_DB_Transmit+0x4b8>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	667b      	str	r3, [r7, #100]	@ 0x64
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800388a:	b29b      	uxth	r3, r3
 800388c:	461a      	mov	r2, r3
 800388e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003890:	4413      	add	r3, r2
 8003892:	667b      	str	r3, [r7, #100]	@ 0x64
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	011a      	lsls	r2, r3, #4
 800389a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800389c:	4413      	add	r3, r2
 800389e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80038a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038a6:	2200      	movs	r2, #0
 80038a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	785b      	ldrb	r3, [r3, #1]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d12b      	bne.n	8003910 <HAL_PCD_EP_DB_Transmit+0x51e>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038cc:	4413      	add	r3, r2
 80038ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	011a      	lsls	r2, r3, #4
 80038d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038d8:	4413      	add	r3, r2
 80038da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038f4:	801a      	strh	r2, [r3, #0]
 80038f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003906:	b29a      	uxth	r2, r3
 8003908:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800390c:	801a      	strh	r2, [r3, #0]
 800390e:	e017      	b.n	8003940 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	785b      	ldrb	r3, [r3, #1]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d113      	bne.n	8003940 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003920:	b29b      	uxth	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003926:	4413      	add	r3, r2
 8003928:	677b      	str	r3, [r7, #116]	@ 0x74
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	011a      	lsls	r2, r3, #4
 8003930:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003932:	4413      	add	r3, r2
 8003934:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003938:	673b      	str	r3, [r7, #112]	@ 0x70
 800393a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800393c:	2200      	movs	r2, #0
 800393e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	4619      	mov	r1, r3
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f006 fbe1 	bl	800a10e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003952:	2b00      	cmp	r3, #0
 8003954:	f040 811a 	bne.w	8003b8c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800396e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003972:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	441a      	add	r2, r3
 8003984:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8003988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800398c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003990:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003998:	b29b      	uxth	r3, r3
 800399a:	8013      	strh	r3, [r2, #0]
 800399c:	e0f6      	b.n	8003b8c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800399e:	88fb      	ldrh	r3, [r7, #6]
 80039a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d121      	bne.n	80039ec <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	441a      	add	r2, r3
 80039d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80039d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	f040 80ca 	bne.w	8003b8c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a00:	441a      	add	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a0e:	441a      	add	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	6a1a      	ldr	r2, [r3, #32]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d30b      	bcc.n	8003a38 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	6a1a      	ldr	r2, [r3, #32]
 8003a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a30:	1ad2      	subs	r2, r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	621a      	str	r2, [r3, #32]
 8003a36:	e017      	b.n	8003a68 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d108      	bne.n	8003a52 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003a40:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003a50:	e00a      	b.n	8003a68 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	785b      	ldrb	r3, [r3, #1]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d165      	bne.n	8003b42 <HAL_PCD_EP_DB_Transmit+0x750>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a8a:	4413      	add	r3, r2
 8003a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	011a      	lsls	r2, r3, #4
 8003a94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a96:	4413      	add	r3, r2
 8003a98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aac:	801a      	strh	r2, [r3, #0]
 8003aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10a      	bne.n	8003acc <HAL_PCD_EP_DB_Transmit+0x6da>
 8003ab6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ac8:	801a      	strh	r2, [r3, #0]
 8003aca:	e054      	b.n	8003b76 <HAL_PCD_EP_DB_Transmit+0x784>
 8003acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ad0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ad2:	d818      	bhi.n	8003b06 <HAL_PCD_EP_DB_Transmit+0x714>
 8003ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003ae8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003aea:	3301      	adds	r3, #1
 8003aec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003aee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	029b      	lsls	r3, r3, #10
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4313      	orrs	r3, r2
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b02:	801a      	strh	r2, [r3, #0]
 8003b04:	e037      	b.n	8003b76 <HAL_PCD_EP_DB_Transmit+0x784>
 8003b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003b1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	029b      	lsls	r3, r3, #10
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	e019      	b.n	8003b76 <HAL_PCD_EP_DB_Transmit+0x784>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	785b      	ldrb	r3, [r3, #1]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d115      	bne.n	8003b76 <HAL_PCD_EP_DB_Transmit+0x784>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b58:	4413      	add	r3, r2
 8003b5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	011a      	lsls	r2, r3, #4
 8003b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b64:	4413      	add	r3, r2
 8003b66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b74:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	6959      	ldr	r1, [r3, #20]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	895a      	ldrh	r2, [r3, #10]
 8003b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	f004 fc49 	bl	800841e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ba2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ba6:	82bb      	strh	r3, [r7, #20]
 8003ba8:	8abb      	ldrh	r3, [r7, #20]
 8003baa:	f083 0310 	eor.w	r3, r3, #16
 8003bae:	82bb      	strh	r3, [r7, #20]
 8003bb0:	8abb      	ldrh	r3, [r7, #20]
 8003bb2:	f083 0320 	eor.w	r3, r3, #32
 8003bb6:	82bb      	strh	r3, [r7, #20]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	441a      	add	r2, r3
 8003bc6:	8abb      	ldrh	r3, [r7, #20]
 8003bc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3790      	adds	r7, #144	@ 0x90
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b087      	sub	sp, #28
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	817b      	strh	r3, [r7, #10]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003bf8:	897b      	ldrh	r3, [r7, #10]
 8003bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00b      	beq.n	8003c1c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c04:	897b      	ldrh	r3, [r7, #10]
 8003c06:	f003 0207 	and.w	r2, r3, #7
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	3310      	adds	r3, #16
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	e009      	b.n	8003c30 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c1c:	897a      	ldrh	r2, [r7, #10]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c30:	893b      	ldrh	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	80da      	strh	r2, [r3, #6]
 8003c44:	e00b      	b.n	8003c5e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	0c1b      	lsrs	r3, r3, #16
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c7c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f001 b823 	b.w	8004cd8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 817d 	beq.w	8003fa2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ca8:	4bbc      	ldr	r3, [pc, #752]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 030c 	and.w	r3, r3, #12
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d00c      	beq.n	8003cce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cb4:	4bb9      	ldr	r3, [pc, #740]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 030c 	and.w	r3, r3, #12
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d15c      	bne.n	8003d7a <HAL_RCC_OscConfig+0x10e>
 8003cc0:	4bb6      	ldr	r3, [pc, #728]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ccc:	d155      	bne.n	8003d7a <HAL_RCC_OscConfig+0x10e>
 8003cce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cd2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003cda:	fa93 f3a3 	rbit	r3, r3
 8003cde:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ce2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce6:	fab3 f383 	clz	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d102      	bne.n	8003d00 <HAL_RCC_OscConfig+0x94>
 8003cfa:	4ba8      	ldr	r3, [pc, #672]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	e015      	b.n	8003d2c <HAL_RCC_OscConfig+0xc0>
 8003d00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d04:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003d0c:	fa93 f3a3 	rbit	r3, r3
 8003d10:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003d14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d18:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003d1c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003d20:	fa93 f3a3 	rbit	r3, r3
 8003d24:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003d28:	4b9c      	ldr	r3, [pc, #624]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d30:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003d34:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003d38:	fa92 f2a2 	rbit	r2, r2
 8003d3c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003d40:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003d44:	fab2 f282 	clz	r2, r2
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	f042 0220 	orr.w	r2, r2, #32
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	f002 021f 	and.w	r2, r2, #31
 8003d54:	2101      	movs	r1, #1
 8003d56:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 811f 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x334>
 8003d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f040 8116 	bne.w	8003fa0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f000 bfaf 	b.w	8004cd8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d8a:	d106      	bne.n	8003d9a <HAL_RCC_OscConfig+0x12e>
 8003d8c:	4b83      	ldr	r3, [pc, #524]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a82      	ldr	r2, [pc, #520]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003d92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	e036      	b.n	8003e08 <HAL_RCC_OscConfig+0x19c>
 8003d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x158>
 8003daa:	4b7c      	ldr	r3, [pc, #496]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a7b      	ldr	r2, [pc, #492]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4b79      	ldr	r3, [pc, #484]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a78      	ldr	r2, [pc, #480]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003dbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e021      	b.n	8003e08 <HAL_RCC_OscConfig+0x19c>
 8003dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x184>
 8003dd6:	4b71      	ldr	r3, [pc, #452]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a70      	ldr	r2, [pc, #448]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003ddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	4b6e      	ldr	r3, [pc, #440]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a6d      	ldr	r2, [pc, #436]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e00b      	b.n	8003e08 <HAL_RCC_OscConfig+0x19c>
 8003df0:	4b6a      	ldr	r3, [pc, #424]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a69      	ldr	r2, [pc, #420]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	4b67      	ldr	r3, [pc, #412]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a66      	ldr	r2, [pc, #408]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e06:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e08:	4b64      	ldr	r3, [pc, #400]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	f023 020f 	bic.w	r2, r3, #15
 8003e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	495f      	ldr	r1, [pc, #380]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d059      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e32:	f7fd f95b 	bl	80010ec <HAL_GetTick>
 8003e36:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fd f956 	bl	80010ec <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b64      	cmp	r3, #100	@ 0x64
 8003e4a:	d902      	bls.n	8003e52 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	f000 bf43 	b.w	8004cd8 <HAL_RCC_OscConfig+0x106c>
 8003e52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e56:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003e5e:	fa93 f3a3 	rbit	r3, r3
 8003e62:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003e66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d102      	bne.n	8003e84 <HAL_RCC_OscConfig+0x218>
 8003e7e:	4b47      	ldr	r3, [pc, #284]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	e015      	b.n	8003eb0 <HAL_RCC_OscConfig+0x244>
 8003e84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e88:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003e90:	fa93 f3a3 	rbit	r3, r3
 8003e94:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003e98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e9c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003ea0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003ea4:	fa93 f3a3 	rbit	r3, r3
 8003ea8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003eac:	4b3b      	ldr	r3, [pc, #236]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003eb4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003eb8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003ebc:	fa92 f2a2 	rbit	r2, r2
 8003ec0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003ec4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003ec8:	fab2 f282 	clz	r2, r2
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	f042 0220 	orr.w	r2, r2, #32
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	f002 021f 	and.w	r2, r2, #31
 8003ed8:	2101      	movs	r1, #1
 8003eda:	fa01 f202 	lsl.w	r2, r1, r2
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0ab      	beq.n	8003e3c <HAL_RCC_OscConfig+0x1d0>
 8003ee4:	e05d      	b.n	8003fa2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee6:	f7fd f901 	bl	80010ec <HAL_GetTick>
 8003eea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eee:	e00a      	b.n	8003f06 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7fd f8fc 	bl	80010ec <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b64      	cmp	r3, #100	@ 0x64
 8003efe:	d902      	bls.n	8003f06 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	f000 bee9 	b.w	8004cd8 <HAL_RCC_OscConfig+0x106c>
 8003f06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f0a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003f12:	fa93 f3a3 	rbit	r3, r3
 8003f16:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003f1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f1e:	fab3 f383 	clz	r3, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d102      	bne.n	8003f38 <HAL_RCC_OscConfig+0x2cc>
 8003f32:	4b1a      	ldr	r3, [pc, #104]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	e015      	b.n	8003f64 <HAL_RCC_OscConfig+0x2f8>
 8003f38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f3c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f40:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003f4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f50:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003f54:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f58:	fa93 f3a3 	rbit	r3, r3
 8003f5c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003f60:	4b0e      	ldr	r3, [pc, #56]	@ (8003f9c <HAL_RCC_OscConfig+0x330>)
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f68:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003f6c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003f70:	fa92 f2a2 	rbit	r2, r2
 8003f74:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003f78:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003f7c:	fab2 f282 	clz	r2, r2
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	f042 0220 	orr.w	r2, r2, #32
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	f002 021f 	and.w	r2, r2, #31
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1ab      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x284>
 8003f98:	e003      	b.n	8003fa2 <HAL_RCC_OscConfig+0x336>
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 817d 	beq.w	80042b2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003fb8:	4ba6      	ldr	r3, [pc, #664]	@ (8004254 <HAL_RCC_OscConfig+0x5e8>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00b      	beq.n	8003fdc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003fc4:	4ba3      	ldr	r3, [pc, #652]	@ (8004254 <HAL_RCC_OscConfig+0x5e8>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 030c 	and.w	r3, r3, #12
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d172      	bne.n	80040b6 <HAL_RCC_OscConfig+0x44a>
 8003fd0:	4ba0      	ldr	r3, [pc, #640]	@ (8004254 <HAL_RCC_OscConfig+0x5e8>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d16c      	bne.n	80040b6 <HAL_RCC_OscConfig+0x44a>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003fe6:	fa93 f3a3 	rbit	r3, r3
 8003fea:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003fee:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b01      	cmp	r3, #1
 8004004:	d102      	bne.n	800400c <HAL_RCC_OscConfig+0x3a0>
 8004006:	4b93      	ldr	r3, [pc, #588]	@ (8004254 <HAL_RCC_OscConfig+0x5e8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	e013      	b.n	8004034 <HAL_RCC_OscConfig+0x3c8>
 800400c:	2302      	movs	r3, #2
 800400e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800401e:	2302      	movs	r3, #2
 8004020:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004024:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004028:	fa93 f3a3 	rbit	r3, r3
 800402c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004030:	4b88      	ldr	r3, [pc, #544]	@ (8004254 <HAL_RCC_OscConfig+0x5e8>)
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	2202      	movs	r2, #2
 8004036:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800403a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800403e:	fa92 f2a2 	rbit	r2, r2
 8004042:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8004046:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800404a:	fab2 f282 	clz	r2, r2
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	f042 0220 	orr.w	r2, r2, #32
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	f002 021f 	and.w	r2, r2, #31
 800405a:	2101      	movs	r1, #1
 800405c:	fa01 f202 	lsl.w	r2, r1, r2
 8004060:	4013      	ands	r3, r2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCC_OscConfig+0x410>
 8004066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800406a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d002      	beq.n	800407c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	f000 be2e 	b.w	8004cd8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407c:	4b75      	ldr	r3, [pc, #468]	@ (8004254 <HAL_RCC_OscConfig+0x5e8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004088:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	21f8      	movs	r1, #248	@ 0xf8
 8004092:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800409a:	fa91 f1a1 	rbit	r1, r1
 800409e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80040a2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80040a6:	fab1 f181 	clz	r1, r1
 80040aa:	b2c9      	uxtb	r1, r1
 80040ac:	408b      	lsls	r3, r1
 80040ae:	4969      	ldr	r1, [pc, #420]	@ (8004254 <HAL_RCC_OscConfig+0x5e8>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b4:	e0fd      	b.n	80042b2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 8088 	beq.w	80041d8 <HAL_RCC_OscConfig+0x56c>
 80040c8:	2301      	movs	r3, #1
 80040ca:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80040da:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	461a      	mov	r2, r3
 80040f0:	2301      	movs	r3, #1
 80040f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7fc fffa 	bl	80010ec <HAL_GetTick>
 80040f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fc:	e00a      	b.n	8004114 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040fe:	f7fc fff5 	bl	80010ec <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d902      	bls.n	8004114 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	f000 bde2 	b.w	8004cd8 <HAL_RCC_OscConfig+0x106c>
 8004114:	2302      	movs	r3, #2
 8004116:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8004126:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d102      	bne.n	8004144 <HAL_RCC_OscConfig+0x4d8>
 800413e:	4b45      	ldr	r3, [pc, #276]	@ (8004254 <HAL_RCC_OscConfig+0x5e8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	e013      	b.n	800416c <HAL_RCC_OscConfig+0x500>
 8004144:	2302      	movs	r3, #2
 8004146:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800414e:	fa93 f3a3 	rbit	r3, r3
 8004152:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004156:	2302      	movs	r3, #2
 8004158:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800415c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004160:	fa93 f3a3 	rbit	r3, r3
 8004164:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004168:	4b3a      	ldr	r3, [pc, #232]	@ (8004254 <HAL_RCC_OscConfig+0x5e8>)
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	2202      	movs	r2, #2
 800416e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004172:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004176:	fa92 f2a2 	rbit	r2, r2
 800417a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800417e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004182:	fab2 f282 	clz	r2, r2
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	f042 0220 	orr.w	r2, r2, #32
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	f002 021f 	and.w	r2, r2, #31
 8004192:	2101      	movs	r1, #1
 8004194:	fa01 f202 	lsl.w	r2, r1, r2
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0af      	beq.n	80040fe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419e:	4b2d      	ldr	r3, [pc, #180]	@ (8004254 <HAL_RCC_OscConfig+0x5e8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	21f8      	movs	r1, #248	@ 0xf8
 80041b4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80041bc:	fa91 f1a1 	rbit	r1, r1
 80041c0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80041c4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80041c8:	fab1 f181 	clz	r1, r1
 80041cc:	b2c9      	uxtb	r1, r1
 80041ce:	408b      	lsls	r3, r1
 80041d0:	4920      	ldr	r1, [pc, #128]	@ (8004254 <HAL_RCC_OscConfig+0x5e8>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]
 80041d6:	e06c      	b.n	80042b2 <HAL_RCC_OscConfig+0x646>
 80041d8:	2301      	movs	r3, #1
 80041da:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041de:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80041e2:	fa93 f3a3 	rbit	r3, r3
 80041e6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80041ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ee:	fab3 f383 	clz	r3, r3
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80041f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	461a      	mov	r2, r3
 8004200:	2300      	movs	r3, #0
 8004202:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004204:	f7fc ff72 	bl	80010ec <HAL_GetTick>
 8004208:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420c:	e00a      	b.n	8004224 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800420e:	f7fc ff6d 	bl	80010ec <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d902      	bls.n	8004224 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	f000 bd5a 	b.w	8004cd8 <HAL_RCC_OscConfig+0x106c>
 8004224:	2302      	movs	r3, #2
 8004226:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004236:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423a:	fab3 f383 	clz	r3, r3
 800423e:	b2db      	uxtb	r3, r3
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b01      	cmp	r3, #1
 800424c:	d104      	bne.n	8004258 <HAL_RCC_OscConfig+0x5ec>
 800424e:	4b01      	ldr	r3, [pc, #4]	@ (8004254 <HAL_RCC_OscConfig+0x5e8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	e015      	b.n	8004280 <HAL_RCC_OscConfig+0x614>
 8004254:	40021000 	.word	0x40021000
 8004258:	2302      	movs	r3, #2
 800425a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004262:	fa93 f3a3 	rbit	r3, r3
 8004266:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800426a:	2302      	movs	r3, #2
 800426c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004270:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004274:	fa93 f3a3 	rbit	r3, r3
 8004278:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800427c:	4bc8      	ldr	r3, [pc, #800]	@ (80045a0 <HAL_RCC_OscConfig+0x934>)
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	2202      	movs	r2, #2
 8004282:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004286:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800428a:	fa92 f2a2 	rbit	r2, r2
 800428e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004292:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004296:	fab2 f282 	clz	r2, r2
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	f042 0220 	orr.w	r2, r2, #32
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	f002 021f 	and.w	r2, r2, #31
 80042a6:	2101      	movs	r1, #1
 80042a8:	fa01 f202 	lsl.w	r2, r1, r2
 80042ac:	4013      	ands	r3, r2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1ad      	bne.n	800420e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8110 	beq.w	80044e8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d079      	beq.n	80043cc <HAL_RCC_OscConfig+0x760>
 80042d8:	2301      	movs	r3, #1
 80042da:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80042ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	4bab      	ldr	r3, [pc, #684]	@ (80045a4 <HAL_RCC_OscConfig+0x938>)
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	461a      	mov	r2, r3
 80042fe:	2301      	movs	r3, #1
 8004300:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004302:	f7fc fef3 	bl	80010ec <HAL_GetTick>
 8004306:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800430a:	e00a      	b.n	8004322 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800430c:	f7fc feee 	bl	80010ec <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d902      	bls.n	8004322 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	f000 bcdb 	b.w	8004cd8 <HAL_RCC_OscConfig+0x106c>
 8004322:	2302      	movs	r3, #2
 8004324:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004328:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800432c:	fa93 f3a3 	rbit	r3, r3
 8004330:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004338:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800433c:	2202      	movs	r2, #2
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004344:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	fa93 f2a3 	rbit	r2, r3
 800434e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004352:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800435c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004360:	2202      	movs	r2, #2
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	fa93 f2a3 	rbit	r2, r3
 8004372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004376:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800437a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437c:	4b88      	ldr	r3, [pc, #544]	@ (80045a0 <HAL_RCC_OscConfig+0x934>)
 800437e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004384:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004388:	2102      	movs	r1, #2
 800438a:	6019      	str	r1, [r3, #0]
 800438c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004390:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	fa93 f1a3 	rbit	r1, r3
 800439a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800439e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80043a2:	6019      	str	r1, [r3, #0]
  return result;
 80043a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	fab3 f383 	clz	r3, r3
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	2101      	movs	r1, #1
 80043c0:	fa01 f303 	lsl.w	r3, r1, r3
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0a0      	beq.n	800430c <HAL_RCC_OscConfig+0x6a0>
 80043ca:	e08d      	b.n	80044e8 <HAL_RCC_OscConfig+0x87c>
 80043cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80043d4:	2201      	movs	r2, #1
 80043d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	fa93 f2a3 	rbit	r2, r3
 80043e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80043ee:	601a      	str	r2, [r3, #0]
  return result;
 80043f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043f4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80043f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	4b68      	ldr	r3, [pc, #416]	@ (80045a4 <HAL_RCC_OscConfig+0x938>)
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	461a      	mov	r2, r3
 800440a:	2300      	movs	r3, #0
 800440c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440e:	f7fc fe6d 	bl	80010ec <HAL_GetTick>
 8004412:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004416:	e00a      	b.n	800442e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004418:	f7fc fe68 	bl	80010ec <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d902      	bls.n	800442e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	f000 bc55 	b.w	8004cd8 <HAL_RCC_OscConfig+0x106c>
 800442e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004432:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004436:	2202      	movs	r2, #2
 8004438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800443e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	fa93 f2a3 	rbit	r2, r3
 8004448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800444c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004456:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800445a:	2202      	movs	r2, #2
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004462:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	fa93 f2a3 	rbit	r2, r3
 800446c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004470:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800447e:	2202      	movs	r2, #2
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004486:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	fa93 f2a3 	rbit	r2, r3
 8004490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004494:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004498:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800449a:	4b41      	ldr	r3, [pc, #260]	@ (80045a0 <HAL_RCC_OscConfig+0x934>)
 800449c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800449e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80044a6:	2102      	movs	r1, #2
 80044a8:	6019      	str	r1, [r3, #0]
 80044aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	fa93 f1a3 	rbit	r1, r3
 80044b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80044c0:	6019      	str	r1, [r3, #0]
  return result;
 80044c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	fab3 f383 	clz	r3, r3
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	2101      	movs	r1, #1
 80044de:	fa01 f303 	lsl.w	r3, r1, r3
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d197      	bne.n	8004418 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 81a1 	beq.w	8004840 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fe:	2300      	movs	r3, #0
 8004500:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004504:	4b26      	ldr	r3, [pc, #152]	@ (80045a0 <HAL_RCC_OscConfig+0x934>)
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d116      	bne.n	800453e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004510:	4b23      	ldr	r3, [pc, #140]	@ (80045a0 <HAL_RCC_OscConfig+0x934>)
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	4a22      	ldr	r2, [pc, #136]	@ (80045a0 <HAL_RCC_OscConfig+0x934>)
 8004516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800451a:	61d3      	str	r3, [r2, #28]
 800451c:	4b20      	ldr	r3, [pc, #128]	@ (80045a0 <HAL_RCC_OscConfig+0x934>)
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004528:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004532:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004536:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453e:	4b1a      	ldr	r3, [pc, #104]	@ (80045a8 <HAL_RCC_OscConfig+0x93c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d11a      	bne.n	8004580 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454a:	4b17      	ldr	r3, [pc, #92]	@ (80045a8 <HAL_RCC_OscConfig+0x93c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a16      	ldr	r2, [pc, #88]	@ (80045a8 <HAL_RCC_OscConfig+0x93c>)
 8004550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004554:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004556:	f7fc fdc9 	bl	80010ec <HAL_GetTick>
 800455a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455e:	e009      	b.n	8004574 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004560:	f7fc fdc4 	bl	80010ec <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b64      	cmp	r3, #100	@ 0x64
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e3b1      	b.n	8004cd8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	4b0c      	ldr	r3, [pc, #48]	@ (80045a8 <HAL_RCC_OscConfig+0x93c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ef      	beq.n	8004560 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004584:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d10d      	bne.n	80045ac <HAL_RCC_OscConfig+0x940>
 8004590:	4b03      	ldr	r3, [pc, #12]	@ (80045a0 <HAL_RCC_OscConfig+0x934>)
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	4a02      	ldr	r2, [pc, #8]	@ (80045a0 <HAL_RCC_OscConfig+0x934>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6213      	str	r3, [r2, #32]
 800459c:	e03c      	b.n	8004618 <HAL_RCC_OscConfig+0x9ac>
 800459e:	bf00      	nop
 80045a0:	40021000 	.word	0x40021000
 80045a4:	10908120 	.word	0x10908120
 80045a8:	40007000 	.word	0x40007000
 80045ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10c      	bne.n	80045d6 <HAL_RCC_OscConfig+0x96a>
 80045bc:	4bc1      	ldr	r3, [pc, #772]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4ac0      	ldr	r2, [pc, #768]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 80045c2:	f023 0301 	bic.w	r3, r3, #1
 80045c6:	6213      	str	r3, [r2, #32]
 80045c8:	4bbe      	ldr	r3, [pc, #760]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4abd      	ldr	r2, [pc, #756]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 80045ce:	f023 0304 	bic.w	r3, r3, #4
 80045d2:	6213      	str	r3, [r2, #32]
 80045d4:	e020      	b.n	8004618 <HAL_RCC_OscConfig+0x9ac>
 80045d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b05      	cmp	r3, #5
 80045e4:	d10c      	bne.n	8004600 <HAL_RCC_OscConfig+0x994>
 80045e6:	4bb7      	ldr	r3, [pc, #732]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	4ab6      	ldr	r2, [pc, #728]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 80045ec:	f043 0304 	orr.w	r3, r3, #4
 80045f0:	6213      	str	r3, [r2, #32]
 80045f2:	4bb4      	ldr	r3, [pc, #720]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	4ab3      	ldr	r2, [pc, #716]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	6213      	str	r3, [r2, #32]
 80045fe:	e00b      	b.n	8004618 <HAL_RCC_OscConfig+0x9ac>
 8004600:	4bb0      	ldr	r3, [pc, #704]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	4aaf      	ldr	r2, [pc, #700]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 8004606:	f023 0301 	bic.w	r3, r3, #1
 800460a:	6213      	str	r3, [r2, #32]
 800460c:	4bad      	ldr	r3, [pc, #692]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	4aac      	ldr	r2, [pc, #688]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 8004612:	f023 0304 	bic.w	r3, r3, #4
 8004616:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800461c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8081 	beq.w	800472c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462a:	f7fc fd5f 	bl	80010ec <HAL_GetTick>
 800462e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004632:	e00b      	b.n	800464c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004634:	f7fc fd5a 	bl	80010ec <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004644:	4293      	cmp	r3, r2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e345      	b.n	8004cd8 <HAL_RCC_OscConfig+0x106c>
 800464c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004650:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004654:	2202      	movs	r2, #2
 8004656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800465c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	fa93 f2a3 	rbit	r2, r3
 8004666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800466a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004674:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004678:	2202      	movs	r2, #2
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004680:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	fa93 f2a3 	rbit	r2, r3
 800468a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800468e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004692:	601a      	str	r2, [r3, #0]
  return result;
 8004694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004698:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800469c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469e:	fab3 f383 	clz	r3, r3
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	f043 0302 	orr.w	r3, r3, #2
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d102      	bne.n	80046b8 <HAL_RCC_OscConfig+0xa4c>
 80046b2:	4b84      	ldr	r3, [pc, #528]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	e013      	b.n	80046e0 <HAL_RCC_OscConfig+0xa74>
 80046b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046bc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80046c0:	2202      	movs	r2, #2
 80046c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	fa93 f2a3 	rbit	r2, r3
 80046d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	4b79      	ldr	r3, [pc, #484]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046e4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80046e8:	2102      	movs	r1, #2
 80046ea:	6011      	str	r1, [r2, #0]
 80046ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046f0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	fa92 f1a2 	rbit	r1, r2
 80046fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046fe:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004702:	6011      	str	r1, [r2, #0]
  return result;
 8004704:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004708:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800470c:	6812      	ldr	r2, [r2, #0]
 800470e:	fab2 f282 	clz	r2, r2
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	f002 021f 	and.w	r2, r2, #31
 800471e:	2101      	movs	r1, #1
 8004720:	fa01 f202 	lsl.w	r2, r1, r2
 8004724:	4013      	ands	r3, r2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d084      	beq.n	8004634 <HAL_RCC_OscConfig+0x9c8>
 800472a:	e07f      	b.n	800482c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472c:	f7fc fcde 	bl	80010ec <HAL_GetTick>
 8004730:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004734:	e00b      	b.n	800474e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004736:	f7fc fcd9 	bl	80010ec <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004746:	4293      	cmp	r3, r2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e2c4      	b.n	8004cd8 <HAL_RCC_OscConfig+0x106c>
 800474e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004752:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004756:	2202      	movs	r2, #2
 8004758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800475e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	fa93 f2a3 	rbit	r2, r3
 8004768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800476c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004776:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800477a:	2202      	movs	r2, #2
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004782:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	fa93 f2a3 	rbit	r2, r3
 800478c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004790:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004794:	601a      	str	r2, [r3, #0]
  return result;
 8004796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800479a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800479e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a0:	fab3 f383 	clz	r3, r3
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f043 0302 	orr.w	r3, r3, #2
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d102      	bne.n	80047ba <HAL_RCC_OscConfig+0xb4e>
 80047b4:	4b43      	ldr	r3, [pc, #268]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	e013      	b.n	80047e2 <HAL_RCC_OscConfig+0xb76>
 80047ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047be:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80047c2:	2202      	movs	r2, #2
 80047c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	fa93 f2a3 	rbit	r2, r3
 80047d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	4b39      	ldr	r3, [pc, #228]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047e6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80047ea:	2102      	movs	r1, #2
 80047ec:	6011      	str	r1, [r2, #0]
 80047ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047f2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	fa92 f1a2 	rbit	r1, r2
 80047fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004800:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004804:	6011      	str	r1, [r2, #0]
  return result;
 8004806:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800480a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	fab2 f282 	clz	r2, r2
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	f002 021f 	and.w	r2, r2, #31
 8004820:	2101      	movs	r1, #1
 8004822:	fa01 f202 	lsl.w	r2, r1, r2
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d184      	bne.n	8004736 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800482c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004830:	2b01      	cmp	r3, #1
 8004832:	d105      	bne.n	8004840 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004834:	4b23      	ldr	r3, [pc, #140]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	4a22      	ldr	r2, [pc, #136]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 800483a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800483e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004844:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8242 	beq.w	8004cd6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004852:	4b1c      	ldr	r3, [pc, #112]	@ (80048c4 <HAL_RCC_OscConfig+0xc58>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f003 030c 	and.w	r3, r3, #12
 800485a:	2b08      	cmp	r3, #8
 800485c:	f000 8213 	beq.w	8004c86 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004864:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	2b02      	cmp	r3, #2
 800486e:	f040 8162 	bne.w	8004b36 <HAL_RCC_OscConfig+0xeca>
 8004872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004876:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800487a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800487e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004884:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	fa93 f2a3 	rbit	r2, r3
 800488e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004892:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004896:	601a      	str	r2, [r3, #0]
  return result;
 8004898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800489c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80048a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a2:	fab3 f383 	clz	r3, r3
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80048ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	461a      	mov	r2, r3
 80048b4:	2300      	movs	r3, #0
 80048b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b8:	f7fc fc18 	bl	80010ec <HAL_GetTick>
 80048bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048c0:	e00c      	b.n	80048dc <HAL_RCC_OscConfig+0xc70>
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fc fc10 	bl	80010ec <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e1fd      	b.n	8004cd8 <HAL_RCC_OscConfig+0x106c>
 80048dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80048e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ee:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	fa93 f2a3 	rbit	r2, r3
 80048f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048fc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004900:	601a      	str	r2, [r3, #0]
  return result;
 8004902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004906:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800490a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800490c:	fab3 f383 	clz	r3, r3
 8004910:	b2db      	uxtb	r3, r3
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b01      	cmp	r3, #1
 800491e:	d102      	bne.n	8004926 <HAL_RCC_OscConfig+0xcba>
 8004920:	4bb0      	ldr	r3, [pc, #704]	@ (8004be4 <HAL_RCC_OscConfig+0xf78>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	e027      	b.n	8004976 <HAL_RCC_OscConfig+0xd0a>
 8004926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800492a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800492e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004938:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	fa93 f2a3 	rbit	r2, r3
 8004942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004946:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004950:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004954:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800495e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	fa93 f2a3 	rbit	r2, r3
 8004968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800496c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	4b9c      	ldr	r3, [pc, #624]	@ (8004be4 <HAL_RCC_OscConfig+0xf78>)
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800497a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800497e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004982:	6011      	str	r1, [r2, #0]
 8004984:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004988:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	fa92 f1a2 	rbit	r1, r2
 8004992:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004996:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800499a:	6011      	str	r1, [r2, #0]
  return result;
 800499c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80049a0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	fab2 f282 	clz	r2, r2
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	f042 0220 	orr.w	r2, r2, #32
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	f002 021f 	and.w	r2, r2, #31
 80049b6:	2101      	movs	r1, #1
 80049b8:	fa01 f202 	lsl.w	r2, r1, r2
 80049bc:	4013      	ands	r3, r2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d182      	bne.n	80048c8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049c2:	4b88      	ldr	r3, [pc, #544]	@ (8004be4 <HAL_RCC_OscConfig+0xf78>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80049ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80049d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	430b      	orrs	r3, r1
 80049e4:	497f      	ldr	r1, [pc, #508]	@ (8004be4 <HAL_RCC_OscConfig+0xf78>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	604b      	str	r3, [r1, #4]
 80049ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ee:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80049f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049fc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	fa93 f2a3 	rbit	r2, r3
 8004a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a0a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004a0e:	601a      	str	r2, [r3, #0]
  return result;
 8004a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a14:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004a18:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a1a:	fab3 f383 	clz	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004a24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a30:	f7fc fb5c 	bl	80010ec <HAL_GetTick>
 8004a34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a38:	e009      	b.n	8004a4e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a3a:	f7fc fb57 	bl	80010ec <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e144      	b.n	8004cd8 <HAL_RCC_OscConfig+0x106c>
 8004a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a52:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004a56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a60:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	fa93 f2a3 	rbit	r2, r3
 8004a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a6e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a72:	601a      	str	r2, [r3, #0]
  return result;
 8004a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a78:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a7e:	fab3 f383 	clz	r3, r3
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	095b      	lsrs	r3, r3, #5
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d102      	bne.n	8004a98 <HAL_RCC_OscConfig+0xe2c>
 8004a92:	4b54      	ldr	r3, [pc, #336]	@ (8004be4 <HAL_RCC_OscConfig+0xf78>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	e027      	b.n	8004ae8 <HAL_RCC_OscConfig+0xe7c>
 8004a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a9c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004aa0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aaa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	fa93 f2a3 	rbit	r2, r3
 8004ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ac2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004ac6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ad0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	fa93 f2a3 	rbit	r2, r3
 8004ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ade:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8004be4 <HAL_RCC_OscConfig+0xf78>)
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004aec:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004af0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004af4:	6011      	str	r1, [r2, #0]
 8004af6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004afa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	fa92 f1a2 	rbit	r1, r2
 8004b04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b08:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004b0c:	6011      	str	r1, [r2, #0]
  return result;
 8004b0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b12:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	fab2 f282 	clz	r2, r2
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	f042 0220 	orr.w	r2, r2, #32
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	f002 021f 	and.w	r2, r2, #31
 8004b28:	2101      	movs	r1, #1
 8004b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d082      	beq.n	8004a3a <HAL_RCC_OscConfig+0xdce>
 8004b34:	e0cf      	b.n	8004cd6 <HAL_RCC_OscConfig+0x106a>
 8004b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b3a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004b3e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b48:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	fa93 f2a3 	rbit	r2, r3
 8004b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b56:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004b5a:	601a      	str	r2, [r3, #0]
  return result;
 8004b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b60:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004b64:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b66:	fab3 f383 	clz	r3, r3
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004b70:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	461a      	mov	r2, r3
 8004b78:	2300      	movs	r3, #0
 8004b7a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7c:	f7fc fab6 	bl	80010ec <HAL_GetTick>
 8004b80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b84:	e009      	b.n	8004b9a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b86:	f7fc fab1 	bl	80010ec <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e09e      	b.n	8004cd8 <HAL_RCC_OscConfig+0x106c>
 8004b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b9e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004ba2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bac:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	fa93 f2a3 	rbit	r2, r3
 8004bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bba:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004bbe:	601a      	str	r2, [r3, #0]
  return result;
 8004bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004bc8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bca:	fab3 f383 	clz	r3, r3
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d104      	bne.n	8004be8 <HAL_RCC_OscConfig+0xf7c>
 8004bde:	4b01      	ldr	r3, [pc, #4]	@ (8004be4 <HAL_RCC_OscConfig+0xf78>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	e029      	b.n	8004c38 <HAL_RCC_OscConfig+0xfcc>
 8004be4:	40021000 	.word	0x40021000
 8004be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bec:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004bf0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bfa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	fa93 f2a3 	rbit	r2, r3
 8004c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c08:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c12:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004c16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c20:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	fa93 f2a3 	rbit	r2, r3
 8004c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c2e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce4 <HAL_RCC_OscConfig+0x1078>)
 8004c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c3c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004c40:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004c44:	6011      	str	r1, [r2, #0]
 8004c46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c4a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	fa92 f1a2 	rbit	r1, r2
 8004c54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c58:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004c5c:	6011      	str	r1, [r2, #0]
  return result;
 8004c5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c62:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	fab2 f282 	clz	r2, r2
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	f042 0220 	orr.w	r2, r2, #32
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	f002 021f 	and.w	r2, r2, #31
 8004c78:	2101      	movs	r1, #1
 8004c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d180      	bne.n	8004b86 <HAL_RCC_OscConfig+0xf1a>
 8004c84:	e027      	b.n	8004cd6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e01e      	b.n	8004cd8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c9a:	4b12      	ldr	r3, [pc, #72]	@ (8004ce4 <HAL_RCC_OscConfig+0x1078>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ca2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004ca6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d10b      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004cba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004cbe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d001      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40021000 	.word	0x40021000

08004ce8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b09e      	sub	sp, #120	@ 0x78
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e162      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d00:	4b90      	ldr	r3, [pc, #576]	@ (8004f44 <HAL_RCC_ClockConfig+0x25c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d910      	bls.n	8004d30 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0e:	4b8d      	ldr	r3, [pc, #564]	@ (8004f44 <HAL_RCC_ClockConfig+0x25c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f023 0207 	bic.w	r2, r3, #7
 8004d16:	498b      	ldr	r1, [pc, #556]	@ (8004f44 <HAL_RCC_ClockConfig+0x25c>)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1e:	4b89      	ldr	r3, [pc, #548]	@ (8004f44 <HAL_RCC_ClockConfig+0x25c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d001      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e14a      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d008      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d3c:	4b82      	ldr	r3, [pc, #520]	@ (8004f48 <HAL_RCC_ClockConfig+0x260>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	497f      	ldr	r1, [pc, #508]	@ (8004f48 <HAL_RCC_ClockConfig+0x260>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80dc 	beq.w	8004f14 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d13c      	bne.n	8004dde <HAL_RCC_ClockConfig+0xf6>
 8004d64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d68:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d6c:	fa93 f3a3 	rbit	r3, r3
 8004d70:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004d72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d74:	fab3 f383 	clz	r3, r3
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d102      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xa6>
 8004d88:	4b6f      	ldr	r3, [pc, #444]	@ (8004f48 <HAL_RCC_ClockConfig+0x260>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	e00f      	b.n	8004dae <HAL_RCC_ClockConfig+0xc6>
 8004d8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d92:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d96:	fa93 f3a3 	rbit	r3, r3
 8004d9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004da0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004da2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004da4:	fa93 f3a3 	rbit	r3, r3
 8004da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004daa:	4b67      	ldr	r3, [pc, #412]	@ (8004f48 <HAL_RCC_ClockConfig+0x260>)
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004db2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004db4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004db6:	fa92 f2a2 	rbit	r2, r2
 8004dba:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004dbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004dbe:	fab2 f282 	clz	r2, r2
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	f042 0220 	orr.w	r2, r2, #32
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	f002 021f 	and.w	r2, r2, #31
 8004dce:	2101      	movs	r1, #1
 8004dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d17b      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e0f3      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d13c      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x178>
 8004de6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dee:	fa93 f3a3 	rbit	r3, r3
 8004df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df6:	fab3 f383 	clz	r3, r3
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d102      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x128>
 8004e0a:	4b4f      	ldr	r3, [pc, #316]	@ (8004f48 <HAL_RCC_ClockConfig+0x260>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	e00f      	b.n	8004e30 <HAL_RCC_ClockConfig+0x148>
 8004e10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e18:	fa93 f3a3 	rbit	r3, r3
 8004e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e22:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e26:	fa93 f3a3 	rbit	r3, r3
 8004e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e2c:	4b46      	ldr	r3, [pc, #280]	@ (8004f48 <HAL_RCC_ClockConfig+0x260>)
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e34:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004e36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e38:	fa92 f2a2 	rbit	r2, r2
 8004e3c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004e3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e40:	fab2 f282 	clz	r2, r2
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	f042 0220 	orr.w	r2, r2, #32
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	f002 021f 	and.w	r2, r2, #31
 8004e50:	2101      	movs	r1, #1
 8004e52:	fa01 f202 	lsl.w	r2, r1, r2
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d13a      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0b2      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x2de>
 8004e60:	2302      	movs	r3, #2
 8004e62:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e66:	fa93 f3a3 	rbit	r3, r3
 8004e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6e:	fab3 f383 	clz	r3, r3
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	095b      	lsrs	r3, r3, #5
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d102      	bne.n	8004e88 <HAL_RCC_ClockConfig+0x1a0>
 8004e82:	4b31      	ldr	r3, [pc, #196]	@ (8004f48 <HAL_RCC_ClockConfig+0x260>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	e00d      	b.n	8004ea4 <HAL_RCC_ClockConfig+0x1bc>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8e:	fa93 f3a3 	rbit	r3, r3
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e94:	2302      	movs	r3, #2
 8004e96:	623b      	str	r3, [r7, #32]
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	fa93 f3a3 	rbit	r3, r3
 8004e9e:	61fb      	str	r3, [r7, #28]
 8004ea0:	4b29      	ldr	r3, [pc, #164]	@ (8004f48 <HAL_RCC_ClockConfig+0x260>)
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	61ba      	str	r2, [r7, #24]
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	fa92 f2a2 	rbit	r2, r2
 8004eae:	617a      	str	r2, [r7, #20]
  return result;
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	fab2 f282 	clz	r2, r2
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	f042 0220 	orr.w	r2, r2, #32
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	f002 021f 	and.w	r2, r2, #31
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec8:	4013      	ands	r3, r2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e079      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f48 <HAL_RCC_ClockConfig+0x260>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f023 0203 	bic.w	r2, r3, #3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	491a      	ldr	r1, [pc, #104]	@ (8004f48 <HAL_RCC_ClockConfig+0x260>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ee4:	f7fc f902 	bl	80010ec <HAL_GetTick>
 8004ee8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eea:	e00a      	b.n	8004f02 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eec:	f7fc f8fe 	bl	80010ec <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e061      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f02:	4b11      	ldr	r3, [pc, #68]	@ (8004f48 <HAL_RCC_ClockConfig+0x260>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f003 020c 	and.w	r2, r3, #12
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d1eb      	bne.n	8004eec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f14:	4b0b      	ldr	r3, [pc, #44]	@ (8004f44 <HAL_RCC_ClockConfig+0x25c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d214      	bcs.n	8004f4c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f22:	4b08      	ldr	r3, [pc, #32]	@ (8004f44 <HAL_RCC_ClockConfig+0x25c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f023 0207 	bic.w	r2, r3, #7
 8004f2a:	4906      	ldr	r1, [pc, #24]	@ (8004f44 <HAL_RCC_ClockConfig+0x25c>)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f32:	4b04      	ldr	r3, [pc, #16]	@ (8004f44 <HAL_RCC_ClockConfig+0x25c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d005      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e040      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x2de>
 8004f44:	40022000 	.word	0x40022000
 8004f48:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f58:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd0 <HAL_RCC_ClockConfig+0x2e8>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	491a      	ldr	r1, [pc, #104]	@ (8004fd0 <HAL_RCC_ClockConfig+0x2e8>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f76:	4b16      	ldr	r3, [pc, #88]	@ (8004fd0 <HAL_RCC_ClockConfig+0x2e8>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	4912      	ldr	r1, [pc, #72]	@ (8004fd0 <HAL_RCC_ClockConfig+0x2e8>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f8a:	f000 f829 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 8004f8e:	4601      	mov	r1, r0
 8004f90:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd0 <HAL_RCC_ClockConfig+0x2e8>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f98:	22f0      	movs	r2, #240	@ 0xf0
 8004f9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	fa92 f2a2 	rbit	r2, r2
 8004fa2:	60fa      	str	r2, [r7, #12]
  return result;
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	fab2 f282 	clz	r2, r2
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	40d3      	lsrs	r3, r2
 8004fae:	4a09      	ldr	r2, [pc, #36]	@ (8004fd4 <HAL_RCC_ClockConfig+0x2ec>)
 8004fb0:	5cd3      	ldrb	r3, [r2, r3]
 8004fb2:	fa21 f303 	lsr.w	r3, r1, r3
 8004fb6:	4a08      	ldr	r2, [pc, #32]	@ (8004fd8 <HAL_RCC_ClockConfig+0x2f0>)
 8004fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004fba:	4b08      	ldr	r3, [pc, #32]	@ (8004fdc <HAL_RCC_ClockConfig+0x2f4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fc f850 	bl	8001064 <HAL_InitTick>
  
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3778      	adds	r7, #120	@ 0x78
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	0800af84 	.word	0x0800af84
 8004fd8:	20000000 	.word	0x20000000
 8004fdc:	20000004 	.word	0x20000004

08004fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	2300      	movs	r3, #0
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b04      	cmp	r3, #4
 8005008:	d002      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0x30>
 800500a:	2b08      	cmp	r3, #8
 800500c:	d003      	beq.n	8005016 <HAL_RCC_GetSysClockFreq+0x36>
 800500e:	e026      	b.n	800505e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005010:	4b19      	ldr	r3, [pc, #100]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x98>)
 8005012:	613b      	str	r3, [r7, #16]
      break;
 8005014:	e026      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	0c9b      	lsrs	r3, r3, #18
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	4a17      	ldr	r2, [pc, #92]	@ (800507c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005020:	5cd3      	ldrb	r3, [r2, r3]
 8005022:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005024:	4b13      	ldr	r3, [pc, #76]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x94>)
 8005026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	4a14      	ldr	r2, [pc, #80]	@ (8005080 <HAL_RCC_GetSysClockFreq+0xa0>)
 800502e:	5cd3      	ldrb	r3, [r2, r3]
 8005030:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d008      	beq.n	800504e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800503c:	4a0e      	ldr	r2, [pc, #56]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x98>)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	fbb2 f2f3 	udiv	r2, r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	fb02 f303 	mul.w	r3, r2, r3
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e004      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a0c      	ldr	r2, [pc, #48]	@ (8005084 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005052:	fb02 f303 	mul.w	r3, r2, r3
 8005056:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	613b      	str	r3, [r7, #16]
      break;
 800505c:	e002      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800505e:	4b06      	ldr	r3, [pc, #24]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x98>)
 8005060:	613b      	str	r3, [r7, #16]
      break;
 8005062:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005064:	693b      	ldr	r3, [r7, #16]
}
 8005066:	4618      	mov	r0, r3
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40021000 	.word	0x40021000
 8005078:	007a1200 	.word	0x007a1200
 800507c:	0800af9c 	.word	0x0800af9c
 8005080:	0800afac 	.word	0x0800afac
 8005084:	003d0900 	.word	0x003d0900

08005088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800508c:	4b03      	ldr	r3, [pc, #12]	@ (800509c <HAL_RCC_GetHCLKFreq+0x14>)
 800508e:	681b      	ldr	r3, [r3, #0]
}
 8005090:	4618      	mov	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	20000000 	.word	0x20000000

080050a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80050a6:	f7ff ffef 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 80050aa:	4601      	mov	r1, r0
 80050ac:	4b0b      	ldr	r3, [pc, #44]	@ (80050dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050b4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80050b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	fa92 f2a2 	rbit	r2, r2
 80050c0:	603a      	str	r2, [r7, #0]
  return result;
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	fab2 f282 	clz	r2, r2
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	40d3      	lsrs	r3, r2
 80050cc:	4a04      	ldr	r2, [pc, #16]	@ (80050e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80050ce:	5cd3      	ldrb	r3, [r2, r3]
 80050d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40021000 	.word	0x40021000
 80050e0:	0800af94 	.word	0x0800af94

080050e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80050ea:	f7ff ffcd 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 80050ee:	4601      	mov	r1, r0
 80050f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005120 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80050f8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80050fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	fa92 f2a2 	rbit	r2, r2
 8005104:	603a      	str	r2, [r7, #0]
  return result;
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	fab2 f282 	clz	r2, r2
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	40d3      	lsrs	r3, r2
 8005110:	4a04      	ldr	r2, [pc, #16]	@ (8005124 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005112:	5cd3      	ldrb	r3, [r2, r3]
 8005114:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40021000 	.word	0x40021000
 8005124:	0800af94 	.word	0x0800af94

08005128 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b092      	sub	sp, #72	@ 0x48
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005138:	2300      	movs	r3, #0
 800513a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 80d4 	beq.w	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800514c:	4b4e      	ldr	r3, [pc, #312]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10e      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005158:	4b4b      	ldr	r3, [pc, #300]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	4a4a      	ldr	r2, [pc, #296]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800515e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005162:	61d3      	str	r3, [r2, #28]
 8005164:	4b48      	ldr	r3, [pc, #288]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800516c:	60bb      	str	r3, [r7, #8]
 800516e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005170:	2301      	movs	r3, #1
 8005172:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005176:	4b45      	ldr	r3, [pc, #276]	@ (800528c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d118      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005182:	4b42      	ldr	r3, [pc, #264]	@ (800528c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a41      	ldr	r2, [pc, #260]	@ (800528c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800518c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800518e:	f7fb ffad 	bl	80010ec <HAL_GetTick>
 8005192:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005194:	e008      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005196:	f7fb ffa9 	bl	80010ec <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b64      	cmp	r3, #100	@ 0x64
 80051a2:	d901      	bls.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e169      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a8:	4b38      	ldr	r3, [pc, #224]	@ (800528c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0f0      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051b4:	4b34      	ldr	r3, [pc, #208]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8084 	beq.w	80052ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d07c      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051d4:	4b2c      	ldr	r3, [pc, #176]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80051e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e6:	fa93 f3a3 	rbit	r3, r3
 80051ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80051ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051ee:	fab3 f383 	clz	r3, r3
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	4b26      	ldr	r3, [pc, #152]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	461a      	mov	r2, r3
 80051fe:	2301      	movs	r3, #1
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005206:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520a:	fa93 f3a3 	rbit	r3, r3
 800520e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005212:	fab3 f383 	clz	r3, r3
 8005216:	b2db      	uxtb	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	4b1d      	ldr	r3, [pc, #116]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	461a      	mov	r2, r3
 8005222:	2300      	movs	r3, #0
 8005224:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005226:	4a18      	ldr	r2, [pc, #96]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800522a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800522c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d04b      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005236:	f7fb ff59 	bl	80010ec <HAL_GetTick>
 800523a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800523c:	e00a      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523e:	f7fb ff55 	bl	80010ec <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800524c:	4293      	cmp	r3, r2
 800524e:	d901      	bls.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e113      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005254:	2302      	movs	r3, #2
 8005256:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525a:	fa93 f3a3 	rbit	r3, r3
 800525e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005260:	2302      	movs	r3, #2
 8005262:	623b      	str	r3, [r7, #32]
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	fa93 f3a3 	rbit	r3, r3
 800526a:	61fb      	str	r3, [r7, #28]
  return result;
 800526c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526e:	fab3 f383 	clz	r3, r3
 8005272:	b2db      	uxtb	r3, r3
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	b2db      	uxtb	r3, r3
 8005278:	f043 0302 	orr.w	r3, r3, #2
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d108      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005282:	4b01      	ldr	r3, [pc, #4]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	e00d      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005288:	40021000 	.word	0x40021000
 800528c:	40007000 	.word	0x40007000
 8005290:	10908100 	.word	0x10908100
 8005294:	2302      	movs	r3, #2
 8005296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	fa93 f3a3 	rbit	r3, r3
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	4b78      	ldr	r3, [pc, #480]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	2202      	movs	r2, #2
 80052a6:	613a      	str	r2, [r7, #16]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	fa92 f2a2 	rbit	r2, r2
 80052ae:	60fa      	str	r2, [r7, #12]
  return result;
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	fab2 f282 	clz	r2, r2
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	f002 021f 	and.w	r2, r2, #31
 80052c2:	2101      	movs	r1, #1
 80052c4:	fa01 f202 	lsl.w	r2, r1, r2
 80052c8:	4013      	ands	r3, r2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0b7      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80052ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	496a      	ldr	r1, [pc, #424]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d105      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e8:	4b66      	ldr	r3, [pc, #408]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	4a65      	ldr	r2, [pc, #404]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d008      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005300:	4b60      	ldr	r3, [pc, #384]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005304:	f023 0203 	bic.w	r2, r3, #3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	495d      	ldr	r1, [pc, #372]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800530e:	4313      	orrs	r3, r2
 8005310:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d008      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800531e:	4b59      	ldr	r3, [pc, #356]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005322:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	4956      	ldr	r1, [pc, #344]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800532c:	4313      	orrs	r3, r2
 800532e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800533c:	4b51      	ldr	r3, [pc, #324]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800533e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005340:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	494e      	ldr	r1, [pc, #312]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800534a:	4313      	orrs	r3, r2
 800534c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b00      	cmp	r3, #0
 8005358:	d008      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800535a:	4b4a      	ldr	r3, [pc, #296]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535e:	f023 0210 	bic.w	r2, r3, #16
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	4947      	ldr	r1, [pc, #284]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005368:	4313      	orrs	r3, r2
 800536a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005378:	4b42      	ldr	r3, [pc, #264]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005384:	493f      	ldr	r1, [pc, #252]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005386:	4313      	orrs	r3, r2
 8005388:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005396:	4b3b      	ldr	r3, [pc, #236]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539a:	f023 0220 	bic.w	r2, r3, #32
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	4938      	ldr	r1, [pc, #224]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d008      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053b4:	4b33      	ldr	r3, [pc, #204]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	4930      	ldr	r1, [pc, #192]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0310 	and.w	r3, r3, #16
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	4929      	ldr	r1, [pc, #164]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053f0:	4b24      	ldr	r3, [pc, #144]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	4921      	ldr	r1, [pc, #132]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800540e:	4b1d      	ldr	r3, [pc, #116]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005412:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541a:	491a      	ldr	r1, [pc, #104]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800541c:	4313      	orrs	r3, r2
 800541e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800542c:	4b15      	ldr	r3, [pc, #84]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800542e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005430:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005438:	4912      	ldr	r1, [pc, #72]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800543a:	4313      	orrs	r3, r2
 800543c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d008      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800544a:	4b0e      	ldr	r3, [pc, #56]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005456:	490b      	ldr	r1, [pc, #44]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005458:	4313      	orrs	r3, r2
 800545a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005468:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800546a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005474:	4903      	ldr	r1, [pc, #12]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005476:	4313      	orrs	r3, r2
 8005478:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3748      	adds	r7, #72	@ 0x48
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40021000 	.word	0x40021000

08005488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e09d      	b.n	80055d6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d108      	bne.n	80054b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054aa:	d009      	beq.n	80054c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	61da      	str	r2, [r3, #28]
 80054b2:	e005      	b.n	80054c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fb fc7c 	bl	8000dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005500:	d902      	bls.n	8005508 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e002      	b.n	800550e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005508:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800550c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005516:	d007      	beq.n	8005528 <HAL_SPI_Init+0xa0>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005520:	d002      	beq.n	8005528 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556a:	ea42 0103 	orr.w	r1, r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005572:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	0c1b      	lsrs	r3, r3, #16
 8005584:	f003 0204 	and.w	r2, r3, #4
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558c:	f003 0310 	and.w	r3, r3, #16
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80055a4:	ea42 0103 	orr.w	r1, r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69da      	ldr	r2, [r3, #28]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e040      	b.n	8005672 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7fb fc2b 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2224      	movs	r2, #36	@ 0x24
 800560a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0201 	bic.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f9fd 	bl	8005a24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f826 	bl	800567c <UART_SetConfig>
 8005630:	4603      	mov	r3, r0
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e01b      	b.n	8005672 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005648:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005658:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fa7c 	bl	8005b68 <UART_CheckIdleState>
 8005670:	4603      	mov	r3, r0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80056aa:	f023 030c 	bic.w	r3, r3, #12
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	6979      	ldr	r1, [r7, #20]
 80056b4:	430b      	orrs	r3, r1
 80056b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4aa7      	ldr	r2, [pc, #668]	@ (8005994 <UART_SetConfig+0x318>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d120      	bne.n	800573e <UART_SetConfig+0xc2>
 80056fc:	4ba6      	ldr	r3, [pc, #664]	@ (8005998 <UART_SetConfig+0x31c>)
 80056fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	2b03      	cmp	r3, #3
 8005706:	d817      	bhi.n	8005738 <UART_SetConfig+0xbc>
 8005708:	a201      	add	r2, pc, #4	@ (adr r2, 8005710 <UART_SetConfig+0x94>)
 800570a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570e:	bf00      	nop
 8005710:	08005721 	.word	0x08005721
 8005714:	0800572d 	.word	0x0800572d
 8005718:	08005733 	.word	0x08005733
 800571c:	08005727 	.word	0x08005727
 8005720:	2301      	movs	r3, #1
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e0b5      	b.n	8005892 <UART_SetConfig+0x216>
 8005726:	2302      	movs	r3, #2
 8005728:	77fb      	strb	r3, [r7, #31]
 800572a:	e0b2      	b.n	8005892 <UART_SetConfig+0x216>
 800572c:	2304      	movs	r3, #4
 800572e:	77fb      	strb	r3, [r7, #31]
 8005730:	e0af      	b.n	8005892 <UART_SetConfig+0x216>
 8005732:	2308      	movs	r3, #8
 8005734:	77fb      	strb	r3, [r7, #31]
 8005736:	e0ac      	b.n	8005892 <UART_SetConfig+0x216>
 8005738:	2310      	movs	r3, #16
 800573a:	77fb      	strb	r3, [r7, #31]
 800573c:	e0a9      	b.n	8005892 <UART_SetConfig+0x216>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a96      	ldr	r2, [pc, #600]	@ (800599c <UART_SetConfig+0x320>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d124      	bne.n	8005792 <UART_SetConfig+0x116>
 8005748:	4b93      	ldr	r3, [pc, #588]	@ (8005998 <UART_SetConfig+0x31c>)
 800574a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005750:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005754:	d011      	beq.n	800577a <UART_SetConfig+0xfe>
 8005756:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800575a:	d817      	bhi.n	800578c <UART_SetConfig+0x110>
 800575c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005760:	d011      	beq.n	8005786 <UART_SetConfig+0x10a>
 8005762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005766:	d811      	bhi.n	800578c <UART_SetConfig+0x110>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <UART_SetConfig+0xf8>
 800576c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005770:	d006      	beq.n	8005780 <UART_SetConfig+0x104>
 8005772:	e00b      	b.n	800578c <UART_SetConfig+0x110>
 8005774:	2300      	movs	r3, #0
 8005776:	77fb      	strb	r3, [r7, #31]
 8005778:	e08b      	b.n	8005892 <UART_SetConfig+0x216>
 800577a:	2302      	movs	r3, #2
 800577c:	77fb      	strb	r3, [r7, #31]
 800577e:	e088      	b.n	8005892 <UART_SetConfig+0x216>
 8005780:	2304      	movs	r3, #4
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	e085      	b.n	8005892 <UART_SetConfig+0x216>
 8005786:	2308      	movs	r3, #8
 8005788:	77fb      	strb	r3, [r7, #31]
 800578a:	e082      	b.n	8005892 <UART_SetConfig+0x216>
 800578c:	2310      	movs	r3, #16
 800578e:	77fb      	strb	r3, [r7, #31]
 8005790:	e07f      	b.n	8005892 <UART_SetConfig+0x216>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a82      	ldr	r2, [pc, #520]	@ (80059a0 <UART_SetConfig+0x324>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d124      	bne.n	80057e6 <UART_SetConfig+0x16a>
 800579c:	4b7e      	ldr	r3, [pc, #504]	@ (8005998 <UART_SetConfig+0x31c>)
 800579e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80057a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80057a8:	d011      	beq.n	80057ce <UART_SetConfig+0x152>
 80057aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80057ae:	d817      	bhi.n	80057e0 <UART_SetConfig+0x164>
 80057b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80057b4:	d011      	beq.n	80057da <UART_SetConfig+0x15e>
 80057b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80057ba:	d811      	bhi.n	80057e0 <UART_SetConfig+0x164>
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <UART_SetConfig+0x14c>
 80057c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057c4:	d006      	beq.n	80057d4 <UART_SetConfig+0x158>
 80057c6:	e00b      	b.n	80057e0 <UART_SetConfig+0x164>
 80057c8:	2300      	movs	r3, #0
 80057ca:	77fb      	strb	r3, [r7, #31]
 80057cc:	e061      	b.n	8005892 <UART_SetConfig+0x216>
 80057ce:	2302      	movs	r3, #2
 80057d0:	77fb      	strb	r3, [r7, #31]
 80057d2:	e05e      	b.n	8005892 <UART_SetConfig+0x216>
 80057d4:	2304      	movs	r3, #4
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e05b      	b.n	8005892 <UART_SetConfig+0x216>
 80057da:	2308      	movs	r3, #8
 80057dc:	77fb      	strb	r3, [r7, #31]
 80057de:	e058      	b.n	8005892 <UART_SetConfig+0x216>
 80057e0:	2310      	movs	r3, #16
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	e055      	b.n	8005892 <UART_SetConfig+0x216>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a6e      	ldr	r2, [pc, #440]	@ (80059a4 <UART_SetConfig+0x328>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d124      	bne.n	800583a <UART_SetConfig+0x1be>
 80057f0:	4b69      	ldr	r3, [pc, #420]	@ (8005998 <UART_SetConfig+0x31c>)
 80057f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80057f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057fc:	d011      	beq.n	8005822 <UART_SetConfig+0x1a6>
 80057fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005802:	d817      	bhi.n	8005834 <UART_SetConfig+0x1b8>
 8005804:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005808:	d011      	beq.n	800582e <UART_SetConfig+0x1b2>
 800580a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800580e:	d811      	bhi.n	8005834 <UART_SetConfig+0x1b8>
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <UART_SetConfig+0x1a0>
 8005814:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005818:	d006      	beq.n	8005828 <UART_SetConfig+0x1ac>
 800581a:	e00b      	b.n	8005834 <UART_SetConfig+0x1b8>
 800581c:	2300      	movs	r3, #0
 800581e:	77fb      	strb	r3, [r7, #31]
 8005820:	e037      	b.n	8005892 <UART_SetConfig+0x216>
 8005822:	2302      	movs	r3, #2
 8005824:	77fb      	strb	r3, [r7, #31]
 8005826:	e034      	b.n	8005892 <UART_SetConfig+0x216>
 8005828:	2304      	movs	r3, #4
 800582a:	77fb      	strb	r3, [r7, #31]
 800582c:	e031      	b.n	8005892 <UART_SetConfig+0x216>
 800582e:	2308      	movs	r3, #8
 8005830:	77fb      	strb	r3, [r7, #31]
 8005832:	e02e      	b.n	8005892 <UART_SetConfig+0x216>
 8005834:	2310      	movs	r3, #16
 8005836:	77fb      	strb	r3, [r7, #31]
 8005838:	e02b      	b.n	8005892 <UART_SetConfig+0x216>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a5a      	ldr	r2, [pc, #360]	@ (80059a8 <UART_SetConfig+0x32c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d124      	bne.n	800588e <UART_SetConfig+0x212>
 8005844:	4b54      	ldr	r3, [pc, #336]	@ (8005998 <UART_SetConfig+0x31c>)
 8005846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005848:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800584c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005850:	d011      	beq.n	8005876 <UART_SetConfig+0x1fa>
 8005852:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005856:	d817      	bhi.n	8005888 <UART_SetConfig+0x20c>
 8005858:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800585c:	d011      	beq.n	8005882 <UART_SetConfig+0x206>
 800585e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005862:	d811      	bhi.n	8005888 <UART_SetConfig+0x20c>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <UART_SetConfig+0x1f4>
 8005868:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800586c:	d006      	beq.n	800587c <UART_SetConfig+0x200>
 800586e:	e00b      	b.n	8005888 <UART_SetConfig+0x20c>
 8005870:	2300      	movs	r3, #0
 8005872:	77fb      	strb	r3, [r7, #31]
 8005874:	e00d      	b.n	8005892 <UART_SetConfig+0x216>
 8005876:	2302      	movs	r3, #2
 8005878:	77fb      	strb	r3, [r7, #31]
 800587a:	e00a      	b.n	8005892 <UART_SetConfig+0x216>
 800587c:	2304      	movs	r3, #4
 800587e:	77fb      	strb	r3, [r7, #31]
 8005880:	e007      	b.n	8005892 <UART_SetConfig+0x216>
 8005882:	2308      	movs	r3, #8
 8005884:	77fb      	strb	r3, [r7, #31]
 8005886:	e004      	b.n	8005892 <UART_SetConfig+0x216>
 8005888:	2310      	movs	r3, #16
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e001      	b.n	8005892 <UART_SetConfig+0x216>
 800588e:	2310      	movs	r3, #16
 8005890:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800589a:	d15b      	bne.n	8005954 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800589c:	7ffb      	ldrb	r3, [r7, #31]
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d827      	bhi.n	80058f2 <UART_SetConfig+0x276>
 80058a2:	a201      	add	r2, pc, #4	@ (adr r2, 80058a8 <UART_SetConfig+0x22c>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	080058cd 	.word	0x080058cd
 80058ac:	080058d5 	.word	0x080058d5
 80058b0:	080058dd 	.word	0x080058dd
 80058b4:	080058f3 	.word	0x080058f3
 80058b8:	080058e3 	.word	0x080058e3
 80058bc:	080058f3 	.word	0x080058f3
 80058c0:	080058f3 	.word	0x080058f3
 80058c4:	080058f3 	.word	0x080058f3
 80058c8:	080058eb 	.word	0x080058eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058cc:	f7ff fbe8 	bl	80050a0 <HAL_RCC_GetPCLK1Freq>
 80058d0:	61b8      	str	r0, [r7, #24]
        break;
 80058d2:	e013      	b.n	80058fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058d4:	f7ff fc06 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 80058d8:	61b8      	str	r0, [r7, #24]
        break;
 80058da:	e00f      	b.n	80058fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058dc:	4b33      	ldr	r3, [pc, #204]	@ (80059ac <UART_SetConfig+0x330>)
 80058de:	61bb      	str	r3, [r7, #24]
        break;
 80058e0:	e00c      	b.n	80058fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058e2:	f7ff fb7d 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 80058e6:	61b8      	str	r0, [r7, #24]
        break;
 80058e8:	e008      	b.n	80058fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ee:	61bb      	str	r3, [r7, #24]
        break;
 80058f0:	e004      	b.n	80058fc <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	77bb      	strb	r3, [r7, #30]
        break;
 80058fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 8082 	beq.w	8005a08 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	005a      	lsls	r2, r3, #1
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	085b      	lsrs	r3, r3, #1
 800590e:	441a      	add	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	fbb2 f3f3 	udiv	r3, r2, r3
 8005918:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b0f      	cmp	r3, #15
 800591e:	d916      	bls.n	800594e <UART_SetConfig+0x2d2>
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005926:	d212      	bcs.n	800594e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f023 030f 	bic.w	r3, r3, #15
 8005930:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	085b      	lsrs	r3, r3, #1
 8005936:	b29b      	uxth	r3, r3
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	b29a      	uxth	r2, r3
 800593e:	89fb      	ldrh	r3, [r7, #14]
 8005940:	4313      	orrs	r3, r2
 8005942:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	89fa      	ldrh	r2, [r7, #14]
 800594a:	60da      	str	r2, [r3, #12]
 800594c:	e05c      	b.n	8005a08 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	77bb      	strb	r3, [r7, #30]
 8005952:	e059      	b.n	8005a08 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005954:	7ffb      	ldrb	r3, [r7, #31]
 8005956:	2b08      	cmp	r3, #8
 8005958:	d835      	bhi.n	80059c6 <UART_SetConfig+0x34a>
 800595a:	a201      	add	r2, pc, #4	@ (adr r2, 8005960 <UART_SetConfig+0x2e4>)
 800595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005960:	08005985 	.word	0x08005985
 8005964:	0800598d 	.word	0x0800598d
 8005968:	080059b1 	.word	0x080059b1
 800596c:	080059c7 	.word	0x080059c7
 8005970:	080059b7 	.word	0x080059b7
 8005974:	080059c7 	.word	0x080059c7
 8005978:	080059c7 	.word	0x080059c7
 800597c:	080059c7 	.word	0x080059c7
 8005980:	080059bf 	.word	0x080059bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005984:	f7ff fb8c 	bl	80050a0 <HAL_RCC_GetPCLK1Freq>
 8005988:	61b8      	str	r0, [r7, #24]
        break;
 800598a:	e021      	b.n	80059d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800598c:	f7ff fbaa 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 8005990:	61b8      	str	r0, [r7, #24]
        break;
 8005992:	e01d      	b.n	80059d0 <UART_SetConfig+0x354>
 8005994:	40013800 	.word	0x40013800
 8005998:	40021000 	.word	0x40021000
 800599c:	40004400 	.word	0x40004400
 80059a0:	40004800 	.word	0x40004800
 80059a4:	40004c00 	.word	0x40004c00
 80059a8:	40005000 	.word	0x40005000
 80059ac:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a20 <UART_SetConfig+0x3a4>)
 80059b2:	61bb      	str	r3, [r7, #24]
        break;
 80059b4:	e00c      	b.n	80059d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059b6:	f7ff fb13 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 80059ba:	61b8      	str	r0, [r7, #24]
        break;
 80059bc:	e008      	b.n	80059d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059c2:	61bb      	str	r3, [r7, #24]
        break;
 80059c4:	e004      	b.n	80059d0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	77bb      	strb	r3, [r7, #30]
        break;
 80059ce:	bf00      	nop
    }

    if (pclk != 0U)
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d018      	beq.n	8005a08 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	085a      	lsrs	r2, r3, #1
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	441a      	add	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b0f      	cmp	r3, #15
 80059ee:	d909      	bls.n	8005a04 <UART_SetConfig+0x388>
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059f6:	d205      	bcs.n	8005a04 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60da      	str	r2, [r3, #12]
 8005a02:	e001      	b.n	8005a08 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005a14:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3720      	adds	r7, #32
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	007a1200 	.word	0x007a1200

08005a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a30:	f003 0308 	and.w	r3, r3, #8
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d01a      	beq.n	8005b3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b22:	d10a      	bne.n	8005b3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	605a      	str	r2, [r3, #4]
  }
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b098      	sub	sp, #96	@ 0x60
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b78:	f7fb fab8 	bl	80010ec <HAL_GetTick>
 8005b7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d12e      	bne.n	8005bea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b94:	2200      	movs	r2, #0
 8005b96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f88c 	bl	8005cb8 <UART_WaitOnFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d021      	beq.n	8005bea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bae:	e853 3f00 	ldrex	r3, [r3]
 8005bb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bc6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e6      	bne.n	8005ba6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e062      	b.n	8005cb0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d149      	bne.n	8005c8c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c00:	2200      	movs	r2, #0
 8005c02:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f856 	bl	8005cb8 <UART_WaitOnFlagUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d03c      	beq.n	8005c8c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	623b      	str	r3, [r7, #32]
   return(result);
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c30:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e6      	bne.n	8005c12 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3308      	adds	r3, #8
 8005c4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0301 	bic.w	r3, r3, #1
 8005c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3308      	adds	r3, #8
 8005c62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c64:	61fa      	str	r2, [r7, #28]
 8005c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	69b9      	ldr	r1, [r7, #24]
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	617b      	str	r3, [r7, #20]
   return(result);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e5      	bne.n	8005c44 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e011      	b.n	8005cb0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3758      	adds	r7, #88	@ 0x58
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	603b      	str	r3, [r7, #0]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc8:	e04f      	b.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd0:	d04b      	beq.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd2:	f7fb fa0b 	bl	80010ec <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d302      	bcc.n	8005ce8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e04e      	b.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d037      	beq.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b80      	cmp	r3, #128	@ 0x80
 8005cfe:	d034      	beq.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b40      	cmp	r3, #64	@ 0x40
 8005d04:	d031      	beq.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	f003 0308 	and.w	r3, r3, #8
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d110      	bne.n	8005d36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2208      	movs	r2, #8
 8005d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 f838 	bl	8005d92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2208      	movs	r2, #8
 8005d26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e029      	b.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d44:	d111      	bne.n	8005d6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 f81e 	bl	8005d92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e00f      	b.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4013      	ands	r3, r2
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	bf0c      	ite	eq
 8005d7a:	2301      	moveq	r3, #1
 8005d7c:	2300      	movne	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d0a0      	beq.n	8005cca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b095      	sub	sp, #84	@ 0x54
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005daa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e6      	bne.n	8005d9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f023 0301 	bic.w	r3, r3, #1
 8005de2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e5      	bne.n	8005dcc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d118      	bne.n	8005e3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f023 0310 	bic.w	r3, r3, #16
 8005e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	6979      	ldr	r1, [r7, #20]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	613b      	str	r3, [r7, #16]
   return(result);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e6      	bne.n	8005e08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e4e:	bf00      	nop
 8005e50:	3754      	adds	r7, #84	@ 0x54
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e6a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005e6e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e90:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005e94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	1d3b      	adds	r3, r7, #4
 8005ec8:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
	...

08005efc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b09d      	sub	sp, #116	@ 0x74
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f22:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	78db      	ldrb	r3, [r3, #3]
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d81f      	bhi.n	8005f6e <USB_ActivateEndpoint+0x72>
 8005f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f34 <USB_ActivateEndpoint+0x38>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005f61 	.word	0x08005f61
 8005f3c:	08005f77 	.word	0x08005f77
 8005f40:	08005f53 	.word	0x08005f53
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005f48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f4c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005f50:	e012      	b.n	8005f78 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005f52:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005f56:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005f5a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005f5e:	e00b      	b.n	8005f78 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005f60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005f64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f68:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005f6c:	e004      	b.n	8005f78 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005f74:	e000      	b.n	8005f78 <USB_ActivateEndpoint+0x7c>
      break;
 8005f76:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	441a      	add	r2, r3
 8005f82:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005f86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	b21b      	sxth	r3, r3
 8005faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb2:	b21a      	sxth	r2, r3
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	b21b      	sxth	r3, r3
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	b21b      	sxth	r3, r3
 8005fbe:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	441a      	add	r2, r3
 8005fcc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	7b1b      	ldrb	r3, [r3, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f040 8178 	bne.w	80062de <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	785b      	ldrb	r3, [r3, #1]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 8084 	beq.w	8006100 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006002:	b29b      	uxth	r3, r3
 8006004:	461a      	mov	r2, r3
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	4413      	add	r3, r2
 800600a:	61bb      	str	r3, [r7, #24]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	011a      	lsls	r2, r3, #4
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	88db      	ldrh	r3, [r3, #6]
 8006020:	085b      	lsrs	r3, r3, #1
 8006022:	b29b      	uxth	r3, r3
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	827b      	strh	r3, [r7, #18]
 800603a:	8a7b      	ldrh	r3, [r7, #18]
 800603c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01b      	beq.n	800607c <USB_ActivateEndpoint+0x180>
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800605a:	823b      	strh	r3, [r7, #16]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	441a      	add	r2, r3
 8006066:	8a3b      	ldrh	r3, [r7, #16]
 8006068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800606c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006074:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006078:	b29b      	uxth	r3, r3
 800607a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	78db      	ldrb	r3, [r3, #3]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d020      	beq.n	80060c6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006096:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800609a:	81bb      	strh	r3, [r7, #12]
 800609c:	89bb      	ldrh	r3, [r7, #12]
 800609e:	f083 0320 	eor.w	r3, r3, #32
 80060a2:	81bb      	strh	r3, [r7, #12]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	441a      	add	r2, r3
 80060ae:	89bb      	ldrh	r3, [r7, #12]
 80060b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	8013      	strh	r3, [r2, #0]
 80060c4:	e2d5      	b.n	8006672 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060dc:	81fb      	strh	r3, [r7, #14]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	441a      	add	r2, r3
 80060e8:	89fb      	ldrh	r3, [r7, #14]
 80060ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	8013      	strh	r3, [r2, #0]
 80060fe:	e2b8      	b.n	8006672 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	633b      	str	r3, [r7, #48]	@ 0x30
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800610a:	b29b      	uxth	r3, r3
 800610c:	461a      	mov	r2, r3
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	4413      	add	r3, r2
 8006112:	633b      	str	r3, [r7, #48]	@ 0x30
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	011a      	lsls	r2, r3, #4
 800611a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611c:	4413      	add	r3, r2
 800611e:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006122:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	88db      	ldrh	r3, [r3, #6]
 8006128:	085b      	lsrs	r3, r3, #1
 800612a:	b29b      	uxth	r3, r3
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006132:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800613e:	b29b      	uxth	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006144:	4413      	add	r3, r2
 8006146:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	011a      	lsls	r2, r3, #4
 800614e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006150:	4413      	add	r3, r2
 8006152:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006156:	627b      	str	r3, [r7, #36]	@ 0x24
 8006158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	b29b      	uxth	r3, r3
 800615e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006162:	b29a      	uxth	r2, r3
 8006164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <USB_ActivateEndpoint+0x28a>
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800617a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800617e:	b29a      	uxth	r2, r3
 8006180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006182:	801a      	strh	r2, [r3, #0]
 8006184:	e039      	b.n	80061fa <USB_ActivateEndpoint+0x2fe>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b3e      	cmp	r3, #62	@ 0x3e
 800618c:	d818      	bhi.n	80061c0 <USB_ActivateEndpoint+0x2c4>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	085b      	lsrs	r3, r3, #1
 8006194:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <USB_ActivateEndpoint+0x2ac>
 80061a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061a4:	3301      	adds	r3, #1
 80061a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	029b      	lsls	r3, r3, #10
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	4313      	orrs	r3, r2
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	801a      	strh	r2, [r3, #0]
 80061be:	e01c      	b.n	80061fa <USB_ActivateEndpoint+0x2fe>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	f003 031f 	and.w	r3, r3, #31
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d102      	bne.n	80061da <USB_ActivateEndpoint+0x2de>
 80061d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061d6:	3b01      	subs	r3, #1
 80061d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29a      	uxth	r2, r3
 80061e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	029b      	lsls	r3, r3, #10
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	4313      	orrs	r3, r2
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006208:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800620a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d01b      	beq.n	800624a <USB_ActivateEndpoint+0x34e>
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006228:	843b      	strh	r3, [r7, #32]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	441a      	add	r2, r3
 8006234:	8c3b      	ldrh	r3, [r7, #32]
 8006236:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800623a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800623e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006246:	b29b      	uxth	r3, r3
 8006248:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d124      	bne.n	800629c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006268:	83bb      	strh	r3, [r7, #28]
 800626a:	8bbb      	ldrh	r3, [r7, #28]
 800626c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006270:	83bb      	strh	r3, [r7, #28]
 8006272:	8bbb      	ldrh	r3, [r7, #28]
 8006274:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006278:	83bb      	strh	r3, [r7, #28]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	441a      	add	r2, r3
 8006284:	8bbb      	ldrh	r3, [r7, #28]
 8006286:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800628a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800628e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006296:	b29b      	uxth	r3, r3
 8006298:	8013      	strh	r3, [r2, #0]
 800629a:	e1ea      	b.n	8006672 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b2:	83fb      	strh	r3, [r7, #30]
 80062b4:	8bfb      	ldrh	r3, [r7, #30]
 80062b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80062ba:	83fb      	strh	r3, [r7, #30]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	441a      	add	r2, r3
 80062c6:	8bfb      	ldrh	r3, [r7, #30]
 80062c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062d8:	b29b      	uxth	r3, r3
 80062da:	8013      	strh	r3, [r2, #0]
 80062dc:	e1c9      	b.n	8006672 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	78db      	ldrb	r3, [r3, #3]
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d11e      	bne.n	8006324 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	441a      	add	r2, r3
 800630a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800630e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006312:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006316:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800631a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800631e:	b29b      	uxth	r3, r3
 8006320:	8013      	strh	r3, [r2, #0]
 8006322:	e01d      	b.n	8006360 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29b      	uxth	r3, r3
 8006332:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800633a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	441a      	add	r2, r3
 8006348:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800634c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800635c:	b29b      	uxth	r3, r3
 800635e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006370:	4413      	add	r3, r2
 8006372:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	011a      	lsls	r2, r3, #4
 800637a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800637c:	4413      	add	r3, r2
 800637e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006382:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	891b      	ldrh	r3, [r3, #8]
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	b29b      	uxth	r3, r3
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006392:	801a      	strh	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	657b      	str	r3, [r7, #84]	@ 0x54
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800639e:	b29b      	uxth	r3, r3
 80063a0:	461a      	mov	r2, r3
 80063a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063a4:	4413      	add	r3, r2
 80063a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	011a      	lsls	r2, r3, #4
 80063ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80063b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	895b      	ldrh	r3, [r3, #10]
 80063bc:	085b      	lsrs	r3, r3, #1
 80063be:	b29b      	uxth	r3, r3
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063c6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	785b      	ldrb	r3, [r3, #1]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 8093 	bne.w	80064f8 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80063e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80063e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d01b      	beq.n	8006426 <USB_ActivateEndpoint+0x52a>
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006404:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	441a      	add	r2, r3
 8006410:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006412:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006416:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800641a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800641e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006422:	b29b      	uxth	r3, r3
 8006424:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006434:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d01b      	beq.n	8006476 <USB_ActivateEndpoint+0x57a>
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006454:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	441a      	add	r2, r3
 8006460:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006462:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006466:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800646a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800646e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006472:	b29b      	uxth	r3, r3
 8006474:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b29b      	uxth	r3, r3
 8006484:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800648c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800648e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006490:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006494:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006496:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006498:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800649c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	441a      	add	r2, r3
 80064a8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80064aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	441a      	add	r2, r3
 80064e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80064e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	8013      	strh	r3, [r2, #0]
 80064f6:	e0bc      	b.n	8006672 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006508:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800650c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01d      	beq.n	8006550 <USB_ActivateEndpoint+0x654>
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	441a      	add	r2, r3
 8006538:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800653c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006540:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006544:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800654c:	b29b      	uxth	r3, r3
 800654e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006560:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006568:	2b00      	cmp	r3, #0
 800656a:	d01d      	beq.n	80065a8 <USB_ActivateEndpoint+0x6ac>
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800657e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006582:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	441a      	add	r2, r3
 8006590:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006594:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006598:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800659c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	78db      	ldrb	r3, [r3, #3]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d024      	beq.n	80065fa <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065c6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80065ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80065ce:	f083 0320 	eor.w	r3, r3, #32
 80065d2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	441a      	add	r2, r3
 80065e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80065e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	8013      	strh	r3, [r2, #0]
 80065f8:	e01d      	b.n	8006636 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	b29b      	uxth	r3, r3
 8006608:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800660c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006610:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	441a      	add	r2, r3
 800661e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006626:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800662a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800662e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006632:	b29b      	uxth	r3, r3
 8006634:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800664c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	441a      	add	r2, r3
 800665a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800665e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800666a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800666e:	b29b      	uxth	r3, r3
 8006670:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006672:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006676:	4618      	mov	r0, r3
 8006678:	3774      	adds	r7, #116	@ 0x74
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop

08006684 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006684:	b480      	push	{r7}
 8006686:	b08d      	sub	sp, #52	@ 0x34
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	7b1b      	ldrb	r3, [r3, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f040 808e 	bne.w	80067b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d044      	beq.n	800672a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	81bb      	strh	r3, [r7, #12]
 80066ae:	89bb      	ldrh	r3, [r7, #12]
 80066b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01b      	beq.n	80066f0 <USB_DeactivateEndpoint+0x6c>
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ce:	817b      	strh	r3, [r7, #10]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	897b      	ldrh	r3, [r7, #10]
 80066dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006706:	813b      	strh	r3, [r7, #8]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	441a      	add	r2, r3
 8006712:	893b      	ldrh	r3, [r7, #8]
 8006714:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006718:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800671c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006724:	b29b      	uxth	r3, r3
 8006726:	8013      	strh	r3, [r2, #0]
 8006728:	e192      	b.n	8006a50 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	827b      	strh	r3, [r7, #18]
 8006738:	8a7b      	ldrh	r3, [r7, #18]
 800673a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d01b      	beq.n	800677a <USB_DeactivateEndpoint+0xf6>
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	b29b      	uxth	r3, r3
 8006750:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006758:	823b      	strh	r3, [r7, #16]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	441a      	add	r2, r3
 8006764:	8a3b      	ldrh	r3, [r7, #16]
 8006766:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800676a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800676e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006776:	b29b      	uxth	r3, r3
 8006778:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	b29b      	uxth	r3, r3
 8006788:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800678c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006790:	81fb      	strh	r3, [r7, #14]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	441a      	add	r2, r3
 800679c:	89fb      	ldrh	r3, [r7, #14]
 800679e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	8013      	strh	r3, [r2, #0]
 80067b2:	e14d      	b.n	8006a50 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f040 80a5 	bne.w	8006908 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	843b      	strh	r3, [r7, #32]
 80067cc:	8c3b      	ldrh	r3, [r7, #32]
 80067ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d01b      	beq.n	800680e <USB_DeactivateEndpoint+0x18a>
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ec:	83fb      	strh	r3, [r7, #30]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	441a      	add	r2, r3
 80067f8:	8bfb      	ldrh	r3, [r7, #30]
 80067fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006802:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800680a:	b29b      	uxth	r3, r3
 800680c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	83bb      	strh	r3, [r7, #28]
 800681c:	8bbb      	ldrh	r3, [r7, #28]
 800681e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	d01b      	beq.n	800685e <USB_DeactivateEndpoint+0x1da>
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800683c:	837b      	strh	r3, [r7, #26]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	441a      	add	r2, r3
 8006848:	8b7b      	ldrh	r3, [r7, #26]
 800684a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800684e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006856:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800685a:	b29b      	uxth	r3, r3
 800685c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	b29b      	uxth	r3, r3
 800686c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006874:	833b      	strh	r3, [r7, #24]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	441a      	add	r2, r3
 8006880:	8b3b      	ldrh	r3, [r7, #24]
 8006882:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006886:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800688a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800688e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006892:	b29b      	uxth	r3, r3
 8006894:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ac:	82fb      	strh	r3, [r7, #22]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	441a      	add	r2, r3
 80068b8:	8afb      	ldrh	r3, [r7, #22]
 80068ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068e4:	82bb      	strh	r3, [r7, #20]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	441a      	add	r2, r3
 80068f0:	8abb      	ldrh	r3, [r7, #20]
 80068f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006902:	b29b      	uxth	r3, r3
 8006904:	8013      	strh	r3, [r2, #0]
 8006906:	e0a3      	b.n	8006a50 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006916:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01b      	beq.n	8006958 <USB_DeactivateEndpoint+0x2d4>
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006936:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	441a      	add	r2, r3
 8006942:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006944:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006948:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800694c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006954:	b29b      	uxth	r3, r3
 8006956:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006966:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01b      	beq.n	80069a8 <USB_DeactivateEndpoint+0x324>
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006986:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	441a      	add	r2, r3
 8006992:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800699c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069be:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	441a      	add	r2, r3
 80069ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069dc:	b29b      	uxth	r3, r3
 80069de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	441a      	add	r2, r3
 8006a02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	441a      	add	r2, r3
 8006a3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3734      	adds	r7, #52	@ 0x34
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b0c2      	sub	sp, #264	@ 0x108
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a6c:	6018      	str	r0, [r3, #0]
 8006a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a76:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	f040 86b7 	bne.w	80077f8 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d908      	bls.n	8006ab8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006ab6:	e007      	b.n	8006ac8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	7b1b      	ldrb	r3, [r3, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d13a      	bne.n	8006b4e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6959      	ldr	r1, [r3, #20]
 8006ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	88da      	ldrh	r2, [r3, #6]
 8006af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006afa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006afe:	6800      	ldr	r0, [r0, #0]
 8006b00:	f001 fc8d 	bl	800841e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	461a      	mov	r2, r3
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	4413      	add	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]
 8006b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	011a      	lsls	r2, r3, #4
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	801a      	strh	r2, [r3, #0]
 8006b4a:	f000 be1f 	b.w	800778c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	78db      	ldrb	r3, [r3, #3]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	f040 8462 	bne.w	8007424 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6a1a      	ldr	r2, [r3, #32]
 8006b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	f240 83df 	bls.w	800733c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ba4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	441a      	add	r2, r3
 8006bc2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006bc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bce:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6a1a      	ldr	r2, [r3, #32]
 8006be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bea:	1ad2      	subs	r2, r2, r3
 8006bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 81c7 	beq.w	8006fae <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d177      	bne.n	8006d2c <USB_EPStartXfer+0x2ce>
 8006c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5c:	4413      	add	r3, r2
 8006c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	011a      	lsls	r2, r3, #4
 8006c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c70:	4413      	add	r3, r2
 8006c72:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7a:	881b      	ldrh	r3, [r3, #0]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c86:	801a      	strh	r2, [r3, #0]
 8006c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10a      	bne.n	8006ca6 <USB_EPStartXfer+0x248>
 8006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	e067      	b.n	8006d76 <USB_EPStartXfer+0x318>
 8006ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006caa:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cac:	d81c      	bhi.n	8006ce8 <USB_EPStartXfer+0x28a>
 8006cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb2:	085b      	lsrs	r3, r3, #1
 8006cb4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d004      	beq.n	8006cce <USB_EPStartXfer+0x270>
 8006cc4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006cc8:	3301      	adds	r3, #1
 8006cca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	029b      	lsls	r3, r3, #10
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce4:	801a      	strh	r2, [r3, #0]
 8006ce6:	e046      	b.n	8006d76 <USB_EPStartXfer+0x318>
 8006ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cec:	095b      	lsrs	r3, r3, #5
 8006cee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf6:	f003 031f 	and.w	r3, r3, #31
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <USB_EPStartXfer+0x2aa>
 8006cfe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006d02:	3b01      	subs	r3, #1
 8006d04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	029b      	lsls	r3, r3, #10
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	801a      	strh	r2, [r3, #0]
 8006d2a:	e024      	b.n	8006d76 <USB_EPStartXfer+0x318>
 8006d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	785b      	ldrb	r3, [r3, #1]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d11c      	bne.n	8006d76 <USB_EPStartXfer+0x318>
 8006d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	4413      	add	r3, r2
 8006d52:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	011a      	lsls	r2, r3, #4
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	4413      	add	r3, r2
 8006d66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	895b      	ldrh	r3, [r3, #10]
 8006d82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6959      	ldr	r1, [r3, #20]
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d9c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006da0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006da4:	6800      	ldr	r0, [r0, #0]
 8006da6:	f001 fb3a 	bl	800841e <USB_WritePMA>
            ep->xfer_buff += len;
 8006daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695a      	ldr	r2, [r3, #20]
 8006db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dba:	441a      	add	r2, r3
 8006dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6a1a      	ldr	r2, [r3, #32]
 8006dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d90f      	bls.n	8006e04 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6a1a      	ldr	r2, [r3, #32]
 8006df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df4:	1ad2      	subs	r2, r2, r3
 8006df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	621a      	str	r2, [r3, #32]
 8006e02:	e00e      	b.n	8006e22 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	785b      	ldrb	r3, [r3, #1]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d177      	bne.n	8006f22 <USB_EPStartXfer+0x4c4>
 8006e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	461a      	mov	r2, r3
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	4413      	add	r3, r2
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	011a      	lsls	r2, r3, #4
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	4413      	add	r3, r2
 8006e68:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e6c:	617b      	str	r3, [r7, #20]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	801a      	strh	r2, [r3, #0]
 8006e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10a      	bne.n	8006e9c <USB_EPStartXfer+0x43e>
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	801a      	strh	r2, [r3, #0]
 8006e9a:	e06d      	b.n	8006f78 <USB_EPStartXfer+0x51a>
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ea2:	d81c      	bhi.n	8006ede <USB_EPStartXfer+0x480>
 8006ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea8:	085b      	lsrs	r3, r3, #1
 8006eaa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <USB_EPStartXfer+0x466>
 8006eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	029b      	lsls	r3, r3, #10
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	801a      	strh	r2, [r3, #0]
 8006edc:	e04c      	b.n	8006f78 <USB_EPStartXfer+0x51a>
 8006ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee2:	095b      	lsrs	r3, r3, #5
 8006ee4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d104      	bne.n	8006efe <USB_EPStartXfer+0x4a0>
 8006ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	029b      	lsls	r3, r3, #10
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	801a      	strh	r2, [r3, #0]
 8006f20:	e02a      	b.n	8006f78 <USB_EPStartXfer+0x51a>
 8006f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	785b      	ldrb	r3, [r3, #1]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d122      	bne.n	8006f78 <USB_EPStartXfer+0x51a>
 8006f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	623b      	str	r3, [r7, #32]
 8006f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	4413      	add	r3, r2
 8006f54:	623b      	str	r3, [r7, #32]
 8006f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	011a      	lsls	r2, r3, #4
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	4413      	add	r3, r2
 8006f68:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f6c:	61fb      	str	r3, [r7, #28]
 8006f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	891b      	ldrh	r3, [r3, #8]
 8006f84:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6959      	ldr	r1, [r3, #20]
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f9e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006fa2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006fa6:	6800      	ldr	r0, [r0, #0]
 8006fa8:	f001 fa39 	bl	800841e <USB_WritePMA>
 8006fac:	e3ee      	b.n	800778c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	785b      	ldrb	r3, [r3, #1]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d177      	bne.n	80070ae <USB_EPStartXfer+0x650>
 8006fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fde:	4413      	add	r3, r2
 8006fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	011a      	lsls	r2, r3, #4
 8006ff0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ffa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007004:	b29a      	uxth	r2, r3
 8007006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007008:	801a      	strh	r2, [r3, #0]
 800700a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <USB_EPStartXfer+0x5ca>
 8007012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	b29b      	uxth	r3, r3
 8007018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800701c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007020:	b29a      	uxth	r2, r3
 8007022:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007024:	801a      	strh	r2, [r3, #0]
 8007026:	e06d      	b.n	8007104 <USB_EPStartXfer+0x6a6>
 8007028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702c:	2b3e      	cmp	r3, #62	@ 0x3e
 800702e:	d81c      	bhi.n	800706a <USB_EPStartXfer+0x60c>
 8007030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007034:	085b      	lsrs	r3, r3, #1
 8007036:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800703a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <USB_EPStartXfer+0x5f2>
 8007046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800704a:	3301      	adds	r3, #1
 800704c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29a      	uxth	r2, r3
 8007056:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800705a:	b29b      	uxth	r3, r3
 800705c:	029b      	lsls	r3, r3, #10
 800705e:	b29b      	uxth	r3, r3
 8007060:	4313      	orrs	r3, r2
 8007062:	b29a      	uxth	r2, r3
 8007064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	e04c      	b.n	8007104 <USB_EPStartXfer+0x6a6>
 800706a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007078:	f003 031f 	and.w	r3, r3, #31
 800707c:	2b00      	cmp	r3, #0
 800707e:	d104      	bne.n	800708a <USB_EPStartXfer+0x62c>
 8007080:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007084:	3b01      	subs	r3, #1
 8007086:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800708a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29a      	uxth	r2, r3
 8007090:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007094:	b29b      	uxth	r3, r3
 8007096:	029b      	lsls	r3, r3, #10
 8007098:	b29b      	uxth	r3, r3
 800709a:	4313      	orrs	r3, r2
 800709c:	b29b      	uxth	r3, r3
 800709e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070aa:	801a      	strh	r2, [r3, #0]
 80070ac:	e02a      	b.n	8007104 <USB_EPStartXfer+0x6a6>
 80070ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	785b      	ldrb	r3, [r3, #1]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d122      	bne.n	8007104 <USB_EPStartXfer+0x6a6>
 80070be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80070ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070d8:	b29b      	uxth	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070de:	4413      	add	r3, r2
 80070e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80070e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	011a      	lsls	r2, r3, #4
 80070f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070f2:	4413      	add	r3, r2
 80070f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80070f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fe:	b29a      	uxth	r2, r3
 8007100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007102:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	891b      	ldrh	r3, [r3, #8]
 8007110:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6959      	ldr	r1, [r3, #20]
 8007120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007124:	b29b      	uxth	r3, r3
 8007126:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800712a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800712e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007132:	6800      	ldr	r0, [r0, #0]
 8007134:	f001 f973 	bl	800841e <USB_WritePMA>
            ep->xfer_buff += len;
 8007138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800713c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	695a      	ldr	r2, [r3, #20]
 8007144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007148:	441a      	add	r2, r3
 800714a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6a1a      	ldr	r2, [r3, #32]
 8007162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	429a      	cmp	r2, r3
 8007170:	d90f      	bls.n	8007192 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6a1a      	ldr	r2, [r3, #32]
 800717e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007182:	1ad2      	subs	r2, r2, r3
 8007184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	621a      	str	r2, [r3, #32]
 8007190:	e00e      	b.n	80071b0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80071a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2200      	movs	r2, #0
 80071ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80071bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d177      	bne.n	80072bc <USB_EPStartXfer+0x85e>
 80071cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ec:	4413      	add	r3, r2
 80071ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	011a      	lsls	r2, r3, #4
 80071fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007200:	4413      	add	r3, r2
 8007202:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007206:	637b      	str	r3, [r7, #52]	@ 0x34
 8007208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007212:	b29a      	uxth	r2, r3
 8007214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007216:	801a      	strh	r2, [r3, #0]
 8007218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10a      	bne.n	8007236 <USB_EPStartXfer+0x7d8>
 8007220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	b29b      	uxth	r3, r3
 8007226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800722a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800722e:	b29a      	uxth	r2, r3
 8007230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007232:	801a      	strh	r2, [r3, #0]
 8007234:	e067      	b.n	8007306 <USB_EPStartXfer+0x8a8>
 8007236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723a:	2b3e      	cmp	r3, #62	@ 0x3e
 800723c:	d81c      	bhi.n	8007278 <USB_EPStartXfer+0x81a>
 800723e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007242:	085b      	lsrs	r3, r3, #1
 8007244:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	d004      	beq.n	800725e <USB_EPStartXfer+0x800>
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007258:	3301      	adds	r3, #1
 800725a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800725e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b29a      	uxth	r2, r3
 8007264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007268:	b29b      	uxth	r3, r3
 800726a:	029b      	lsls	r3, r3, #10
 800726c:	b29b      	uxth	r3, r3
 800726e:	4313      	orrs	r3, r2
 8007270:	b29a      	uxth	r2, r3
 8007272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007274:	801a      	strh	r2, [r3, #0]
 8007276:	e046      	b.n	8007306 <USB_EPStartXfer+0x8a8>
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727c:	095b      	lsrs	r3, r3, #5
 800727e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007286:	f003 031f 	and.w	r3, r3, #31
 800728a:	2b00      	cmp	r3, #0
 800728c:	d104      	bne.n	8007298 <USB_EPStartXfer+0x83a>
 800728e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007292:	3b01      	subs	r3, #1
 8007294:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	b29a      	uxth	r2, r3
 800729e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	029b      	lsls	r3, r3, #10
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	4313      	orrs	r3, r2
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b8:	801a      	strh	r2, [r3, #0]
 80072ba:	e024      	b.n	8007306 <USB_EPStartXfer+0x8a8>
 80072bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	785b      	ldrb	r3, [r3, #1]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d11c      	bne.n	8007306 <USB_EPStartXfer+0x8a8>
 80072cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072da:	b29b      	uxth	r3, r3
 80072dc:	461a      	mov	r2, r3
 80072de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072e0:	4413      	add	r3, r2
 80072e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80072e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	011a      	lsls	r2, r3, #4
 80072f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072f4:	4413      	add	r3, r2
 80072f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007300:	b29a      	uxth	r2, r3
 8007302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007304:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	895b      	ldrh	r3, [r3, #10]
 8007312:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6959      	ldr	r1, [r3, #20]
 8007322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007326:	b29b      	uxth	r3, r3
 8007328:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800732c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007330:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007334:	6800      	ldr	r0, [r0, #0]
 8007336:	f001 f872 	bl	800841e <USB_WritePMA>
 800733a:	e227      	b.n	800778c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800733c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800734c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007350:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800736e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007372:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	441a      	add	r2, r3
 8007390:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007394:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007398:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800739c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80073a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	461a      	mov	r2, r3
 80073c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073c8:	4413      	add	r3, r2
 80073ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	011a      	lsls	r2, r3, #4
 80073da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073dc:	4413      	add	r3, r2
 80073de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80073ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	891b      	ldrh	r3, [r3, #8]
 80073fa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6959      	ldr	r1, [r3, #20]
 800740a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740e:	b29b      	uxth	r3, r3
 8007410:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007414:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007418:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800741c:	6800      	ldr	r0, [r0, #0]
 800741e:	f000 fffe 	bl	800841e <USB_WritePMA>
 8007422:	e1b3      	b.n	800778c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6a1a      	ldr	r2, [r3, #32]
 8007430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007434:	1ad2      	subs	r2, r2, r3
 8007436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 80c6 	beq.w	80075f6 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800746a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800746e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	673b      	str	r3, [r7, #112]	@ 0x70
 8007476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	785b      	ldrb	r3, [r3, #1]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d177      	bne.n	8007576 <USB_EPStartXfer+0xb18>
 8007486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007496:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074a6:	4413      	add	r3, r2
 80074a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	011a      	lsls	r2, r3, #4
 80074b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074ba:	4413      	add	r3, r2
 80074bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80074c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074d0:	801a      	strh	r2, [r3, #0]
 80074d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10a      	bne.n	80074f0 <USB_EPStartXfer+0xa92>
 80074da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074ec:	801a      	strh	r2, [r3, #0]
 80074ee:	e067      	b.n	80075c0 <USB_EPStartXfer+0xb62>
 80074f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80074f6:	d81c      	bhi.n	8007532 <USB_EPStartXfer+0xad4>
 80074f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fc:	085b      	lsrs	r3, r3, #1
 80074fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d004      	beq.n	8007518 <USB_EPStartXfer+0xaba>
 800750e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007512:	3301      	adds	r3, #1
 8007514:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	b29a      	uxth	r2, r3
 800751e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007522:	b29b      	uxth	r3, r3
 8007524:	029b      	lsls	r3, r3, #10
 8007526:	b29b      	uxth	r3, r3
 8007528:	4313      	orrs	r3, r2
 800752a:	b29a      	uxth	r2, r3
 800752c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800752e:	801a      	strh	r2, [r3, #0]
 8007530:	e046      	b.n	80075c0 <USB_EPStartXfer+0xb62>
 8007532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007536:	095b      	lsrs	r3, r3, #5
 8007538:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800753c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007540:	f003 031f 	and.w	r3, r3, #31
 8007544:	2b00      	cmp	r3, #0
 8007546:	d104      	bne.n	8007552 <USB_EPStartXfer+0xaf4>
 8007548:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800754c:	3b01      	subs	r3, #1
 800754e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007552:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29a      	uxth	r2, r3
 8007558:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800755c:	b29b      	uxth	r3, r3
 800755e:	029b      	lsls	r3, r3, #10
 8007560:	b29b      	uxth	r3, r3
 8007562:	4313      	orrs	r3, r2
 8007564:	b29b      	uxth	r3, r3
 8007566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800756a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800756e:	b29a      	uxth	r2, r3
 8007570:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007572:	801a      	strh	r2, [r3, #0]
 8007574:	e024      	b.n	80075c0 <USB_EPStartXfer+0xb62>
 8007576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	785b      	ldrb	r3, [r3, #1]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d11c      	bne.n	80075c0 <USB_EPStartXfer+0xb62>
 8007586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007594:	b29b      	uxth	r3, r3
 8007596:	461a      	mov	r2, r3
 8007598:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800759a:	4413      	add	r3, r2
 800759c:	673b      	str	r3, [r7, #112]	@ 0x70
 800759e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	011a      	lsls	r2, r3, #4
 80075ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075ae:	4413      	add	r3, r2
 80075b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80075c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	895b      	ldrh	r3, [r3, #10]
 80075cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6959      	ldr	r1, [r3, #20]
 80075dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075e6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075ea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80075ee:	6800      	ldr	r0, [r0, #0]
 80075f0:	f000 ff15 	bl	800841e <USB_WritePMA>
 80075f4:	e0ca      	b.n	800778c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	785b      	ldrb	r3, [r3, #1]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d177      	bne.n	80076f6 <USB_EPStartXfer+0xc98>
 8007606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007616:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007620:	b29b      	uxth	r3, r3
 8007622:	461a      	mov	r2, r3
 8007624:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007626:	4413      	add	r3, r2
 8007628:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800762a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	011a      	lsls	r2, r3, #4
 8007638:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800763a:	4413      	add	r3, r2
 800763c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007640:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007642:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	b29b      	uxth	r3, r3
 8007648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800764c:	b29a      	uxth	r2, r3
 800764e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007650:	801a      	strh	r2, [r3, #0]
 8007652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10a      	bne.n	8007670 <USB_EPStartXfer+0xc12>
 800765a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	b29b      	uxth	r3, r3
 8007660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007668:	b29a      	uxth	r2, r3
 800766a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	e073      	b.n	8007758 <USB_EPStartXfer+0xcfa>
 8007670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007674:	2b3e      	cmp	r3, #62	@ 0x3e
 8007676:	d81c      	bhi.n	80076b2 <USB_EPStartXfer+0xc54>
 8007678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767c:	085b      	lsrs	r3, r3, #1
 800767e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d004      	beq.n	8007698 <USB_EPStartXfer+0xc3a>
 800768e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007692:	3301      	adds	r3, #1
 8007694:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	b29a      	uxth	r2, r3
 800769e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	029b      	lsls	r3, r3, #10
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	4313      	orrs	r3, r2
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076ae:	801a      	strh	r2, [r3, #0]
 80076b0:	e052      	b.n	8007758 <USB_EPStartXfer+0xcfa>
 80076b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b6:	095b      	lsrs	r3, r3, #5
 80076b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80076bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c0:	f003 031f 	and.w	r3, r3, #31
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <USB_EPStartXfer+0xc74>
 80076c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80076cc:	3b01      	subs	r3, #1
 80076ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80076d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80076dc:	b29b      	uxth	r3, r3
 80076de:	029b      	lsls	r3, r3, #10
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	4313      	orrs	r3, r2
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076f2:	801a      	strh	r2, [r3, #0]
 80076f4:	e030      	b.n	8007758 <USB_EPStartXfer+0xcfa>
 80076f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	785b      	ldrb	r3, [r3, #1]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d128      	bne.n	8007758 <USB_EPStartXfer+0xcfa>
 8007706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007718:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007722:	b29b      	uxth	r3, r3
 8007724:	461a      	mov	r2, r3
 8007726:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800772a:	4413      	add	r3, r2
 800772c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	011a      	lsls	r2, r3, #4
 800773e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007742:	4413      	add	r3, r2
 8007744:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007748:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800774c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007750:	b29a      	uxth	r2, r3
 8007752:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007756:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	891b      	ldrh	r3, [r3, #8]
 8007764:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6959      	ldr	r1, [r3, #20]
 8007774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007778:	b29b      	uxth	r3, r3
 800777a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800777e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007782:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007786:	6800      	ldr	r0, [r0, #0]
 8007788:	f000 fe49 	bl	800841e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800778c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007790:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800779a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077b2:	817b      	strh	r3, [r7, #10]
 80077b4:	897b      	ldrh	r3, [r7, #10]
 80077b6:	f083 0310 	eor.w	r3, r3, #16
 80077ba:	817b      	strh	r3, [r7, #10]
 80077bc:	897b      	ldrh	r3, [r7, #10]
 80077be:	f083 0320 	eor.w	r3, r3, #32
 80077c2:	817b      	strh	r3, [r7, #10]
 80077c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	441a      	add	r2, r3
 80077de:	897b      	ldrh	r3, [r7, #10]
 80077e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	8013      	strh	r3, [r2, #0]
 80077f4:	f000 bcdf 	b.w	80081b6 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80077f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	7b1b      	ldrb	r3, [r3, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	f040 80bc 	bne.w	8007982 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800780a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699a      	ldr	r2, [r3, #24]
 8007816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	429a      	cmp	r2, r3
 8007824:	d917      	bls.n	8007856 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007846:	1ad2      	subs	r2, r2, r3
 8007848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	619a      	str	r2, [r3, #24]
 8007854:	e00e      	b.n	8007874 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2200      	movs	r2, #0
 8007872:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007878:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007886:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007890:	b29b      	uxth	r3, r3
 8007892:	461a      	mov	r2, r3
 8007894:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007898:	4413      	add	r3, r2
 800789a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800789e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	011a      	lsls	r2, r3, #4
 80078ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80078b0:	4413      	add	r3, r2
 80078b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80078ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078cc:	801a      	strh	r2, [r3, #0]
 80078ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10d      	bne.n	80078f2 <USB_EPStartXfer+0xe94>
 80078d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078ec:	801a      	strh	r2, [r3, #0]
 80078ee:	f000 bc28 	b.w	8008142 <USB_EPStartXfer+0x16e4>
 80078f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80078f8:	d81f      	bhi.n	800793a <USB_EPStartXfer+0xedc>
 80078fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fe:	085b      	lsrs	r3, r3, #1
 8007900:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	d004      	beq.n	800791a <USB_EPStartXfer+0xebc>
 8007910:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007914:	3301      	adds	r3, #1
 8007916:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800791a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	b29a      	uxth	r2, r3
 8007922:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007926:	b29b      	uxth	r3, r3
 8007928:	029b      	lsls	r3, r3, #10
 800792a:	b29b      	uxth	r3, r3
 800792c:	4313      	orrs	r3, r2
 800792e:	b29a      	uxth	r2, r3
 8007930:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007934:	801a      	strh	r2, [r3, #0]
 8007936:	f000 bc04 	b.w	8008142 <USB_EPStartXfer+0x16e4>
 800793a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793e:	095b      	lsrs	r3, r3, #5
 8007940:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007948:	f003 031f 	and.w	r3, r3, #31
 800794c:	2b00      	cmp	r3, #0
 800794e:	d104      	bne.n	800795a <USB_EPStartXfer+0xefc>
 8007950:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007954:	3b01      	subs	r3, #1
 8007956:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800795a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	b29a      	uxth	r2, r3
 8007962:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007966:	b29b      	uxth	r3, r3
 8007968:	029b      	lsls	r3, r3, #10
 800796a:	b29b      	uxth	r3, r3
 800796c:	4313      	orrs	r3, r2
 800796e:	b29b      	uxth	r3, r3
 8007970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007978:	b29a      	uxth	r2, r3
 800797a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800797e:	801a      	strh	r2, [r3, #0]
 8007980:	e3df      	b.n	8008142 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	78db      	ldrb	r3, [r3, #3]
 800798e:	2b02      	cmp	r3, #2
 8007990:	f040 8218 	bne.w	8007dc4 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f040 809d 	bne.w	8007ae0 <USB_EPStartXfer+0x1082>
 80079a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	461a      	mov	r2, r3
 80079c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079ca:	4413      	add	r3, r2
 80079cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	011a      	lsls	r2, r3, #4
 80079de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079e2:	4413      	add	r3, r2
 80079e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80079e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079fe:	801a      	strh	r2, [r3, #0]
 8007a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10c      	bne.n	8007a2a <USB_EPStartXfer+0xfcc>
 8007a10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a26:	801a      	strh	r2, [r3, #0]
 8007a28:	e08f      	b.n	8007b4a <USB_EPStartXfer+0x10ec>
 8007a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a38:	d826      	bhi.n	8007a88 <USB_EPStartXfer+0x102a>
 8007a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d004      	beq.n	8007a6a <USB_EPStartXfer+0x100c>
 8007a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a64:	3301      	adds	r3, #1
 8007a66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	029b      	lsls	r3, r3, #10
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a84:	801a      	strh	r2, [r3, #0]
 8007a86:	e060      	b.n	8007b4a <USB_EPStartXfer+0x10ec>
 8007a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	095b      	lsrs	r3, r3, #5
 8007a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f003 031f 	and.w	r3, r3, #31
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d104      	bne.n	8007ab8 <USB_EPStartXfer+0x105a>
 8007aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ab8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	029b      	lsls	r3, r3, #10
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	4313      	orrs	r3, r2
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007adc:	801a      	strh	r2, [r3, #0]
 8007ade:	e034      	b.n	8007b4a <USB_EPStartXfer+0x10ec>
 8007ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	785b      	ldrb	r3, [r3, #1]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d12c      	bne.n	8007b4a <USB_EPStartXfer+0x10ec>
 8007af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b14:	4413      	add	r3, r2
 8007b16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	011a      	lsls	r2, r3, #4
 8007b28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007b48:	801a      	strh	r2, [r3, #0]
 8007b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	785b      	ldrb	r3, [r3, #1]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f040 809d 	bne.w	8007ca4 <USB_EPStartXfer+0x1246>
 8007b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	461a      	mov	r2, r3
 8007b8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b8e:	4413      	add	r3, r2
 8007b90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	011a      	lsls	r2, r3, #4
 8007ba2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007bac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007bc2:	801a      	strh	r2, [r3, #0]
 8007bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10c      	bne.n	8007bee <USB_EPStartXfer+0x1190>
 8007bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007bea:	801a      	strh	r2, [r3, #0]
 8007bec:	e088      	b.n	8007d00 <USB_EPStartXfer+0x12a2>
 8007bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bfc:	d826      	bhi.n	8007c4c <USB_EPStartXfer+0x11ee>
 8007bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	085b      	lsrs	r3, r3, #1
 8007c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d004      	beq.n	8007c2e <USB_EPStartXfer+0x11d0>
 8007c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c28:	3301      	adds	r3, #1
 8007c2a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	029b      	lsls	r3, r3, #10
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	4313      	orrs	r3, r2
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c48:	801a      	strh	r2, [r3, #0]
 8007c4a:	e059      	b.n	8007d00 <USB_EPStartXfer+0x12a2>
 8007c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	095b      	lsrs	r3, r3, #5
 8007c5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	f003 031f 	and.w	r3, r3, #31
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d104      	bne.n	8007c7c <USB_EPStartXfer+0x121e>
 8007c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c76:	3b01      	subs	r3, #1
 8007c78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	029b      	lsls	r3, r3, #10
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ca0:	801a      	strh	r2, [r3, #0]
 8007ca2:	e02d      	b.n	8007d00 <USB_EPStartXfer+0x12a2>
 8007ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d125      	bne.n	8007d00 <USB_EPStartXfer+0x12a2>
 8007cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007cca:	4413      	add	r3, r2
 8007ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	011a      	lsls	r2, r3, #4
 8007cde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cfe:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 8218 	beq.w	8008142 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d005      	beq.n	8007d4a <USB_EPStartXfer+0x12ec>
 8007d3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10d      	bne.n	8007d66 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f040 81f5 	bne.w	8008142 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f040 81ee 	bne.w	8008142 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d8c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	441a      	add	r2, r3
 8007daa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007dae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007db2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	8013      	strh	r3, [r2, #0]
 8007dc2:	e1be      	b.n	8008142 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	78db      	ldrb	r3, [r3, #3]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	f040 81b4 	bne.w	800813e <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	699a      	ldr	r2, [r3, #24]
 8007de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d917      	bls.n	8007e22 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8007df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	699a      	ldr	r2, [r3, #24]
 8007e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e12:	1ad2      	subs	r2, r2, r3
 8007e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	619a      	str	r2, [r3, #24]
 8007e20:	e00e      	b.n	8007e40 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8007e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	785b      	ldrb	r3, [r3, #1]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f040 8085 	bne.w	8007f5c <USB_EPStartXfer+0x14fe>
 8007e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	461a      	mov	r2, r3
 8007e72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e76:	4413      	add	r3, r2
 8007e78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	011a      	lsls	r2, r3, #4
 8007e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e8e:	4413      	add	r3, r2
 8007e90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007eaa:	801a      	strh	r2, [r3, #0]
 8007eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10c      	bne.n	8007ece <USB_EPStartXfer+0x1470>
 8007eb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007eca:	801a      	strh	r2, [r3, #0]
 8007ecc:	e077      	b.n	8007fbe <USB_EPStartXfer+0x1560>
 8007ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed2:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ed4:	d81e      	bhi.n	8007f14 <USB_EPStartXfer+0x14b6>
 8007ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eda:	085b      	lsrs	r3, r3, #1
 8007edc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee4:	f003 0301 	and.w	r3, r3, #1
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d004      	beq.n	8007ef6 <USB_EPStartXfer+0x1498>
 8007eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007ef6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	029b      	lsls	r3, r3, #10
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f10:	801a      	strh	r2, [r3, #0]
 8007f12:	e054      	b.n	8007fbe <USB_EPStartXfer+0x1560>
 8007f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f18:	095b      	lsrs	r3, r3, #5
 8007f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f22:	f003 031f 	and.w	r3, r3, #31
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d104      	bne.n	8007f34 <USB_EPStartXfer+0x14d6>
 8007f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007f34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	029b      	lsls	r3, r3, #10
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	4313      	orrs	r3, r2
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f58:	801a      	strh	r2, [r3, #0]
 8007f5a:	e030      	b.n	8007fbe <USB_EPStartXfer+0x1560>
 8007f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	785b      	ldrb	r3, [r3, #1]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d128      	bne.n	8007fbe <USB_EPStartXfer+0x1560>
 8007f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f90:	4413      	add	r3, r2
 8007f92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	011a      	lsls	r2, r3, #4
 8007fa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fa8:	4413      	add	r3, r2
 8007faa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007fae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007fbc:	801a      	strh	r2, [r3, #0]
 8007fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	785b      	ldrb	r3, [r3, #1]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f040 8085 	bne.w	80080e8 <USB_EPStartXfer+0x168a>
 8007fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008002:	4413      	add	r3, r2
 8008004:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800800c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	011a      	lsls	r2, r3, #4
 8008016:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800801a:	4413      	add	r3, r2
 800801c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008020:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008024:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	b29b      	uxth	r3, r3
 800802c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008030:	b29a      	uxth	r2, r3
 8008032:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008036:	801a      	strh	r2, [r3, #0]
 8008038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10c      	bne.n	800805a <USB_EPStartXfer+0x15fc>
 8008040:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	b29b      	uxth	r3, r3
 8008048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800804c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008050:	b29a      	uxth	r2, r3
 8008052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008056:	801a      	strh	r2, [r3, #0]
 8008058:	e073      	b.n	8008142 <USB_EPStartXfer+0x16e4>
 800805a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800805e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008060:	d81e      	bhi.n	80080a0 <USB_EPStartXfer+0x1642>
 8008062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008066:	085b      	lsrs	r3, r3, #1
 8008068:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800806c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	d004      	beq.n	8008082 <USB_EPStartXfer+0x1624>
 8008078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800807c:	3301      	adds	r3, #1
 800807e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008082:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	b29a      	uxth	r2, r3
 800808a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800808e:	b29b      	uxth	r3, r3
 8008090:	029b      	lsls	r3, r3, #10
 8008092:	b29b      	uxth	r3, r3
 8008094:	4313      	orrs	r3, r2
 8008096:	b29a      	uxth	r2, r3
 8008098:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800809c:	801a      	strh	r2, [r3, #0]
 800809e:	e050      	b.n	8008142 <USB_EPStartXfer+0x16e4>
 80080a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a4:	095b      	lsrs	r3, r3, #5
 80080a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80080aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ae:	f003 031f 	and.w	r3, r3, #31
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d104      	bne.n	80080c0 <USB_EPStartXfer+0x1662>
 80080b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080ba:	3b01      	subs	r3, #1
 80080bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80080c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	029b      	lsls	r3, r3, #10
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	4313      	orrs	r3, r2
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080de:	b29a      	uxth	r2, r3
 80080e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80080e4:	801a      	strh	r2, [r3, #0]
 80080e6:	e02c      	b.n	8008142 <USB_EPStartXfer+0x16e4>
 80080e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	785b      	ldrb	r3, [r3, #1]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d124      	bne.n	8008142 <USB_EPStartXfer+0x16e4>
 80080f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008106:	b29b      	uxth	r3, r3
 8008108:	461a      	mov	r2, r3
 800810a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800810e:	4413      	add	r3, r2
 8008110:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	011a      	lsls	r2, r3, #4
 8008122:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008126:	4413      	add	r3, r2
 8008128:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800812c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008134:	b29a      	uxth	r2, r3
 8008136:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800813a:	801a      	strh	r2, [r3, #0]
 800813c:	e001      	b.n	8008142 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e03a      	b.n	80081b8 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008168:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800816c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008170:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008174:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008178:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800817c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008180:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008188:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	441a      	add	r2, r3
 800819e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80081a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b085      	sub	sp, #20
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	785b      	ldrb	r3, [r3, #1]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d020      	beq.n	8008216 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081ea:	81bb      	strh	r3, [r7, #12]
 80081ec:	89bb      	ldrh	r3, [r7, #12]
 80081ee:	f083 0310 	eor.w	r3, r3, #16
 80081f2:	81bb      	strh	r3, [r7, #12]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	441a      	add	r2, r3
 80081fe:	89bb      	ldrh	r3, [r7, #12]
 8008200:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008204:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800820c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008210:	b29b      	uxth	r3, r3
 8008212:	8013      	strh	r3, [r2, #0]
 8008214:	e01f      	b.n	8008256 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008228:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800822c:	81fb      	strh	r3, [r7, #14]
 800822e:	89fb      	ldrh	r3, [r7, #14]
 8008230:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008234:	81fb      	strh	r3, [r7, #14]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	441a      	add	r2, r3
 8008240:	89fb      	ldrh	r3, [r7, #14]
 8008242:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008246:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800824a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800824e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008252:	b29b      	uxth	r3, r3
 8008254:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3714      	adds	r7, #20
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	7b1b      	ldrb	r3, [r3, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f040 809d 	bne.w	80083b2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	785b      	ldrb	r3, [r3, #1]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d04c      	beq.n	800831a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	823b      	strh	r3, [r7, #16]
 800828e:	8a3b      	ldrh	r3, [r7, #16]
 8008290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01b      	beq.n	80082d0 <USB_EPClearStall+0x6c>
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ae:	81fb      	strh	r3, [r7, #14]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	441a      	add	r2, r3
 80082ba:	89fb      	ldrh	r3, [r7, #14]
 80082bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	78db      	ldrb	r3, [r3, #3]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d06c      	beq.n	80083b2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082ee:	81bb      	strh	r3, [r7, #12]
 80082f0:	89bb      	ldrh	r3, [r7, #12]
 80082f2:	f083 0320 	eor.w	r3, r3, #32
 80082f6:	81bb      	strh	r3, [r7, #12]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	441a      	add	r2, r3
 8008302:	89bb      	ldrh	r3, [r7, #12]
 8008304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800830c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008314:	b29b      	uxth	r3, r3
 8008316:	8013      	strh	r3, [r2, #0]
 8008318:	e04b      	b.n	80083b2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	82fb      	strh	r3, [r7, #22]
 8008328:	8afb      	ldrh	r3, [r7, #22]
 800832a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d01b      	beq.n	800836a <USB_EPClearStall+0x106>
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	b29b      	uxth	r3, r3
 8008340:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008344:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008348:	82bb      	strh	r3, [r7, #20]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	441a      	add	r2, r3
 8008354:	8abb      	ldrh	r3, [r7, #20]
 8008356:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800835a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800835e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008366:	b29b      	uxth	r3, r3
 8008368:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	b29b      	uxth	r3, r3
 8008378:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800837c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008380:	827b      	strh	r3, [r7, #18]
 8008382:	8a7b      	ldrh	r3, [r7, #18]
 8008384:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008388:	827b      	strh	r3, [r7, #18]
 800838a:	8a7b      	ldrh	r3, [r7, #18]
 800838c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008390:	827b      	strh	r3, [r7, #18]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	441a      	add	r2, r3
 800839c:	8a7b      	ldrh	r3, [r7, #18]
 800839e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	371c      	adds	r7, #28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80083cc:	78fb      	ldrb	r3, [r7, #3]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d103      	bne.n	80083da <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2280      	movs	r2, #128	@ 0x80
 80083d6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80083fe:	b480      	push	{r7}
 8008400:	b085      	sub	sp, #20
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800840c:	b29b      	uxth	r3, r3
 800840e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008410:	68fb      	ldr	r3, [r7, #12]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800841e:	b480      	push	{r7}
 8008420:	b08b      	sub	sp, #44	@ 0x2c
 8008422:	af00      	add	r7, sp, #0
 8008424:	60f8      	str	r0, [r7, #12]
 8008426:	60b9      	str	r1, [r7, #8]
 8008428:	4611      	mov	r1, r2
 800842a:	461a      	mov	r2, r3
 800842c:	460b      	mov	r3, r1
 800842e:	80fb      	strh	r3, [r7, #6]
 8008430:	4613      	mov	r3, r2
 8008432:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008434:	88bb      	ldrh	r3, [r7, #4]
 8008436:	3301      	adds	r3, #1
 8008438:	085b      	lsrs	r3, r3, #1
 800843a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008444:	88fb      	ldrh	r3, [r7, #6]
 8008446:	005a      	lsls	r2, r3, #1
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	4413      	add	r3, r2
 800844c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008450:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	627b      	str	r3, [r7, #36]	@ 0x24
 8008456:	e01e      	b.n	8008496 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	3301      	adds	r3, #1
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	b21a      	sxth	r2, r3
 8008468:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800846c:	4313      	orrs	r3, r2
 800846e:	b21b      	sxth	r3, r3
 8008470:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	8a7a      	ldrh	r2, [r7, #18]
 8008476:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	3302      	adds	r3, #2
 800847c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	3302      	adds	r3, #2
 8008482:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	3301      	adds	r3, #1
 8008488:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	3301      	adds	r3, #1
 800848e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008492:	3b01      	subs	r3, #1
 8008494:	627b      	str	r3, [r7, #36]	@ 0x24
 8008496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1dd      	bne.n	8008458 <USB_WritePMA+0x3a>
  }
}
 800849c:	bf00      	nop
 800849e:	bf00      	nop
 80084a0:	372c      	adds	r7, #44	@ 0x2c
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b08b      	sub	sp, #44	@ 0x2c
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	4611      	mov	r1, r2
 80084b6:	461a      	mov	r2, r3
 80084b8:	460b      	mov	r3, r1
 80084ba:	80fb      	strh	r3, [r7, #6]
 80084bc:	4613      	mov	r3, r2
 80084be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80084c0:	88bb      	ldrh	r3, [r7, #4]
 80084c2:	085b      	lsrs	r3, r3, #1
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80084d0:	88fb      	ldrh	r3, [r7, #6]
 80084d2:	005a      	lsls	r2, r3, #1
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084dc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80084e2:	e01b      	b.n	800851c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	3302      	adds	r3, #2
 80084f0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	3301      	adds	r3, #1
 80084fe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	0a1b      	lsrs	r3, r3, #8
 8008504:	b2da      	uxtb	r2, r3
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	3301      	adds	r3, #1
 800850e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	3302      	adds	r3, #2
 8008514:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008518:	3b01      	subs	r3, #1
 800851a:	627b      	str	r3, [r7, #36]	@ 0x24
 800851c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e0      	bne.n	80084e4 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008522:	88bb      	ldrh	r3, [r7, #4]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	b29b      	uxth	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d007      	beq.n	800853e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	b29b      	uxth	r3, r3
 8008534:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	b2da      	uxtb	r2, r3
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	701a      	strb	r2, [r3, #0]
  }
}
 800853e:	bf00      	nop
 8008540:	372c      	adds	r7, #44	@ 0x2c
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b084      	sub	sp, #16
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	460b      	mov	r3, r1
 8008554:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008556:	2300      	movs	r3, #0
 8008558:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	7c1b      	ldrb	r3, [r3, #16]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d115      	bne.n	800858e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008562:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008566:	2202      	movs	r2, #2
 8008568:	2181      	movs	r1, #129	@ 0x81
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f001 feb3 	bl	800a2d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008576:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800857a:	2202      	movs	r2, #2
 800857c:	2101      	movs	r1, #1
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f001 fea9 	bl	800a2d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800858c:	e012      	b.n	80085b4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800858e:	2340      	movs	r3, #64	@ 0x40
 8008590:	2202      	movs	r2, #2
 8008592:	2181      	movs	r1, #129	@ 0x81
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 fe9e 	bl	800a2d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80085a0:	2340      	movs	r3, #64	@ 0x40
 80085a2:	2202      	movs	r2, #2
 80085a4:	2101      	movs	r1, #1
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f001 fe95 	bl	800a2d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80085b4:	2308      	movs	r3, #8
 80085b6:	2203      	movs	r2, #3
 80085b8:	2182      	movs	r1, #130	@ 0x82
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f001 fe8b 	bl	800a2d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80085c6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80085ca:	f001 ffab 	bl	800a524 <USBD_static_malloc>
 80085ce:	4602      	mov	r2, r0
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d102      	bne.n	80085e6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80085e0:	2301      	movs	r3, #1
 80085e2:	73fb      	strb	r3, [r7, #15]
 80085e4:	e026      	b.n	8008634 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085ec:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2200      	movs	r2, #0
 8008604:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	7c1b      	ldrb	r3, [r3, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d109      	bne.n	8008624 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008616:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800861a:	2101      	movs	r1, #1
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 ff4b 	bl	800a4b8 <USBD_LL_PrepareReceive>
 8008622:	e007      	b.n	8008634 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800862a:	2340      	movs	r3, #64	@ 0x40
 800862c:	2101      	movs	r1, #1
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f001 ff42 	bl	800a4b8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008634:	7bfb      	ldrb	r3, [r7, #15]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800864e:	2181      	movs	r1, #129	@ 0x81
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 fe66 	bl	800a322 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800865c:	2101      	movs	r1, #1
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f001 fe5f 	bl	800a322 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800866c:	2182      	movs	r1, #130	@ 0x82
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f001 fe57 	bl	800a322 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00e      	beq.n	80086a2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008694:	4618      	mov	r0, r3
 8008696:	f001 ff53 	bl	800a540 <USBD_static_free>
    pdev->pClassData = NULL;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086bc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d039      	beq.n	800874a <USBD_CDC_Setup+0x9e>
 80086d6:	2b20      	cmp	r3, #32
 80086d8:	d17f      	bne.n	80087da <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	88db      	ldrh	r3, [r3, #6]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d029      	beq.n	8008736 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	b25b      	sxtb	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da11      	bge.n	8008710 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80086f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	88d2      	ldrh	r2, [r2, #6]
 80086fe:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008700:	6939      	ldr	r1, [r7, #16]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	88db      	ldrh	r3, [r3, #6]
 8008706:	461a      	mov	r2, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 fa0f 	bl	8009b2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800870e:	e06b      	b.n	80087e8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	785a      	ldrb	r2, [r3, #1]
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	88db      	ldrh	r3, [r3, #6]
 800871e:	b2da      	uxtb	r2, r3
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008726:	6939      	ldr	r1, [r7, #16]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	88db      	ldrh	r3, [r3, #6]
 800872c:	461a      	mov	r2, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f001 fa2a 	bl	8009b88 <USBD_CtlPrepareRx>
      break;
 8008734:	e058      	b.n	80087e8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	7850      	ldrb	r0, [r2, #1]
 8008742:	2200      	movs	r2, #0
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	4798      	blx	r3
      break;
 8008748:	e04e      	b.n	80087e8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	785b      	ldrb	r3, [r3, #1]
 800874e:	2b0b      	cmp	r3, #11
 8008750:	d02e      	beq.n	80087b0 <USBD_CDC_Setup+0x104>
 8008752:	2b0b      	cmp	r3, #11
 8008754:	dc38      	bgt.n	80087c8 <USBD_CDC_Setup+0x11c>
 8008756:	2b00      	cmp	r3, #0
 8008758:	d002      	beq.n	8008760 <USBD_CDC_Setup+0xb4>
 800875a:	2b0a      	cmp	r3, #10
 800875c:	d014      	beq.n	8008788 <USBD_CDC_Setup+0xdc>
 800875e:	e033      	b.n	80087c8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008766:	2b03      	cmp	r3, #3
 8008768:	d107      	bne.n	800877a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800876a:	f107 030c 	add.w	r3, r7, #12
 800876e:	2202      	movs	r2, #2
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f001 f9da 	bl	8009b2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008778:	e02e      	b.n	80087d8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 f96a 	bl	8009a56 <USBD_CtlError>
            ret = USBD_FAIL;
 8008782:	2302      	movs	r3, #2
 8008784:	75fb      	strb	r3, [r7, #23]
          break;
 8008786:	e027      	b.n	80087d8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800878e:	2b03      	cmp	r3, #3
 8008790:	d107      	bne.n	80087a2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008792:	f107 030f 	add.w	r3, r7, #15
 8008796:	2201      	movs	r2, #1
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f001 f9c6 	bl	8009b2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087a0:	e01a      	b.n	80087d8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 f956 	bl	8009a56 <USBD_CtlError>
            ret = USBD_FAIL;
 80087aa:	2302      	movs	r3, #2
 80087ac:	75fb      	strb	r3, [r7, #23]
          break;
 80087ae:	e013      	b.n	80087d8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d00d      	beq.n	80087d6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 f94a 	bl	8009a56 <USBD_CtlError>
            ret = USBD_FAIL;
 80087c2:	2302      	movs	r3, #2
 80087c4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80087c6:	e006      	b.n	80087d6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f001 f943 	bl	8009a56 <USBD_CtlError>
          ret = USBD_FAIL;
 80087d0:	2302      	movs	r3, #2
 80087d2:	75fb      	strb	r3, [r7, #23]
          break;
 80087d4:	e000      	b.n	80087d8 <USBD_CDC_Setup+0x12c>
          break;
 80087d6:	bf00      	nop
      }
      break;
 80087d8:	e006      	b.n	80087e8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 f93a 	bl	8009a56 <USBD_CtlError>
      ret = USBD_FAIL;
 80087e2:	2302      	movs	r3, #2
 80087e4:	75fb      	strb	r3, [r7, #23]
      break;
 80087e6:	bf00      	nop
  }

  return ret;
 80087e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	460b      	mov	r3, r1
 80087fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008804:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800880c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008814:	2b00      	cmp	r3, #0
 8008816:	d03a      	beq.n	800888e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008818:	78fa      	ldrb	r2, [r7, #3]
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	4613      	mov	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	440b      	add	r3, r1
 8008826:	331c      	adds	r3, #28
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d029      	beq.n	8008882 <USBD_CDC_DataIn+0x90>
 800882e:	78fa      	ldrb	r2, [r7, #3]
 8008830:	6879      	ldr	r1, [r7, #4]
 8008832:	4613      	mov	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	440b      	add	r3, r1
 800883c:	331c      	adds	r3, #28
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	78f9      	ldrb	r1, [r7, #3]
 8008842:	68b8      	ldr	r0, [r7, #8]
 8008844:	460b      	mov	r3, r1
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	440b      	add	r3, r1
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	4403      	add	r3, r0
 800884e:	3320      	adds	r3, #32
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	fbb2 f1f3 	udiv	r1, r2, r3
 8008856:	fb01 f303 	mul.w	r3, r1, r3
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d110      	bne.n	8008882 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008860:	78fa      	ldrb	r2, [r7, #3]
 8008862:	6879      	ldr	r1, [r7, #4]
 8008864:	4613      	mov	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	440b      	add	r3, r1
 800886e:	331c      	adds	r3, #28
 8008870:	2200      	movs	r2, #0
 8008872:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008874:	78f9      	ldrb	r1, [r7, #3]
 8008876:	2300      	movs	r3, #0
 8008878:	2200      	movs	r2, #0
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f001 fdf9 	bl	800a472 <USBD_LL_Transmit>
 8008880:	e003      	b.n	800888a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	e000      	b.n	8008890 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800888e:	2302      	movs	r3, #2
  }
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f001 fe24 	bl	800a4fe <USBD_LL_GetRxDataSize>
 80088b6:	4602      	mov	r2, r0
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00d      	beq.n	80088e4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80088dc:	4611      	mov	r1, r2
 80088de:	4798      	blx	r3

    return USBD_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	e000      	b.n	80088e6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80088e4:	2302      	movs	r3, #2
  }
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088fc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008904:	2b00      	cmp	r3, #0
 8008906:	d014      	beq.n	8008932 <USBD_CDC_EP0_RxReady+0x44>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800890e:	2bff      	cmp	r3, #255	@ 0xff
 8008910:	d00f      	beq.n	8008932 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008920:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008928:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	22ff      	movs	r2, #255	@ 0xff
 800892e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2243      	movs	r2, #67	@ 0x43
 8008948:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800894a:	4b03      	ldr	r3, [pc, #12]	@ (8008958 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800894c:	4618      	mov	r0, r3
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	20000094 	.word	0x20000094

0800895c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2243      	movs	r2, #67	@ 0x43
 8008968:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800896a:	4b03      	ldr	r3, [pc, #12]	@ (8008978 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	20000050 	.word	0x20000050

0800897c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2243      	movs	r2, #67	@ 0x43
 8008988:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800898a:	4b03      	ldr	r3, [pc, #12]	@ (8008998 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	200000d8 	.word	0x200000d8

0800899c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	220a      	movs	r2, #10
 80089a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80089aa:	4b03      	ldr	r3, [pc, #12]	@ (80089b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	2000000c 	.word	0x2000000c

080089bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80089c6:	2302      	movs	r3, #2
 80089c8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b087      	sub	sp, #28
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	60b9      	str	r1, [r7, #8]
 80089f4:	4613      	mov	r3, r2
 80089f6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089fe:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008a08:	88fa      	ldrh	r2, [r7, #6]
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	371c      	adds	r7, #28
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b085      	sub	sp, #20
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a2e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d01c      	beq.n	8008a9a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d115      	bne.n	8008a96 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	2181      	movs	r1, #129	@ 0x81
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f001 fcf0 	bl	800a472 <USBD_LL_Transmit>

      return USBD_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	e002      	b.n	8008a9c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e000      	b.n	8008a9c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008a9a:	2302      	movs	r3, #2
  }
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d017      	beq.n	8008aee <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	7c1b      	ldrb	r3, [r3, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d109      	bne.n	8008ada <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f001 fcf0 	bl	800a4b8 <USBD_LL_PrepareReceive>
 8008ad8:	e007      	b.n	8008aea <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ae0:	2340      	movs	r3, #64	@ 0x40
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 fce7 	bl	800a4b8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	e000      	b.n	8008af0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008aee:	2302      	movs	r3, #2
  }
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	4613      	mov	r3, r2
 8008b04:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	e01a      	b.n	8008b46 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d003      	beq.n	8008b30 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	79fa      	ldrb	r2, [r7, #7]
 8008b3c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f001 fb54 	bl	800a1ec <USBD_LL_Init>

  return USBD_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b085      	sub	sp, #20
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d006      	beq.n	8008b70 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	73fb      	strb	r3, [r7, #15]
 8008b6e:	e001      	b.n	8008b74 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008b70:	2302      	movs	r3, #2
 8008b72:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f001 fb88 	bl	800a2a0 <USBD_LL_Start>

  return USBD_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00c      	beq.n	8008be4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	78fa      	ldrb	r2, [r7, #3]
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	4798      	blx	r3
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b082      	sub	sp, #8
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	78fa      	ldrb	r2, [r7, #3]
 8008c04:	4611      	mov	r1, r2
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	4798      	blx	r3

  return USBD_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fedb 	bl	80099e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008c48:	f003 031f 	and.w	r3, r3, #31
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d016      	beq.n	8008c7e <USBD_LL_SetupStage+0x6a>
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d81c      	bhi.n	8008c8e <USBD_LL_SetupStage+0x7a>
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <USBD_LL_SetupStage+0x4a>
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d008      	beq.n	8008c6e <USBD_LL_SetupStage+0x5a>
 8008c5c:	e017      	b.n	8008c8e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f9ce 	bl	8009008 <USBD_StdDevReq>
      break;
 8008c6c:	e01a      	b.n	8008ca4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008c74:	4619      	mov	r1, r3
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fa30 	bl	80090dc <USBD_StdItfReq>
      break;
 8008c7c:	e012      	b.n	8008ca4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fa70 	bl	800916c <USBD_StdEPReq>
      break;
 8008c8c:	e00a      	b.n	8008ca4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008c94:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f001 fb5f 	bl	800a360 <USBD_LL_StallEP>
      break;
 8008ca2:	bf00      	nop
  }

  return USBD_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b086      	sub	sp, #24
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	607a      	str	r2, [r7, #4]
 8008cba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008cbc:	7afb      	ldrb	r3, [r7, #11]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d14b      	bne.n	8008d5a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008cc8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d134      	bne.n	8008d3e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d919      	bls.n	8008d14 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	68da      	ldr	r2, [r3, #12]
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	1ad2      	subs	r2, r2, r3
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	68da      	ldr	r2, [r3, #12]
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d203      	bcs.n	8008d02 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	e002      	b.n	8008d08 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	461a      	mov	r2, r3
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 ff59 	bl	8009bc4 <USBD_CtlContinueRx>
 8008d12:	e038      	b.n	8008d86 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00a      	beq.n	8008d36 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d105      	bne.n	8008d36 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 ff56 	bl	8009be8 <USBD_CtlSendStatus>
 8008d3c:	e023      	b.n	8008d86 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008d44:	2b05      	cmp	r3, #5
 8008d46:	d11e      	bne.n	8008d86 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008d50:	2100      	movs	r1, #0
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f001 fb04 	bl	800a360 <USBD_LL_StallEP>
 8008d58:	e015      	b.n	8008d86 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00d      	beq.n	8008d82 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d108      	bne.n	8008d82 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	7afa      	ldrb	r2, [r7, #11]
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	4798      	blx	r3
 8008d80:	e001      	b.n	8008d86 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d82:	2302      	movs	r3, #2
 8008d84:	e000      	b.n	8008d88 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	607a      	str	r2, [r7, #4]
 8008d9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008d9e:	7afb      	ldrb	r3, [r7, #11]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d17f      	bne.n	8008ea4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	3314      	adds	r3, #20
 8008da8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d15c      	bne.n	8008e6e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	68da      	ldr	r2, [r3, #12]
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d915      	bls.n	8008dec <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	1ad2      	subs	r2, r2, r3
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	6879      	ldr	r1, [r7, #4]
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f000 fec3 	bl	8009b64 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008dde:	2300      	movs	r3, #0
 8008de0:	2200      	movs	r2, #0
 8008de2:	2100      	movs	r1, #0
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f001 fb67 	bl	800a4b8 <USBD_LL_PrepareReceive>
 8008dea:	e04e      	b.n	8008e8a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	6912      	ldr	r2, [r2, #16]
 8008df4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008df8:	fb01 f202 	mul.w	r2, r1, r2
 8008dfc:	1a9b      	subs	r3, r3, r2
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d11c      	bne.n	8008e3c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d316      	bcc.n	8008e3c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	689a      	ldr	r2, [r3, #8]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d20f      	bcs.n	8008e3c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2100      	movs	r1, #0
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f000 fe9f 	bl	8009b64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2200      	movs	r2, #0
 8008e32:	2100      	movs	r1, #0
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f001 fb3f 	bl	800a4b8 <USBD_LL_PrepareReceive>
 8008e3a:	e026      	b.n	8008e8a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00a      	beq.n	8008e5e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d105      	bne.n	8008e5e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008e5e:	2180      	movs	r1, #128	@ 0x80
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f001 fa7d 	bl	800a360 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 fed1 	bl	8009c0e <USBD_CtlReceiveStatus>
 8008e6c:	e00d      	b.n	8008e8a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e74:	2b04      	cmp	r3, #4
 8008e76:	d004      	beq.n	8008e82 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d103      	bne.n	8008e8a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008e82:	2180      	movs	r1, #128	@ 0x80
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f001 fa6b 	bl	800a360 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d11d      	bne.n	8008ed0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f7ff fe80 	bl	8008b9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008ea2:	e015      	b.n	8008ed0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00d      	beq.n	8008ecc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008eb6:	2b03      	cmp	r3, #3
 8008eb8:	d108      	bne.n	8008ecc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	7afa      	ldrb	r2, [r7, #11]
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	4798      	blx	r3
 8008eca:	e001      	b.n	8008ed0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ecc:	2302      	movs	r3, #2
 8008ece:	e000      	b.n	8008ed2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b082      	sub	sp, #8
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ee2:	2340      	movs	r3, #64	@ 0x40
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f001 f9f4 	bl	800a2d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2240      	movs	r2, #64	@ 0x40
 8008efa:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008efe:	2340      	movs	r3, #64	@ 0x40
 8008f00:	2200      	movs	r2, #0
 8008f02:	2180      	movs	r1, #128	@ 0x80
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 f9e6 	bl	800a2d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2240      	movs	r2, #64	@ 0x40
 8008f14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d009      	beq.n	8008f52 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	6852      	ldr	r2, [r2, #4]
 8008f4a:	b2d2      	uxtb	r2, r2
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	4798      	blx	r3
  }

  return USBD_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2204      	movs	r2, #4
 8008f94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fb4:	2b04      	cmp	r3, #4
 8008fb6:	d105      	bne.n	8008fc4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d10b      	bne.n	8008ffc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ff6:	69db      	ldr	r3, [r3, #28]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
	...

08009008 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800901e:	2b40      	cmp	r3, #64	@ 0x40
 8009020:	d005      	beq.n	800902e <USBD_StdDevReq+0x26>
 8009022:	2b40      	cmp	r3, #64	@ 0x40
 8009024:	d84f      	bhi.n	80090c6 <USBD_StdDevReq+0xbe>
 8009026:	2b00      	cmp	r3, #0
 8009028:	d009      	beq.n	800903e <USBD_StdDevReq+0x36>
 800902a:	2b20      	cmp	r3, #32
 800902c:	d14b      	bne.n	80090c6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	4798      	blx	r3
      break;
 800903c:	e048      	b.n	80090d0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	785b      	ldrb	r3, [r3, #1]
 8009042:	2b09      	cmp	r3, #9
 8009044:	d839      	bhi.n	80090ba <USBD_StdDevReq+0xb2>
 8009046:	a201      	add	r2, pc, #4	@ (adr r2, 800904c <USBD_StdDevReq+0x44>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	0800909d 	.word	0x0800909d
 8009050:	080090b1 	.word	0x080090b1
 8009054:	080090bb 	.word	0x080090bb
 8009058:	080090a7 	.word	0x080090a7
 800905c:	080090bb 	.word	0x080090bb
 8009060:	0800907f 	.word	0x0800907f
 8009064:	08009075 	.word	0x08009075
 8009068:	080090bb 	.word	0x080090bb
 800906c:	08009093 	.word	0x08009093
 8009070:	08009089 	.word	0x08009089
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f9dc 	bl	8009434 <USBD_GetDescriptor>
          break;
 800907c:	e022      	b.n	80090c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fb3f 	bl	8009704 <USBD_SetAddress>
          break;
 8009086:	e01d      	b.n	80090c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fb7e 	bl	800978c <USBD_SetConfig>
          break;
 8009090:	e018      	b.n	80090c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fc07 	bl	80098a8 <USBD_GetConfig>
          break;
 800909a:	e013      	b.n	80090c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fc37 	bl	8009912 <USBD_GetStatus>
          break;
 80090a4:	e00e      	b.n	80090c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fc65 	bl	8009978 <USBD_SetFeature>
          break;
 80090ae:	e009      	b.n	80090c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fc74 	bl	80099a0 <USBD_ClrFeature>
          break;
 80090b8:	e004      	b.n	80090c4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fcca 	bl	8009a56 <USBD_CtlError>
          break;
 80090c2:	bf00      	nop
      }
      break;
 80090c4:	e004      	b.n	80090d0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fcc4 	bl	8009a56 <USBD_CtlError>
      break;
 80090ce:	bf00      	nop
  }

  return ret;
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop

080090dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090f2:	2b40      	cmp	r3, #64	@ 0x40
 80090f4:	d005      	beq.n	8009102 <USBD_StdItfReq+0x26>
 80090f6:	2b40      	cmp	r3, #64	@ 0x40
 80090f8:	d82e      	bhi.n	8009158 <USBD_StdItfReq+0x7c>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <USBD_StdItfReq+0x26>
 80090fe:	2b20      	cmp	r3, #32
 8009100:	d12a      	bne.n	8009158 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009108:	3b01      	subs	r3, #1
 800910a:	2b02      	cmp	r3, #2
 800910c:	d81d      	bhi.n	800914a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	889b      	ldrh	r3, [r3, #4]
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b01      	cmp	r3, #1
 8009116:	d813      	bhi.n	8009140 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	4798      	blx	r3
 8009126:	4603      	mov	r3, r0
 8009128:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	88db      	ldrh	r3, [r3, #6]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d110      	bne.n	8009154 <USBD_StdItfReq+0x78>
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10d      	bne.n	8009154 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fd55 	bl	8009be8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800913e:	e009      	b.n	8009154 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fc87 	bl	8009a56 <USBD_CtlError>
          break;
 8009148:	e004      	b.n	8009154 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fc82 	bl	8009a56 <USBD_CtlError>
          break;
 8009152:	e000      	b.n	8009156 <USBD_StdItfReq+0x7a>
          break;
 8009154:	bf00      	nop
      }
      break;
 8009156:	e004      	b.n	8009162 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fc7b 	bl	8009a56 <USBD_CtlError>
      break;
 8009160:	bf00      	nop
  }

  return USBD_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	889b      	ldrh	r3, [r3, #4]
 800917e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009188:	2b40      	cmp	r3, #64	@ 0x40
 800918a:	d007      	beq.n	800919c <USBD_StdEPReq+0x30>
 800918c:	2b40      	cmp	r3, #64	@ 0x40
 800918e:	f200 8146 	bhi.w	800941e <USBD_StdEPReq+0x2b2>
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00a      	beq.n	80091ac <USBD_StdEPReq+0x40>
 8009196:	2b20      	cmp	r3, #32
 8009198:	f040 8141 	bne.w	800941e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	4798      	blx	r3
      break;
 80091aa:	e13d      	b.n	8009428 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091b4:	2b20      	cmp	r3, #32
 80091b6:	d10a      	bne.n	80091ce <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	4798      	blx	r3
 80091c6:	4603      	mov	r3, r0
 80091c8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	e12d      	b.n	800942a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	785b      	ldrb	r3, [r3, #1]
 80091d2:	2b03      	cmp	r3, #3
 80091d4:	d007      	beq.n	80091e6 <USBD_StdEPReq+0x7a>
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	f300 811b 	bgt.w	8009412 <USBD_StdEPReq+0x2a6>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d072      	beq.n	80092c6 <USBD_StdEPReq+0x15a>
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d03a      	beq.n	800925a <USBD_StdEPReq+0xee>
 80091e4:	e115      	b.n	8009412 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d002      	beq.n	80091f6 <USBD_StdEPReq+0x8a>
 80091f0:	2b03      	cmp	r3, #3
 80091f2:	d015      	beq.n	8009220 <USBD_StdEPReq+0xb4>
 80091f4:	e02b      	b.n	800924e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091f6:	7bbb      	ldrb	r3, [r7, #14]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00c      	beq.n	8009216 <USBD_StdEPReq+0xaa>
 80091fc:	7bbb      	ldrb	r3, [r7, #14]
 80091fe:	2b80      	cmp	r3, #128	@ 0x80
 8009200:	d009      	beq.n	8009216 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009202:	7bbb      	ldrb	r3, [r7, #14]
 8009204:	4619      	mov	r1, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f001 f8aa 	bl	800a360 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800920c:	2180      	movs	r1, #128	@ 0x80
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 f8a6 	bl	800a360 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009214:	e020      	b.n	8009258 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fc1c 	bl	8009a56 <USBD_CtlError>
              break;
 800921e:	e01b      	b.n	8009258 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	885b      	ldrh	r3, [r3, #2]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10e      	bne.n	8009246 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00b      	beq.n	8009246 <USBD_StdEPReq+0xda>
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	2b80      	cmp	r3, #128	@ 0x80
 8009232:	d008      	beq.n	8009246 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	88db      	ldrh	r3, [r3, #6]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800923c:	7bbb      	ldrb	r3, [r7, #14]
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 f88d 	bl	800a360 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fcce 	bl	8009be8 <USBD_CtlSendStatus>

              break;
 800924c:	e004      	b.n	8009258 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fc00 	bl	8009a56 <USBD_CtlError>
              break;
 8009256:	bf00      	nop
          }
          break;
 8009258:	e0e0      	b.n	800941c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009260:	2b02      	cmp	r3, #2
 8009262:	d002      	beq.n	800926a <USBD_StdEPReq+0xfe>
 8009264:	2b03      	cmp	r3, #3
 8009266:	d015      	beq.n	8009294 <USBD_StdEPReq+0x128>
 8009268:	e026      	b.n	80092b8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800926a:	7bbb      	ldrb	r3, [r7, #14]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00c      	beq.n	800928a <USBD_StdEPReq+0x11e>
 8009270:	7bbb      	ldrb	r3, [r7, #14]
 8009272:	2b80      	cmp	r3, #128	@ 0x80
 8009274:	d009      	beq.n	800928a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009276:	7bbb      	ldrb	r3, [r7, #14]
 8009278:	4619      	mov	r1, r3
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f001 f870 	bl	800a360 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009280:	2180      	movs	r1, #128	@ 0x80
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f001 f86c 	bl	800a360 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009288:	e01c      	b.n	80092c4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fbe2 	bl	8009a56 <USBD_CtlError>
              break;
 8009292:	e017      	b.n	80092c4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	885b      	ldrh	r3, [r3, #2]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d112      	bne.n	80092c2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800929c:	7bbb      	ldrb	r3, [r7, #14]
 800929e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d004      	beq.n	80092b0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f001 f877 	bl	800a39e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fc99 	bl	8009be8 <USBD_CtlSendStatus>
              }
              break;
 80092b6:	e004      	b.n	80092c2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fbcb 	bl	8009a56 <USBD_CtlError>
              break;
 80092c0:	e000      	b.n	80092c4 <USBD_StdEPReq+0x158>
              break;
 80092c2:	bf00      	nop
          }
          break;
 80092c4:	e0aa      	b.n	800941c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d002      	beq.n	80092d6 <USBD_StdEPReq+0x16a>
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d032      	beq.n	800933a <USBD_StdEPReq+0x1ce>
 80092d4:	e097      	b.n	8009406 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092d6:	7bbb      	ldrb	r3, [r7, #14]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d007      	beq.n	80092ec <USBD_StdEPReq+0x180>
 80092dc:	7bbb      	ldrb	r3, [r7, #14]
 80092de:	2b80      	cmp	r3, #128	@ 0x80
 80092e0:	d004      	beq.n	80092ec <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fbb6 	bl	8009a56 <USBD_CtlError>
                break;
 80092ea:	e091      	b.n	8009410 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	da0b      	bge.n	800930c <USBD_StdEPReq+0x1a0>
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
 80092f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80092fa:	4613      	mov	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	3310      	adds	r3, #16
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	4413      	add	r3, r2
 8009308:	3304      	adds	r3, #4
 800930a:	e00b      	b.n	8009324 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009312:	4613      	mov	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	4413      	add	r3, r2
 8009322:	3304      	adds	r3, #4
 8009324:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	2200      	movs	r2, #0
 800932a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2202      	movs	r2, #2
 8009330:	4619      	mov	r1, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fbfa 	bl	8009b2c <USBD_CtlSendData>
              break;
 8009338:	e06a      	b.n	8009410 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800933a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800933e:	2b00      	cmp	r3, #0
 8009340:	da11      	bge.n	8009366 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009342:	7bbb      	ldrb	r3, [r7, #14]
 8009344:	f003 020f 	and.w	r2, r3, #15
 8009348:	6879      	ldr	r1, [r7, #4]
 800934a:	4613      	mov	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	4413      	add	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	440b      	add	r3, r1
 8009354:	3318      	adds	r3, #24
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d117      	bne.n	800938c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fb79 	bl	8009a56 <USBD_CtlError>
                  break;
 8009364:	e054      	b.n	8009410 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009366:	7bbb      	ldrb	r3, [r7, #14]
 8009368:	f003 020f 	and.w	r2, r3, #15
 800936c:	6879      	ldr	r1, [r7, #4]
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	440b      	add	r3, r1
 8009378:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d104      	bne.n	800938c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fb66 	bl	8009a56 <USBD_CtlError>
                  break;
 800938a:	e041      	b.n	8009410 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800938c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009390:	2b00      	cmp	r3, #0
 8009392:	da0b      	bge.n	80093ac <USBD_StdEPReq+0x240>
 8009394:	7bbb      	ldrb	r3, [r7, #14]
 8009396:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800939a:	4613      	mov	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	3310      	adds	r3, #16
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	4413      	add	r3, r2
 80093a8:	3304      	adds	r3, #4
 80093aa:	e00b      	b.n	80093c4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
 80093ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093b2:	4613      	mov	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	4413      	add	r3, r2
 80093c2:	3304      	adds	r3, #4
 80093c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80093c6:	7bbb      	ldrb	r3, [r7, #14]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d002      	beq.n	80093d2 <USBD_StdEPReq+0x266>
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
 80093ce:	2b80      	cmp	r3, #128	@ 0x80
 80093d0:	d103      	bne.n	80093da <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2200      	movs	r2, #0
 80093d6:	601a      	str	r2, [r3, #0]
 80093d8:	e00e      	b.n	80093f8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80093da:	7bbb      	ldrb	r3, [r7, #14]
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fffc 	bl	800a3dc <USBD_LL_IsStallEP>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	2201      	movs	r2, #1
 80093ee:	601a      	str	r2, [r3, #0]
 80093f0:	e002      	b.n	80093f8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2200      	movs	r2, #0
 80093f6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	2202      	movs	r2, #2
 80093fc:	4619      	mov	r1, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fb94 	bl	8009b2c <USBD_CtlSendData>
              break;
 8009404:	e004      	b.n	8009410 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fb24 	bl	8009a56 <USBD_CtlError>
              break;
 800940e:	bf00      	nop
          }
          break;
 8009410:	e004      	b.n	800941c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fb1e 	bl	8009a56 <USBD_CtlError>
          break;
 800941a:	bf00      	nop
      }
      break;
 800941c:	e004      	b.n	8009428 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fb18 	bl	8009a56 <USBD_CtlError>
      break;
 8009426:	bf00      	nop
  }

  return ret;
 8009428:	7bfb      	ldrb	r3, [r7, #15]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
	...

08009434 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009442:	2300      	movs	r3, #0
 8009444:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009446:	2300      	movs	r3, #0
 8009448:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	885b      	ldrh	r3, [r3, #2]
 800944e:	0a1b      	lsrs	r3, r3, #8
 8009450:	b29b      	uxth	r3, r3
 8009452:	3b01      	subs	r3, #1
 8009454:	2b06      	cmp	r3, #6
 8009456:	f200 8128 	bhi.w	80096aa <USBD_GetDescriptor+0x276>
 800945a:	a201      	add	r2, pc, #4	@ (adr r2, 8009460 <USBD_GetDescriptor+0x2c>)
 800945c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009460:	0800947d 	.word	0x0800947d
 8009464:	08009495 	.word	0x08009495
 8009468:	080094d5 	.word	0x080094d5
 800946c:	080096ab 	.word	0x080096ab
 8009470:	080096ab 	.word	0x080096ab
 8009474:	0800964b 	.word	0x0800964b
 8009478:	08009677 	.word	0x08009677
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	7c12      	ldrb	r2, [r2, #16]
 8009488:	f107 0108 	add.w	r1, r7, #8
 800948c:	4610      	mov	r0, r2
 800948e:	4798      	blx	r3
 8009490:	60f8      	str	r0, [r7, #12]
      break;
 8009492:	e112      	b.n	80096ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	7c1b      	ldrb	r3, [r3, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10d      	bne.n	80094b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a4:	f107 0208 	add.w	r2, r7, #8
 80094a8:	4610      	mov	r0, r2
 80094aa:	4798      	blx	r3
 80094ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3301      	adds	r3, #1
 80094b2:	2202      	movs	r2, #2
 80094b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80094b6:	e100      	b.n	80096ba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c0:	f107 0208 	add.w	r2, r7, #8
 80094c4:	4610      	mov	r0, r2
 80094c6:	4798      	blx	r3
 80094c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3301      	adds	r3, #1
 80094ce:	2202      	movs	r2, #2
 80094d0:	701a      	strb	r2, [r3, #0]
      break;
 80094d2:	e0f2      	b.n	80096ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	885b      	ldrh	r3, [r3, #2]
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b05      	cmp	r3, #5
 80094dc:	f200 80ac 	bhi.w	8009638 <USBD_GetDescriptor+0x204>
 80094e0:	a201      	add	r2, pc, #4	@ (adr r2, 80094e8 <USBD_GetDescriptor+0xb4>)
 80094e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e6:	bf00      	nop
 80094e8:	08009501 	.word	0x08009501
 80094ec:	08009535 	.word	0x08009535
 80094f0:	08009569 	.word	0x08009569
 80094f4:	0800959d 	.word	0x0800959d
 80094f8:	080095d1 	.word	0x080095d1
 80094fc:	08009605 	.word	0x08009605
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00b      	beq.n	8009524 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	7c12      	ldrb	r2, [r2, #16]
 8009518:	f107 0108 	add.w	r1, r7, #8
 800951c:	4610      	mov	r0, r2
 800951e:	4798      	blx	r3
 8009520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009522:	e091      	b.n	8009648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fa95 	bl	8009a56 <USBD_CtlError>
            err++;
 800952c:	7afb      	ldrb	r3, [r7, #11]
 800952e:	3301      	adds	r3, #1
 8009530:	72fb      	strb	r3, [r7, #11]
          break;
 8009532:	e089      	b.n	8009648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00b      	beq.n	8009558 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	7c12      	ldrb	r2, [r2, #16]
 800954c:	f107 0108 	add.w	r1, r7, #8
 8009550:	4610      	mov	r0, r2
 8009552:	4798      	blx	r3
 8009554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009556:	e077      	b.n	8009648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009558:	6839      	ldr	r1, [r7, #0]
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fa7b 	bl	8009a56 <USBD_CtlError>
            err++;
 8009560:	7afb      	ldrb	r3, [r7, #11]
 8009562:	3301      	adds	r3, #1
 8009564:	72fb      	strb	r3, [r7, #11]
          break;
 8009566:	e06f      	b.n	8009648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00b      	beq.n	800958c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	7c12      	ldrb	r2, [r2, #16]
 8009580:	f107 0108 	add.w	r1, r7, #8
 8009584:	4610      	mov	r0, r2
 8009586:	4798      	blx	r3
 8009588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800958a:	e05d      	b.n	8009648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800958c:	6839      	ldr	r1, [r7, #0]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fa61 	bl	8009a56 <USBD_CtlError>
            err++;
 8009594:	7afb      	ldrb	r3, [r7, #11]
 8009596:	3301      	adds	r3, #1
 8009598:	72fb      	strb	r3, [r7, #11]
          break;
 800959a:	e055      	b.n	8009648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00b      	beq.n	80095c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	7c12      	ldrb	r2, [r2, #16]
 80095b4:	f107 0108 	add.w	r1, r7, #8
 80095b8:	4610      	mov	r0, r2
 80095ba:	4798      	blx	r3
 80095bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095be:	e043      	b.n	8009648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fa47 	bl	8009a56 <USBD_CtlError>
            err++;
 80095c8:	7afb      	ldrb	r3, [r7, #11]
 80095ca:	3301      	adds	r3, #1
 80095cc:	72fb      	strb	r3, [r7, #11]
          break;
 80095ce:	e03b      	b.n	8009648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00b      	beq.n	80095f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80095e2:	695b      	ldr	r3, [r3, #20]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	7c12      	ldrb	r2, [r2, #16]
 80095e8:	f107 0108 	add.w	r1, r7, #8
 80095ec:	4610      	mov	r0, r2
 80095ee:	4798      	blx	r3
 80095f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095f2:	e029      	b.n	8009648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fa2d 	bl	8009a56 <USBD_CtlError>
            err++;
 80095fc:	7afb      	ldrb	r3, [r7, #11]
 80095fe:	3301      	adds	r3, #1
 8009600:	72fb      	strb	r3, [r7, #11]
          break;
 8009602:	e021      	b.n	8009648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00b      	beq.n	8009628 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	7c12      	ldrb	r2, [r2, #16]
 800961c:	f107 0108 	add.w	r1, r7, #8
 8009620:	4610      	mov	r0, r2
 8009622:	4798      	blx	r3
 8009624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009626:	e00f      	b.n	8009648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fa13 	bl	8009a56 <USBD_CtlError>
            err++;
 8009630:	7afb      	ldrb	r3, [r7, #11]
 8009632:	3301      	adds	r3, #1
 8009634:	72fb      	strb	r3, [r7, #11]
          break;
 8009636:	e007      	b.n	8009648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fa0b 	bl	8009a56 <USBD_CtlError>
          err++;
 8009640:	7afb      	ldrb	r3, [r7, #11]
 8009642:	3301      	adds	r3, #1
 8009644:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009646:	e038      	b.n	80096ba <USBD_GetDescriptor+0x286>
 8009648:	e037      	b.n	80096ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	7c1b      	ldrb	r3, [r3, #16]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d109      	bne.n	8009666 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800965a:	f107 0208 	add.w	r2, r7, #8
 800965e:	4610      	mov	r0, r2
 8009660:	4798      	blx	r3
 8009662:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009664:	e029      	b.n	80096ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f9f4 	bl	8009a56 <USBD_CtlError>
        err++;
 800966e:	7afb      	ldrb	r3, [r7, #11]
 8009670:	3301      	adds	r3, #1
 8009672:	72fb      	strb	r3, [r7, #11]
      break;
 8009674:	e021      	b.n	80096ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	7c1b      	ldrb	r3, [r3, #16]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10d      	bne.n	800969a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009686:	f107 0208 	add.w	r2, r7, #8
 800968a:	4610      	mov	r0, r2
 800968c:	4798      	blx	r3
 800968e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	3301      	adds	r3, #1
 8009694:	2207      	movs	r2, #7
 8009696:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009698:	e00f      	b.n	80096ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 f9da 	bl	8009a56 <USBD_CtlError>
        err++;
 80096a2:	7afb      	ldrb	r3, [r7, #11]
 80096a4:	3301      	adds	r3, #1
 80096a6:	72fb      	strb	r3, [r7, #11]
      break;
 80096a8:	e007      	b.n	80096ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f9d2 	bl	8009a56 <USBD_CtlError>
      err++;
 80096b2:	7afb      	ldrb	r3, [r7, #11]
 80096b4:	3301      	adds	r3, #1
 80096b6:	72fb      	strb	r3, [r7, #11]
      break;
 80096b8:	bf00      	nop
  }

  if (err != 0U)
 80096ba:	7afb      	ldrb	r3, [r7, #11]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d11c      	bne.n	80096fa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80096c0:	893b      	ldrh	r3, [r7, #8]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d011      	beq.n	80096ea <USBD_GetDescriptor+0x2b6>
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	88db      	ldrh	r3, [r3, #6]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00d      	beq.n	80096ea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	88da      	ldrh	r2, [r3, #6]
 80096d2:	893b      	ldrh	r3, [r7, #8]
 80096d4:	4293      	cmp	r3, r2
 80096d6:	bf28      	it	cs
 80096d8:	4613      	movcs	r3, r2
 80096da:	b29b      	uxth	r3, r3
 80096dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80096de:	893b      	ldrh	r3, [r7, #8]
 80096e0:	461a      	mov	r2, r3
 80096e2:	68f9      	ldr	r1, [r7, #12]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fa21 	bl	8009b2c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	88db      	ldrh	r3, [r3, #6]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d104      	bne.n	80096fc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fa78 	bl	8009be8 <USBD_CtlSendStatus>
 80096f8:	e000      	b.n	80096fc <USBD_GetDescriptor+0x2c8>
    return;
 80096fa:	bf00      	nop
    }
  }
}
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop

08009704 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	889b      	ldrh	r3, [r3, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d130      	bne.n	8009778 <USBD_SetAddress+0x74>
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	88db      	ldrh	r3, [r3, #6]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d12c      	bne.n	8009778 <USBD_SetAddress+0x74>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	885b      	ldrh	r3, [r3, #2]
 8009722:	2b7f      	cmp	r3, #127	@ 0x7f
 8009724:	d828      	bhi.n	8009778 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	885b      	ldrh	r3, [r3, #2]
 800972a:	b2db      	uxtb	r3, r3
 800972c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009730:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009738:	2b03      	cmp	r3, #3
 800973a:	d104      	bne.n	8009746 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f989 	bl	8009a56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009744:	e01d      	b.n	8009782 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	7bfa      	ldrb	r2, [r7, #15]
 800974a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800974e:	7bfb      	ldrb	r3, [r7, #15]
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fe6e 	bl	800a434 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fa45 	bl	8009be8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800975e:	7bfb      	ldrb	r3, [r7, #15]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d004      	beq.n	800976e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2202      	movs	r2, #2
 8009768:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800976c:	e009      	b.n	8009782 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009776:	e004      	b.n	8009782 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f96b 	bl	8009a56 <USBD_CtlError>
  }
}
 8009780:	bf00      	nop
 8009782:	bf00      	nop
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	885b      	ldrh	r3, [r3, #2]
 800979a:	b2da      	uxtb	r2, r3
 800979c:	4b41      	ldr	r3, [pc, #260]	@ (80098a4 <USBD_SetConfig+0x118>)
 800979e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80097a0:	4b40      	ldr	r3, [pc, #256]	@ (80098a4 <USBD_SetConfig+0x118>)
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d904      	bls.n	80097b2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f953 	bl	8009a56 <USBD_CtlError>
 80097b0:	e075      	b.n	800989e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d002      	beq.n	80097c2 <USBD_SetConfig+0x36>
 80097bc:	2b03      	cmp	r3, #3
 80097be:	d023      	beq.n	8009808 <USBD_SetConfig+0x7c>
 80097c0:	e062      	b.n	8009888 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80097c2:	4b38      	ldr	r3, [pc, #224]	@ (80098a4 <USBD_SetConfig+0x118>)
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d01a      	beq.n	8009800 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80097ca:	4b36      	ldr	r3, [pc, #216]	@ (80098a4 <USBD_SetConfig+0x118>)
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2203      	movs	r2, #3
 80097d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80097dc:	4b31      	ldr	r3, [pc, #196]	@ (80098a4 <USBD_SetConfig+0x118>)
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	4619      	mov	r1, r3
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7ff f9e4 	bl	8008bb0 <USBD_SetClassConfig>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d104      	bne.n	80097f8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f930 	bl	8009a56 <USBD_CtlError>
            return;
 80097f6:	e052      	b.n	800989e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f9f5 	bl	8009be8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80097fe:	e04e      	b.n	800989e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f9f1 	bl	8009be8 <USBD_CtlSendStatus>
        break;
 8009806:	e04a      	b.n	800989e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009808:	4b26      	ldr	r3, [pc, #152]	@ (80098a4 <USBD_SetConfig+0x118>)
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d112      	bne.n	8009836 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2202      	movs	r2, #2
 8009814:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009818:	4b22      	ldr	r3, [pc, #136]	@ (80098a4 <USBD_SetConfig+0x118>)
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	461a      	mov	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009822:	4b20      	ldr	r3, [pc, #128]	@ (80098a4 <USBD_SetConfig+0x118>)
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff f9e0 	bl	8008bee <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f9da 	bl	8009be8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009834:	e033      	b.n	800989e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009836:	4b1b      	ldr	r3, [pc, #108]	@ (80098a4 <USBD_SetConfig+0x118>)
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	461a      	mov	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	429a      	cmp	r2, r3
 8009842:	d01d      	beq.n	8009880 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	b2db      	uxtb	r3, r3
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff f9ce 	bl	8008bee <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009852:	4b14      	ldr	r3, [pc, #80]	@ (80098a4 <USBD_SetConfig+0x118>)
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	461a      	mov	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800985c:	4b11      	ldr	r3, [pc, #68]	@ (80098a4 <USBD_SetConfig+0x118>)
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	4619      	mov	r1, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7ff f9a4 	bl	8008bb0 <USBD_SetClassConfig>
 8009868:	4603      	mov	r3, r0
 800986a:	2b02      	cmp	r3, #2
 800986c:	d104      	bne.n	8009878 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f8f0 	bl	8009a56 <USBD_CtlError>
            return;
 8009876:	e012      	b.n	800989e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f9b5 	bl	8009be8 <USBD_CtlSendStatus>
        break;
 800987e:	e00e      	b.n	800989e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f9b1 	bl	8009be8 <USBD_CtlSendStatus>
        break;
 8009886:	e00a      	b.n	800989e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f8e3 	bl	8009a56 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009890:	4b04      	ldr	r3, [pc, #16]	@ (80098a4 <USBD_SetConfig+0x118>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	4619      	mov	r1, r3
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7ff f9a9 	bl	8008bee <USBD_ClrClassConfig>
        break;
 800989c:	bf00      	nop
    }
  }
}
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	20000334 	.word	0x20000334

080098a8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	88db      	ldrh	r3, [r3, #6]
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d004      	beq.n	80098c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f8ca 	bl	8009a56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80098c2:	e022      	b.n	800990a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	dc02      	bgt.n	80098d4 <USBD_GetConfig+0x2c>
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	dc03      	bgt.n	80098da <USBD_GetConfig+0x32>
 80098d2:	e015      	b.n	8009900 <USBD_GetConfig+0x58>
 80098d4:	2b03      	cmp	r3, #3
 80098d6:	d00b      	beq.n	80098f0 <USBD_GetConfig+0x48>
 80098d8:	e012      	b.n	8009900 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3308      	adds	r3, #8
 80098e4:	2201      	movs	r2, #1
 80098e6:	4619      	mov	r1, r3
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f91f 	bl	8009b2c <USBD_CtlSendData>
        break;
 80098ee:	e00c      	b.n	800990a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	3304      	adds	r3, #4
 80098f4:	2201      	movs	r2, #1
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f917 	bl	8009b2c <USBD_CtlSendData>
        break;
 80098fe:	e004      	b.n	800990a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009900:	6839      	ldr	r1, [r7, #0]
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 f8a7 	bl	8009a56 <USBD_CtlError>
        break;
 8009908:	bf00      	nop
}
 800990a:	bf00      	nop
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009922:	3b01      	subs	r3, #1
 8009924:	2b02      	cmp	r3, #2
 8009926:	d81e      	bhi.n	8009966 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	88db      	ldrh	r3, [r3, #6]
 800992c:	2b02      	cmp	r3, #2
 800992e:	d004      	beq.n	800993a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f88f 	bl	8009a56 <USBD_CtlError>
        break;
 8009938:	e01a      	b.n	8009970 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2201      	movs	r2, #1
 800993e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009946:	2b00      	cmp	r3, #0
 8009948:	d005      	beq.n	8009956 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	f043 0202 	orr.w	r2, r3, #2
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	330c      	adds	r3, #12
 800995a:	2202      	movs	r2, #2
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f8e4 	bl	8009b2c <USBD_CtlSendData>
      break;
 8009964:	e004      	b.n	8009970 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f874 	bl	8009a56 <USBD_CtlError>
      break;
 800996e:	bf00      	nop
  }
}
 8009970:	bf00      	nop
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	885b      	ldrh	r3, [r3, #2]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d106      	bne.n	8009998 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f928 	bl	8009be8 <USBD_CtlSendStatus>
  }
}
 8009998:	bf00      	nop
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099b0:	3b01      	subs	r3, #1
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d80b      	bhi.n	80099ce <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	885b      	ldrh	r3, [r3, #2]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d10c      	bne.n	80099d8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f90e 	bl	8009be8 <USBD_CtlSendStatus>
      }
      break;
 80099cc:	e004      	b.n	80099d8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f840 	bl	8009a56 <USBD_CtlError>
      break;
 80099d6:	e000      	b.n	80099da <USBD_ClrFeature+0x3a>
      break;
 80099d8:	bf00      	nop
  }
}
 80099da:	bf00      	nop
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80099e2:	b480      	push	{r7}
 80099e4:	b083      	sub	sp, #12
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781a      	ldrb	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	785a      	ldrb	r2, [r3, #1]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	3302      	adds	r3, #2
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	461a      	mov	r2, r3
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	3303      	adds	r3, #3
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	021b      	lsls	r3, r3, #8
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	4413      	add	r3, r2
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	3304      	adds	r3, #4
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	3305      	adds	r3, #5
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	021b      	lsls	r3, r3, #8
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	4413      	add	r3, r2
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	3306      	adds	r3, #6
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	3307      	adds	r3, #7
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	021b      	lsls	r3, r3, #8
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	4413      	add	r3, r2
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	80da      	strh	r2, [r3, #6]

}
 8009a4a:	bf00      	nop
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009a60:	2180      	movs	r1, #128	@ 0x80
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fc7c 	bl	800a360 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009a68:	2100      	movs	r1, #0
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fc78 	bl	800a360 <USBD_LL_StallEP>
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d032      	beq.n	8009af4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 f834 	bl	8009afc <USBD_GetLen>
 8009a94:	4603      	mov	r3, r0
 8009a96:	3301      	adds	r3, #1
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	75fa      	strb	r2, [r7, #23]
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	4413      	add	r3, r2
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	7812      	ldrb	r2, [r2, #0]
 8009ab2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009ab4:	7dfb      	ldrb	r3, [r7, #23]
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	75fa      	strb	r2, [r7, #23]
 8009aba:	461a      	mov	r2, r3
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	4413      	add	r3, r2
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009ac4:	e012      	b.n	8009aec <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	1c5a      	adds	r2, r3, #1
 8009aca:	60fa      	str	r2, [r7, #12]
 8009acc:	7dfa      	ldrb	r2, [r7, #23]
 8009ace:	1c51      	adds	r1, r2, #1
 8009ad0:	75f9      	strb	r1, [r7, #23]
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	440a      	add	r2, r1
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009adc:	7dfb      	ldrb	r3, [r7, #23]
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	75fa      	strb	r2, [r7, #23]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	2200      	movs	r2, #0
 8009aea:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1e8      	bne.n	8009ac6 <USBD_GetString+0x4e>
    }
  }
}
 8009af4:	bf00      	nop
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009b08:	e005      	b.n	8009b16 <USBD_GetLen+0x1a>
  {
    len++;
 8009b0a:	7bfb      	ldrb	r3, [r7, #15]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	3301      	adds	r3, #1
 8009b14:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1f5      	bne.n	8009b0a <USBD_GetLen+0xe>
  }

  return len;
 8009b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	4613      	mov	r3, r2
 8009b38:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009b42:	88fa      	ldrh	r2, [r7, #6]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009b48:	88fa      	ldrh	r2, [r7, #6]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b4e:	88fb      	ldrh	r3, [r7, #6]
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	2100      	movs	r1, #0
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f000 fc8c 	bl	800a472 <USBD_LL_Transmit>

  return USBD_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b72:	88fb      	ldrh	r3, [r7, #6]
 8009b74:	68ba      	ldr	r2, [r7, #8]
 8009b76:	2100      	movs	r1, #0
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 fc7a 	bl	800a472 <USBD_LL_Transmit>

  return USBD_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	4613      	mov	r3, r2
 8009b94:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2203      	movs	r2, #3
 8009b9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009b9e:	88fa      	ldrh	r2, [r7, #6]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009ba6:	88fa      	ldrh	r2, [r7, #6]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bae:	88fb      	ldrh	r3, [r7, #6]
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 fc7f 	bl	800a4b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bd2:	88fb      	ldrh	r3, [r7, #6]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 fc6d 	bl	800a4b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2204      	movs	r2, #4
 8009bf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fc37 	bl	800a472 <USBD_LL_Transmit>

  return USBD_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2205      	movs	r2, #5
 8009c1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c1e:	2300      	movs	r3, #0
 8009c20:	2200      	movs	r2, #0
 8009c22:	2100      	movs	r1, #0
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fc47 	bl	800a4b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	4912      	ldr	r1, [pc, #72]	@ (8009c84 <MX_USB_DEVICE_Init+0x50>)
 8009c3c:	4812      	ldr	r0, [pc, #72]	@ (8009c88 <MX_USB_DEVICE_Init+0x54>)
 8009c3e:	f7fe ff5b 	bl	8008af8 <USBD_Init>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009c48:	f7f7 f858 	bl	8000cfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009c4c:	490f      	ldr	r1, [pc, #60]	@ (8009c8c <MX_USB_DEVICE_Init+0x58>)
 8009c4e:	480e      	ldr	r0, [pc, #56]	@ (8009c88 <MX_USB_DEVICE_Init+0x54>)
 8009c50:	f7fe ff7d 	bl	8008b4e <USBD_RegisterClass>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009c5a:	f7f7 f84f 	bl	8000cfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009c5e:	490c      	ldr	r1, [pc, #48]	@ (8009c90 <MX_USB_DEVICE_Init+0x5c>)
 8009c60:	4809      	ldr	r0, [pc, #36]	@ (8009c88 <MX_USB_DEVICE_Init+0x54>)
 8009c62:	f7fe feab 	bl	80089bc <USBD_CDC_RegisterInterface>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d001      	beq.n	8009c70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009c6c:	f7f7 f846 	bl	8000cfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009c70:	4805      	ldr	r0, [pc, #20]	@ (8009c88 <MX_USB_DEVICE_Init+0x54>)
 8009c72:	f7fe ff86 	bl	8008b82 <USBD_Start>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d001      	beq.n	8009c80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009c7c:	f7f7 f83e 	bl	8000cfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009c80:	bf00      	nop
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	2000012c 	.word	0x2000012c
 8009c88:	20000338 	.word	0x20000338
 8009c8c:	20000018 	.word	0x20000018
 8009c90:	2000011c 	.word	0x2000011c

08009c94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009c98:	2200      	movs	r2, #0
 8009c9a:	4905      	ldr	r1, [pc, #20]	@ (8009cb0 <CDC_Init_FS+0x1c>)
 8009c9c:	4805      	ldr	r0, [pc, #20]	@ (8009cb4 <CDC_Init_FS+0x20>)
 8009c9e:	f7fe fea4 	bl	80089ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ca2:	4905      	ldr	r1, [pc, #20]	@ (8009cb8 <CDC_Init_FS+0x24>)
 8009ca4:	4803      	ldr	r0, [pc, #12]	@ (8009cb4 <CDC_Init_FS+0x20>)
 8009ca6:	f7fe feba 	bl	8008a1e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009caa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	200009fc 	.word	0x200009fc
 8009cb4:	20000338 	.word	0x20000338
 8009cb8:	200005fc 	.word	0x200005fc

08009cbc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009cc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	6039      	str	r1, [r7, #0]
 8009cd6:	71fb      	strb	r3, [r7, #7]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	2b23      	cmp	r3, #35	@ 0x23
 8009ce0:	d84a      	bhi.n	8009d78 <CDC_Control_FS+0xac>
 8009ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ce8 <CDC_Control_FS+0x1c>)
 8009ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce8:	08009d79 	.word	0x08009d79
 8009cec:	08009d79 	.word	0x08009d79
 8009cf0:	08009d79 	.word	0x08009d79
 8009cf4:	08009d79 	.word	0x08009d79
 8009cf8:	08009d79 	.word	0x08009d79
 8009cfc:	08009d79 	.word	0x08009d79
 8009d00:	08009d79 	.word	0x08009d79
 8009d04:	08009d79 	.word	0x08009d79
 8009d08:	08009d79 	.word	0x08009d79
 8009d0c:	08009d79 	.word	0x08009d79
 8009d10:	08009d79 	.word	0x08009d79
 8009d14:	08009d79 	.word	0x08009d79
 8009d18:	08009d79 	.word	0x08009d79
 8009d1c:	08009d79 	.word	0x08009d79
 8009d20:	08009d79 	.word	0x08009d79
 8009d24:	08009d79 	.word	0x08009d79
 8009d28:	08009d79 	.word	0x08009d79
 8009d2c:	08009d79 	.word	0x08009d79
 8009d30:	08009d79 	.word	0x08009d79
 8009d34:	08009d79 	.word	0x08009d79
 8009d38:	08009d79 	.word	0x08009d79
 8009d3c:	08009d79 	.word	0x08009d79
 8009d40:	08009d79 	.word	0x08009d79
 8009d44:	08009d79 	.word	0x08009d79
 8009d48:	08009d79 	.word	0x08009d79
 8009d4c:	08009d79 	.word	0x08009d79
 8009d50:	08009d79 	.word	0x08009d79
 8009d54:	08009d79 	.word	0x08009d79
 8009d58:	08009d79 	.word	0x08009d79
 8009d5c:	08009d79 	.word	0x08009d79
 8009d60:	08009d79 	.word	0x08009d79
 8009d64:	08009d79 	.word	0x08009d79
 8009d68:	08009d79 	.word	0x08009d79
 8009d6c:	08009d79 	.word	0x08009d79
 8009d70:	08009d79 	.word	0x08009d79
 8009d74:	08009d79 	.word	0x08009d79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009d78:	bf00      	nop
  }

  return (USBD_OK);
 8009d7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009d92:	6879      	ldr	r1, [r7, #4]
 8009d94:	4805      	ldr	r0, [pc, #20]	@ (8009dac <CDC_Receive_FS+0x24>)
 8009d96:	f7fe fe42 	bl	8008a1e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009d9a:	4804      	ldr	r0, [pc, #16]	@ (8009dac <CDC_Receive_FS+0x24>)
 8009d9c:	f7fe fe82 	bl	8008aa4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009da0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	20000338 	.word	0x20000338

08009db0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	460b      	mov	r3, r1
 8009dba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8009df8 <CDC_Transmit_FS+0x48>)
 8009dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dc6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d001      	beq.n	8009dd6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e00b      	b.n	8009dee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009dd6:	887b      	ldrh	r3, [r7, #2]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	6879      	ldr	r1, [r7, #4]
 8009ddc:	4806      	ldr	r0, [pc, #24]	@ (8009df8 <CDC_Transmit_FS+0x48>)
 8009dde:	f7fe fe04 	bl	80089ea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009de2:	4805      	ldr	r0, [pc, #20]	@ (8009df8 <CDC_Transmit_FS+0x48>)
 8009de4:	f7fe fe2f 	bl	8008a46 <USBD_CDC_TransmitPacket>
 8009de8:	4603      	mov	r3, r0
 8009dea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	20000338 	.word	0x20000338

08009dfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	4603      	mov	r3, r0
 8009e04:	6039      	str	r1, [r7, #0]
 8009e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	2212      	movs	r2, #18
 8009e0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e0e:	4b03      	ldr	r3, [pc, #12]	@ (8009e1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	20000148 	.word	0x20000148

08009e20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	4603      	mov	r3, r0
 8009e28:	6039      	str	r1, [r7, #0]
 8009e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	2204      	movs	r2, #4
 8009e30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e32:	4b03      	ldr	r3, [pc, #12]	@ (8009e40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	2000015c 	.word	0x2000015c

08009e44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	6039      	str	r1, [r7, #0]
 8009e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e50:	79fb      	ldrb	r3, [r7, #7]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d105      	bne.n	8009e62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	4907      	ldr	r1, [pc, #28]	@ (8009e78 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e5a:	4808      	ldr	r0, [pc, #32]	@ (8009e7c <USBD_FS_ProductStrDescriptor+0x38>)
 8009e5c:	f7ff fe0c 	bl	8009a78 <USBD_GetString>
 8009e60:	e004      	b.n	8009e6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	4904      	ldr	r1, [pc, #16]	@ (8009e78 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e66:	4805      	ldr	r0, [pc, #20]	@ (8009e7c <USBD_FS_ProductStrDescriptor+0x38>)
 8009e68:	f7ff fe06 	bl	8009a78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e6c:	4b02      	ldr	r3, [pc, #8]	@ (8009e78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	20000dfc 	.word	0x20000dfc
 8009e7c:	0800af3c 	.word	0x0800af3c

08009e80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	4603      	mov	r3, r0
 8009e88:	6039      	str	r1, [r7, #0]
 8009e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	4904      	ldr	r1, [pc, #16]	@ (8009ea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e90:	4804      	ldr	r0, [pc, #16]	@ (8009ea4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e92:	f7ff fdf1 	bl	8009a78 <USBD_GetString>
  return USBD_StrDesc;
 8009e96:	4b02      	ldr	r3, [pc, #8]	@ (8009ea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	20000dfc 	.word	0x20000dfc
 8009ea4:	0800af54 	.word	0x0800af54

08009ea8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	6039      	str	r1, [r7, #0]
 8009eb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	221a      	movs	r2, #26
 8009eb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009eba:	f000 f843 	bl	8009f44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009ebe:	4b02      	ldr	r3, [pc, #8]	@ (8009ec8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	20000160 	.word	0x20000160

08009ecc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	6039      	str	r1, [r7, #0]
 8009ed6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ed8:	79fb      	ldrb	r3, [r7, #7]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d105      	bne.n	8009eea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	4907      	ldr	r1, [pc, #28]	@ (8009f00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ee2:	4808      	ldr	r0, [pc, #32]	@ (8009f04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ee4:	f7ff fdc8 	bl	8009a78 <USBD_GetString>
 8009ee8:	e004      	b.n	8009ef4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	4904      	ldr	r1, [pc, #16]	@ (8009f00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009eee:	4805      	ldr	r0, [pc, #20]	@ (8009f04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ef0:	f7ff fdc2 	bl	8009a78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ef4:	4b02      	ldr	r3, [pc, #8]	@ (8009f00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	20000dfc 	.word	0x20000dfc
 8009f04:	0800af68 	.word	0x0800af68

08009f08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	6039      	str	r1, [r7, #0]
 8009f12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f14:	79fb      	ldrb	r3, [r7, #7]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d105      	bne.n	8009f26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	4907      	ldr	r1, [pc, #28]	@ (8009f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f1e:	4808      	ldr	r0, [pc, #32]	@ (8009f40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f20:	f7ff fdaa 	bl	8009a78 <USBD_GetString>
 8009f24:	e004      	b.n	8009f30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f26:	683a      	ldr	r2, [r7, #0]
 8009f28:	4904      	ldr	r1, [pc, #16]	@ (8009f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f2a:	4805      	ldr	r0, [pc, #20]	@ (8009f40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f2c:	f7ff fda4 	bl	8009a78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f30:	4b02      	ldr	r3, [pc, #8]	@ (8009f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	20000dfc 	.word	0x20000dfc
 8009f40:	0800af74 	.word	0x0800af74

08009f44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8009f88 <Get_SerialNum+0x44>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f50:	4b0e      	ldr	r3, [pc, #56]	@ (8009f8c <Get_SerialNum+0x48>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f56:	4b0e      	ldr	r3, [pc, #56]	@ (8009f90 <Get_SerialNum+0x4c>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4413      	add	r3, r2
 8009f62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d009      	beq.n	8009f7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f6a:	2208      	movs	r2, #8
 8009f6c:	4909      	ldr	r1, [pc, #36]	@ (8009f94 <Get_SerialNum+0x50>)
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 f814 	bl	8009f9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f74:	2204      	movs	r2, #4
 8009f76:	4908      	ldr	r1, [pc, #32]	@ (8009f98 <Get_SerialNum+0x54>)
 8009f78:	68b8      	ldr	r0, [r7, #8]
 8009f7a:	f000 f80f 	bl	8009f9c <IntToUnicode>
  }
}
 8009f7e:	bf00      	nop
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	1ffff7ac 	.word	0x1ffff7ac
 8009f8c:	1ffff7b0 	.word	0x1ffff7b0
 8009f90:	1ffff7b4 	.word	0x1ffff7b4
 8009f94:	20000162 	.word	0x20000162
 8009f98:	20000172 	.word	0x20000172

08009f9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b087      	sub	sp, #28
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009fae:	2300      	movs	r3, #0
 8009fb0:	75fb      	strb	r3, [r7, #23]
 8009fb2:	e027      	b.n	800a004 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	0f1b      	lsrs	r3, r3, #28
 8009fb8:	2b09      	cmp	r3, #9
 8009fba:	d80b      	bhi.n	8009fd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	0f1b      	lsrs	r3, r3, #28
 8009fc0:	b2da      	uxtb	r2, r3
 8009fc2:	7dfb      	ldrb	r3, [r7, #23]
 8009fc4:	005b      	lsls	r3, r3, #1
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	440b      	add	r3, r1
 8009fcc:	3230      	adds	r2, #48	@ 0x30
 8009fce:	b2d2      	uxtb	r2, r2
 8009fd0:	701a      	strb	r2, [r3, #0]
 8009fd2:	e00a      	b.n	8009fea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	0f1b      	lsrs	r3, r3, #28
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	4619      	mov	r1, r3
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	440b      	add	r3, r1
 8009fe4:	3237      	adds	r2, #55	@ 0x37
 8009fe6:	b2d2      	uxtb	r2, r2
 8009fe8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	011b      	lsls	r3, r3, #4
 8009fee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	005b      	lsls	r3, r3, #1
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
 800a000:	3301      	adds	r3, #1
 800a002:	75fb      	strb	r3, [r7, #23]
 800a004:	7dfa      	ldrb	r2, [r7, #23]
 800a006:	79fb      	ldrb	r3, [r7, #7]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d3d3      	bcc.n	8009fb4 <IntToUnicode+0x18>
  }
}
 800a00c:	bf00      	nop
 800a00e:	bf00      	nop
 800a010:	371c      	adds	r7, #28
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
	...

0800a01c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b08a      	sub	sp, #40	@ 0x28
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a024:	f107 0314 	add.w	r3, r7, #20
 800a028:	2200      	movs	r2, #0
 800a02a:	601a      	str	r2, [r3, #0]
 800a02c:	605a      	str	r2, [r3, #4]
 800a02e:	609a      	str	r2, [r3, #8]
 800a030:	60da      	str	r2, [r3, #12]
 800a032:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a1c      	ldr	r2, [pc, #112]	@ (800a0ac <HAL_PCD_MspInit+0x90>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d131      	bne.n	800a0a2 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a03e:	4b1c      	ldr	r3, [pc, #112]	@ (800a0b0 <HAL_PCD_MspInit+0x94>)
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	4a1b      	ldr	r2, [pc, #108]	@ (800a0b0 <HAL_PCD_MspInit+0x94>)
 800a044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a048:	6153      	str	r3, [r2, #20]
 800a04a:	4b19      	ldr	r3, [pc, #100]	@ (800a0b0 <HAL_PCD_MspInit+0x94>)
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a052:	613b      	str	r3, [r7, #16]
 800a054:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800a056:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a05a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a05c:	2302      	movs	r3, #2
 800a05e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a060:	2300      	movs	r3, #0
 800a062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a064:	2303      	movs	r3, #3
 800a066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800a068:	230e      	movs	r3, #14
 800a06a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a06c:	f107 0314 	add.w	r3, r7, #20
 800a070:	4619      	mov	r1, r3
 800a072:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a076:	f7f7 f97b 	bl	8001370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a07a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b0 <HAL_PCD_MspInit+0x94>)
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	4a0c      	ldr	r2, [pc, #48]	@ (800a0b0 <HAL_PCD_MspInit+0x94>)
 800a080:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a084:	61d3      	str	r3, [r2, #28]
 800a086:	4b0a      	ldr	r3, [pc, #40]	@ (800a0b0 <HAL_PCD_MspInit+0x94>)
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a08e:	60fb      	str	r3, [r7, #12]
 800a090:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800a092:	2200      	movs	r2, #0
 800a094:	2100      	movs	r1, #0
 800a096:	2014      	movs	r0, #20
 800a098:	f7f7 f933 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800a09c:	2014      	movs	r0, #20
 800a09e:	f7f7 f94c 	bl	800133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a0a2:	bf00      	nop
 800a0a4:	3728      	adds	r7, #40	@ 0x28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	40005c00 	.word	0x40005c00
 800a0b0:	40021000 	.word	0x40021000

0800a0b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4610      	mov	r0, r2
 800a0cc:	f7fe fda2 	bl	8008c14 <USBD_LL_SetupStage>
}
 800a0d0:	bf00      	nop
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800a0ea:	78fa      	ldrb	r2, [r7, #3]
 800a0ec:	6879      	ldr	r1, [r7, #4]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	00db      	lsls	r3, r3, #3
 800a0f6:	440b      	add	r3, r1
 800a0f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	78fb      	ldrb	r3, [r7, #3]
 800a100:	4619      	mov	r1, r3
 800a102:	f7fe fdd4 	bl	8008cae <USBD_LL_DataOutStage>
}
 800a106:	bf00      	nop
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b082      	sub	sp, #8
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	460b      	mov	r3, r1
 800a118:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800a120:	78fa      	ldrb	r2, [r7, #3]
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	4613      	mov	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	00db      	lsls	r3, r3, #3
 800a12c:	440b      	add	r3, r1
 800a12e:	3324      	adds	r3, #36	@ 0x24
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	78fb      	ldrb	r3, [r7, #3]
 800a134:	4619      	mov	r1, r3
 800a136:	f7fe fe2b 	bl	8008d90 <USBD_LL_DataInStage>
}
 800a13a:	bf00      	nop
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b082      	sub	sp, #8
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800a150:	4618      	mov	r0, r3
 800a152:	f7fe ff3e 	bl	8008fd2 <USBD_LL_SOF>
}
 800a156:	bf00      	nop
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a166:	2301      	movs	r3, #1
 800a168:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	795b      	ldrb	r3, [r3, #5]
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d001      	beq.n	800a176 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a172:	f7f6 fdc3 	bl	8000cfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800a17c:	7bfa      	ldrb	r2, [r7, #15]
 800a17e:	4611      	mov	r1, r2
 800a180:	4618      	mov	r0, r3
 800a182:	f7fe feeb 	bl	8008f5c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fe fea4 	bl	8008eda <USBD_LL_Reset>
}
 800a192:	bf00      	nop
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
	...

0800a19c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fe fee6 	bl	8008f7c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	7a5b      	ldrb	r3, [r3, #9]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d005      	beq.n	800a1c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1b8:	4b04      	ldr	r3, [pc, #16]	@ (800a1cc <HAL_PCD_SuspendCallback+0x30>)
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	4a03      	ldr	r2, [pc, #12]	@ (800a1cc <HAL_PCD_SuspendCallback+0x30>)
 800a1be:	f043 0306 	orr.w	r3, r3, #6
 800a1c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a1c4:	bf00      	nop
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	e000ed00 	.word	0xe000ed00

0800a1d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7fe fee1 	bl	8008fa6 <USBD_LL_Resume>
}
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a1f4:	4a28      	ldr	r2, [pc, #160]	@ (800a298 <USBD_LL_Init+0xac>)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a26      	ldr	r2, [pc, #152]	@ (800a298 <USBD_LL_Init+0xac>)
 800a200:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a204:	4b24      	ldr	r3, [pc, #144]	@ (800a298 <USBD_LL_Init+0xac>)
 800a206:	4a25      	ldr	r2, [pc, #148]	@ (800a29c <USBD_LL_Init+0xb0>)
 800a208:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a20a:	4b23      	ldr	r3, [pc, #140]	@ (800a298 <USBD_LL_Init+0xac>)
 800a20c:	2208      	movs	r2, #8
 800a20e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a210:	4b21      	ldr	r3, [pc, #132]	@ (800a298 <USBD_LL_Init+0xac>)
 800a212:	2202      	movs	r2, #2
 800a214:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a216:	4b20      	ldr	r3, [pc, #128]	@ (800a298 <USBD_LL_Init+0xac>)
 800a218:	2202      	movs	r2, #2
 800a21a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a21c:	4b1e      	ldr	r3, [pc, #120]	@ (800a298 <USBD_LL_Init+0xac>)
 800a21e:	2200      	movs	r2, #0
 800a220:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a222:	4b1d      	ldr	r3, [pc, #116]	@ (800a298 <USBD_LL_Init+0xac>)
 800a224:	2200      	movs	r2, #0
 800a226:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a228:	481b      	ldr	r0, [pc, #108]	@ (800a298 <USBD_LL_Init+0xac>)
 800a22a:	f7f8 f856 	bl	80022da <HAL_PCD_Init>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a234:	f7f6 fd62 	bl	8000cfc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a23e:	2318      	movs	r3, #24
 800a240:	2200      	movs	r2, #0
 800a242:	2100      	movs	r1, #0
 800a244:	f7f9 fccf 	bl	8003be6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a24e:	2358      	movs	r3, #88	@ 0x58
 800a250:	2200      	movs	r2, #0
 800a252:	2180      	movs	r1, #128	@ 0x80
 800a254:	f7f9 fcc7 	bl	8003be6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a25e:	23c0      	movs	r3, #192	@ 0xc0
 800a260:	2200      	movs	r2, #0
 800a262:	2181      	movs	r1, #129	@ 0x81
 800a264:	f7f9 fcbf 	bl	8003be6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a26e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a272:	2200      	movs	r2, #0
 800a274:	2101      	movs	r1, #1
 800a276:	f7f9 fcb6 	bl	8003be6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a284:	2200      	movs	r2, #0
 800a286:	2182      	movs	r1, #130	@ 0x82
 800a288:	f7f9 fcad 	bl	8003be6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20000ffc 	.word	0x20000ffc
 800a29c:	40005c00 	.word	0x40005c00

0800a2a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7f8 f8d6 	bl	8002468 <HAL_PCD_Start>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f000 f952 	bl	800a56c <USBD_Get_USB_Status>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b084      	sub	sp, #16
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	4608      	mov	r0, r1
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	70fb      	strb	r3, [r7, #3]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	70bb      	strb	r3, [r7, #2]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a2fe:	78bb      	ldrb	r3, [r7, #2]
 800a300:	883a      	ldrh	r2, [r7, #0]
 800a302:	78f9      	ldrb	r1, [r7, #3]
 800a304:	f7f8 f9ce 	bl	80026a4 <HAL_PCD_EP_Open>
 800a308:	4603      	mov	r3, r0
 800a30a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
 800a30e:	4618      	mov	r0, r3
 800a310:	f000 f92c 	bl	800a56c <USBD_Get_USB_Status>
 800a314:	4603      	mov	r3, r0
 800a316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a318:	7bbb      	ldrb	r3, [r7, #14]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b084      	sub	sp, #16
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	460b      	mov	r3, r1
 800a32c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a33c:	78fa      	ldrb	r2, [r7, #3]
 800a33e:	4611      	mov	r1, r2
 800a340:	4618      	mov	r0, r3
 800a342:	f7f8 fa0c 	bl	800275e <HAL_PCD_EP_Close>
 800a346:	4603      	mov	r3, r0
 800a348:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f000 f90d 	bl	800a56c <USBD_Get_USB_Status>
 800a352:	4603      	mov	r3, r0
 800a354:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a356:	7bbb      	ldrb	r3, [r7, #14]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a37a:	78fa      	ldrb	r2, [r7, #3]
 800a37c:	4611      	mov	r1, r2
 800a37e:	4618      	mov	r0, r3
 800a380:	f7f8 fab5 	bl	80028ee <HAL_PCD_EP_SetStall>
 800a384:	4603      	mov	r3, r0
 800a386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a388:	7bfb      	ldrb	r3, [r7, #15]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 f8ee 	bl	800a56c <USBD_Get_USB_Status>
 800a390:	4603      	mov	r3, r0
 800a392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a394:	7bbb      	ldrb	r3, [r7, #14]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b084      	sub	sp, #16
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a3b8:	78fa      	ldrb	r2, [r7, #3]
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7f8 fae8 	bl	8002992 <HAL_PCD_EP_ClrStall>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f000 f8cf 	bl	800a56c <USBD_Get_USB_Status>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a3ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a3f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	da0b      	bge.n	800a410 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a3f8:	78fb      	ldrb	r3, [r7, #3]
 800a3fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a3fe:	68f9      	ldr	r1, [r7, #12]
 800a400:	4613      	mov	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	00db      	lsls	r3, r3, #3
 800a408:	440b      	add	r3, r1
 800a40a:	3312      	adds	r3, #18
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	e00b      	b.n	800a428 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a410:	78fb      	ldrb	r3, [r7, #3]
 800a412:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a416:	68f9      	ldr	r1, [r7, #12]
 800a418:	4613      	mov	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	00db      	lsls	r3, r3, #3
 800a420:	440b      	add	r3, r1
 800a422:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a426:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3714      	adds	r7, #20
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	460b      	mov	r3, r1
 800a43e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a440:	2300      	movs	r3, #0
 800a442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a44e:	78fa      	ldrb	r2, [r7, #3]
 800a450:	4611      	mov	r1, r2
 800a452:	4618      	mov	r0, r3
 800a454:	f7f8 f902 	bl	800265c <HAL_PCD_SetAddress>
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 f884 	bl	800a56c <USBD_Get_USB_Status>
 800a464:	4603      	mov	r3, r0
 800a466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a468:	7bbb      	ldrb	r3, [r7, #14]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b086      	sub	sp, #24
 800a476:	af00      	add	r7, sp, #0
 800a478:	60f8      	str	r0, [r7, #12]
 800a47a:	607a      	str	r2, [r7, #4]
 800a47c:	461a      	mov	r2, r3
 800a47e:	460b      	mov	r3, r1
 800a480:	72fb      	strb	r3, [r7, #11]
 800a482:	4613      	mov	r3, r2
 800a484:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a48a:	2300      	movs	r3, #0
 800a48c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a494:	893b      	ldrh	r3, [r7, #8]
 800a496:	7af9      	ldrb	r1, [r7, #11]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	f7f8 f9f1 	bl	8002880 <HAL_PCD_EP_Transmit>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4a2:	7dfb      	ldrb	r3, [r7, #23]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 f861 	bl	800a56c <USBD_Get_USB_Status>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3718      	adds	r7, #24
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	607a      	str	r2, [r7, #4]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	72fb      	strb	r3, [r7, #11]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4da:	893b      	ldrh	r3, [r7, #8]
 800a4dc:	7af9      	ldrb	r1, [r7, #11]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	f7f8 f985 	bl	80027ee <HAL_PCD_EP_Receive>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4e8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 f83e 	bl	800a56c <USBD_Get_USB_Status>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3718      	adds	r7, #24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b082      	sub	sp, #8
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	460b      	mov	r3, r1
 800a508:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a510:	78fa      	ldrb	r2, [r7, #3]
 800a512:	4611      	mov	r1, r2
 800a514:	4618      	mov	r0, r3
 800a516:	f7f8 f99b 	bl	8002850 <HAL_PCD_EP_GetRxCount>
 800a51a:	4603      	mov	r3, r0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a52c:	4b03      	ldr	r3, [pc, #12]	@ (800a53c <USBD_static_malloc+0x18>)
}
 800a52e:	4618      	mov	r0, r3
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	200012d0 	.word	0x200012d0

0800a540 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]

}
 800a548:	bf00      	nop
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a560:	bf00      	nop
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	4603      	mov	r3, r0
 800a574:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a576:	2300      	movs	r3, #0
 800a578:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	2b03      	cmp	r3, #3
 800a57e:	d817      	bhi.n	800a5b0 <USBD_Get_USB_Status+0x44>
 800a580:	a201      	add	r2, pc, #4	@ (adr r2, 800a588 <USBD_Get_USB_Status+0x1c>)
 800a582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a586:	bf00      	nop
 800a588:	0800a599 	.word	0x0800a599
 800a58c:	0800a59f 	.word	0x0800a59f
 800a590:	0800a5a5 	.word	0x0800a5a5
 800a594:	0800a5ab 	.word	0x0800a5ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a598:	2300      	movs	r3, #0
 800a59a:	73fb      	strb	r3, [r7, #15]
    break;
 800a59c:	e00b      	b.n	800a5b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a59e:	2302      	movs	r3, #2
 800a5a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a2:	e008      	b.n	800a5b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a8:	e005      	b.n	800a5b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5aa:	2302      	movs	r3, #2
 800a5ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ae:	e002      	b.n	800a5b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5b4:	bf00      	nop
  }
  return usb_status;
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3714      	adds	r7, #20
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <siprintf>:
 800a5c4:	b40e      	push	{r1, r2, r3}
 800a5c6:	b500      	push	{lr}
 800a5c8:	b09c      	sub	sp, #112	@ 0x70
 800a5ca:	ab1d      	add	r3, sp, #116	@ 0x74
 800a5cc:	9002      	str	r0, [sp, #8]
 800a5ce:	9006      	str	r0, [sp, #24]
 800a5d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a5d4:	4809      	ldr	r0, [pc, #36]	@ (800a5fc <siprintf+0x38>)
 800a5d6:	9107      	str	r1, [sp, #28]
 800a5d8:	9104      	str	r1, [sp, #16]
 800a5da:	4909      	ldr	r1, [pc, #36]	@ (800a600 <siprintf+0x3c>)
 800a5dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5e0:	9105      	str	r1, [sp, #20]
 800a5e2:	6800      	ldr	r0, [r0, #0]
 800a5e4:	9301      	str	r3, [sp, #4]
 800a5e6:	a902      	add	r1, sp, #8
 800a5e8:	f000 f994 	bl	800a914 <_svfiprintf_r>
 800a5ec:	9b02      	ldr	r3, [sp, #8]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	701a      	strb	r2, [r3, #0]
 800a5f2:	b01c      	add	sp, #112	@ 0x70
 800a5f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5f8:	b003      	add	sp, #12
 800a5fa:	4770      	bx	lr
 800a5fc:	2000017c 	.word	0x2000017c
 800a600:	ffff0208 	.word	0xffff0208

0800a604 <memset>:
 800a604:	4402      	add	r2, r0
 800a606:	4603      	mov	r3, r0
 800a608:	4293      	cmp	r3, r2
 800a60a:	d100      	bne.n	800a60e <memset+0xa>
 800a60c:	4770      	bx	lr
 800a60e:	f803 1b01 	strb.w	r1, [r3], #1
 800a612:	e7f9      	b.n	800a608 <memset+0x4>

0800a614 <__errno>:
 800a614:	4b01      	ldr	r3, [pc, #4]	@ (800a61c <__errno+0x8>)
 800a616:	6818      	ldr	r0, [r3, #0]
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	2000017c 	.word	0x2000017c

0800a620 <__libc_init_array>:
 800a620:	b570      	push	{r4, r5, r6, lr}
 800a622:	4d0d      	ldr	r5, [pc, #52]	@ (800a658 <__libc_init_array+0x38>)
 800a624:	4c0d      	ldr	r4, [pc, #52]	@ (800a65c <__libc_init_array+0x3c>)
 800a626:	1b64      	subs	r4, r4, r5
 800a628:	10a4      	asrs	r4, r4, #2
 800a62a:	2600      	movs	r6, #0
 800a62c:	42a6      	cmp	r6, r4
 800a62e:	d109      	bne.n	800a644 <__libc_init_array+0x24>
 800a630:	4d0b      	ldr	r5, [pc, #44]	@ (800a660 <__libc_init_array+0x40>)
 800a632:	4c0c      	ldr	r4, [pc, #48]	@ (800a664 <__libc_init_array+0x44>)
 800a634:	f000 fc66 	bl	800af04 <_init>
 800a638:	1b64      	subs	r4, r4, r5
 800a63a:	10a4      	asrs	r4, r4, #2
 800a63c:	2600      	movs	r6, #0
 800a63e:	42a6      	cmp	r6, r4
 800a640:	d105      	bne.n	800a64e <__libc_init_array+0x2e>
 800a642:	bd70      	pop	{r4, r5, r6, pc}
 800a644:	f855 3b04 	ldr.w	r3, [r5], #4
 800a648:	4798      	blx	r3
 800a64a:	3601      	adds	r6, #1
 800a64c:	e7ee      	b.n	800a62c <__libc_init_array+0xc>
 800a64e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a652:	4798      	blx	r3
 800a654:	3601      	adds	r6, #1
 800a656:	e7f2      	b.n	800a63e <__libc_init_array+0x1e>
 800a658:	0800aff8 	.word	0x0800aff8
 800a65c:	0800aff8 	.word	0x0800aff8
 800a660:	0800aff8 	.word	0x0800aff8
 800a664:	0800affc 	.word	0x0800affc

0800a668 <__retarget_lock_acquire_recursive>:
 800a668:	4770      	bx	lr

0800a66a <__retarget_lock_release_recursive>:
 800a66a:	4770      	bx	lr

0800a66c <_free_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4605      	mov	r5, r0
 800a670:	2900      	cmp	r1, #0
 800a672:	d041      	beq.n	800a6f8 <_free_r+0x8c>
 800a674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a678:	1f0c      	subs	r4, r1, #4
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	bfb8      	it	lt
 800a67e:	18e4      	addlt	r4, r4, r3
 800a680:	f000 f8e0 	bl	800a844 <__malloc_lock>
 800a684:	4a1d      	ldr	r2, [pc, #116]	@ (800a6fc <_free_r+0x90>)
 800a686:	6813      	ldr	r3, [r2, #0]
 800a688:	b933      	cbnz	r3, 800a698 <_free_r+0x2c>
 800a68a:	6063      	str	r3, [r4, #4]
 800a68c:	6014      	str	r4, [r2, #0]
 800a68e:	4628      	mov	r0, r5
 800a690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a694:	f000 b8dc 	b.w	800a850 <__malloc_unlock>
 800a698:	42a3      	cmp	r3, r4
 800a69a:	d908      	bls.n	800a6ae <_free_r+0x42>
 800a69c:	6820      	ldr	r0, [r4, #0]
 800a69e:	1821      	adds	r1, r4, r0
 800a6a0:	428b      	cmp	r3, r1
 800a6a2:	bf01      	itttt	eq
 800a6a4:	6819      	ldreq	r1, [r3, #0]
 800a6a6:	685b      	ldreq	r3, [r3, #4]
 800a6a8:	1809      	addeq	r1, r1, r0
 800a6aa:	6021      	streq	r1, [r4, #0]
 800a6ac:	e7ed      	b.n	800a68a <_free_r+0x1e>
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	b10b      	cbz	r3, 800a6b8 <_free_r+0x4c>
 800a6b4:	42a3      	cmp	r3, r4
 800a6b6:	d9fa      	bls.n	800a6ae <_free_r+0x42>
 800a6b8:	6811      	ldr	r1, [r2, #0]
 800a6ba:	1850      	adds	r0, r2, r1
 800a6bc:	42a0      	cmp	r0, r4
 800a6be:	d10b      	bne.n	800a6d8 <_free_r+0x6c>
 800a6c0:	6820      	ldr	r0, [r4, #0]
 800a6c2:	4401      	add	r1, r0
 800a6c4:	1850      	adds	r0, r2, r1
 800a6c6:	4283      	cmp	r3, r0
 800a6c8:	6011      	str	r1, [r2, #0]
 800a6ca:	d1e0      	bne.n	800a68e <_free_r+0x22>
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	6053      	str	r3, [r2, #4]
 800a6d2:	4408      	add	r0, r1
 800a6d4:	6010      	str	r0, [r2, #0]
 800a6d6:	e7da      	b.n	800a68e <_free_r+0x22>
 800a6d8:	d902      	bls.n	800a6e0 <_free_r+0x74>
 800a6da:	230c      	movs	r3, #12
 800a6dc:	602b      	str	r3, [r5, #0]
 800a6de:	e7d6      	b.n	800a68e <_free_r+0x22>
 800a6e0:	6820      	ldr	r0, [r4, #0]
 800a6e2:	1821      	adds	r1, r4, r0
 800a6e4:	428b      	cmp	r3, r1
 800a6e6:	bf04      	itt	eq
 800a6e8:	6819      	ldreq	r1, [r3, #0]
 800a6ea:	685b      	ldreq	r3, [r3, #4]
 800a6ec:	6063      	str	r3, [r4, #4]
 800a6ee:	bf04      	itt	eq
 800a6f0:	1809      	addeq	r1, r1, r0
 800a6f2:	6021      	streq	r1, [r4, #0]
 800a6f4:	6054      	str	r4, [r2, #4]
 800a6f6:	e7ca      	b.n	800a68e <_free_r+0x22>
 800a6f8:	bd38      	pop	{r3, r4, r5, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20001634 	.word	0x20001634

0800a700 <sbrk_aligned>:
 800a700:	b570      	push	{r4, r5, r6, lr}
 800a702:	4e0f      	ldr	r6, [pc, #60]	@ (800a740 <sbrk_aligned+0x40>)
 800a704:	460c      	mov	r4, r1
 800a706:	6831      	ldr	r1, [r6, #0]
 800a708:	4605      	mov	r5, r0
 800a70a:	b911      	cbnz	r1, 800a712 <sbrk_aligned+0x12>
 800a70c:	f000 fba6 	bl	800ae5c <_sbrk_r>
 800a710:	6030      	str	r0, [r6, #0]
 800a712:	4621      	mov	r1, r4
 800a714:	4628      	mov	r0, r5
 800a716:	f000 fba1 	bl	800ae5c <_sbrk_r>
 800a71a:	1c43      	adds	r3, r0, #1
 800a71c:	d103      	bne.n	800a726 <sbrk_aligned+0x26>
 800a71e:	f04f 34ff 	mov.w	r4, #4294967295
 800a722:	4620      	mov	r0, r4
 800a724:	bd70      	pop	{r4, r5, r6, pc}
 800a726:	1cc4      	adds	r4, r0, #3
 800a728:	f024 0403 	bic.w	r4, r4, #3
 800a72c:	42a0      	cmp	r0, r4
 800a72e:	d0f8      	beq.n	800a722 <sbrk_aligned+0x22>
 800a730:	1a21      	subs	r1, r4, r0
 800a732:	4628      	mov	r0, r5
 800a734:	f000 fb92 	bl	800ae5c <_sbrk_r>
 800a738:	3001      	adds	r0, #1
 800a73a:	d1f2      	bne.n	800a722 <sbrk_aligned+0x22>
 800a73c:	e7ef      	b.n	800a71e <sbrk_aligned+0x1e>
 800a73e:	bf00      	nop
 800a740:	20001630 	.word	0x20001630

0800a744 <_malloc_r>:
 800a744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a748:	1ccd      	adds	r5, r1, #3
 800a74a:	f025 0503 	bic.w	r5, r5, #3
 800a74e:	3508      	adds	r5, #8
 800a750:	2d0c      	cmp	r5, #12
 800a752:	bf38      	it	cc
 800a754:	250c      	movcc	r5, #12
 800a756:	2d00      	cmp	r5, #0
 800a758:	4606      	mov	r6, r0
 800a75a:	db01      	blt.n	800a760 <_malloc_r+0x1c>
 800a75c:	42a9      	cmp	r1, r5
 800a75e:	d904      	bls.n	800a76a <_malloc_r+0x26>
 800a760:	230c      	movs	r3, #12
 800a762:	6033      	str	r3, [r6, #0]
 800a764:	2000      	movs	r0, #0
 800a766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a76a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a840 <_malloc_r+0xfc>
 800a76e:	f000 f869 	bl	800a844 <__malloc_lock>
 800a772:	f8d8 3000 	ldr.w	r3, [r8]
 800a776:	461c      	mov	r4, r3
 800a778:	bb44      	cbnz	r4, 800a7cc <_malloc_r+0x88>
 800a77a:	4629      	mov	r1, r5
 800a77c:	4630      	mov	r0, r6
 800a77e:	f7ff ffbf 	bl	800a700 <sbrk_aligned>
 800a782:	1c43      	adds	r3, r0, #1
 800a784:	4604      	mov	r4, r0
 800a786:	d158      	bne.n	800a83a <_malloc_r+0xf6>
 800a788:	f8d8 4000 	ldr.w	r4, [r8]
 800a78c:	4627      	mov	r7, r4
 800a78e:	2f00      	cmp	r7, #0
 800a790:	d143      	bne.n	800a81a <_malloc_r+0xd6>
 800a792:	2c00      	cmp	r4, #0
 800a794:	d04b      	beq.n	800a82e <_malloc_r+0xea>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	4639      	mov	r1, r7
 800a79a:	4630      	mov	r0, r6
 800a79c:	eb04 0903 	add.w	r9, r4, r3
 800a7a0:	f000 fb5c 	bl	800ae5c <_sbrk_r>
 800a7a4:	4581      	cmp	r9, r0
 800a7a6:	d142      	bne.n	800a82e <_malloc_r+0xea>
 800a7a8:	6821      	ldr	r1, [r4, #0]
 800a7aa:	1a6d      	subs	r5, r5, r1
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f7ff ffa6 	bl	800a700 <sbrk_aligned>
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d03a      	beq.n	800a82e <_malloc_r+0xea>
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	442b      	add	r3, r5
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	f8d8 3000 	ldr.w	r3, [r8]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	bb62      	cbnz	r2, 800a820 <_malloc_r+0xdc>
 800a7c6:	f8c8 7000 	str.w	r7, [r8]
 800a7ca:	e00f      	b.n	800a7ec <_malloc_r+0xa8>
 800a7cc:	6822      	ldr	r2, [r4, #0]
 800a7ce:	1b52      	subs	r2, r2, r5
 800a7d0:	d420      	bmi.n	800a814 <_malloc_r+0xd0>
 800a7d2:	2a0b      	cmp	r2, #11
 800a7d4:	d917      	bls.n	800a806 <_malloc_r+0xc2>
 800a7d6:	1961      	adds	r1, r4, r5
 800a7d8:	42a3      	cmp	r3, r4
 800a7da:	6025      	str	r5, [r4, #0]
 800a7dc:	bf18      	it	ne
 800a7de:	6059      	strne	r1, [r3, #4]
 800a7e0:	6863      	ldr	r3, [r4, #4]
 800a7e2:	bf08      	it	eq
 800a7e4:	f8c8 1000 	streq.w	r1, [r8]
 800a7e8:	5162      	str	r2, [r4, r5]
 800a7ea:	604b      	str	r3, [r1, #4]
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	f000 f82f 	bl	800a850 <__malloc_unlock>
 800a7f2:	f104 000b 	add.w	r0, r4, #11
 800a7f6:	1d23      	adds	r3, r4, #4
 800a7f8:	f020 0007 	bic.w	r0, r0, #7
 800a7fc:	1ac2      	subs	r2, r0, r3
 800a7fe:	bf1c      	itt	ne
 800a800:	1a1b      	subne	r3, r3, r0
 800a802:	50a3      	strne	r3, [r4, r2]
 800a804:	e7af      	b.n	800a766 <_malloc_r+0x22>
 800a806:	6862      	ldr	r2, [r4, #4]
 800a808:	42a3      	cmp	r3, r4
 800a80a:	bf0c      	ite	eq
 800a80c:	f8c8 2000 	streq.w	r2, [r8]
 800a810:	605a      	strne	r2, [r3, #4]
 800a812:	e7eb      	b.n	800a7ec <_malloc_r+0xa8>
 800a814:	4623      	mov	r3, r4
 800a816:	6864      	ldr	r4, [r4, #4]
 800a818:	e7ae      	b.n	800a778 <_malloc_r+0x34>
 800a81a:	463c      	mov	r4, r7
 800a81c:	687f      	ldr	r7, [r7, #4]
 800a81e:	e7b6      	b.n	800a78e <_malloc_r+0x4a>
 800a820:	461a      	mov	r2, r3
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	42a3      	cmp	r3, r4
 800a826:	d1fb      	bne.n	800a820 <_malloc_r+0xdc>
 800a828:	2300      	movs	r3, #0
 800a82a:	6053      	str	r3, [r2, #4]
 800a82c:	e7de      	b.n	800a7ec <_malloc_r+0xa8>
 800a82e:	230c      	movs	r3, #12
 800a830:	6033      	str	r3, [r6, #0]
 800a832:	4630      	mov	r0, r6
 800a834:	f000 f80c 	bl	800a850 <__malloc_unlock>
 800a838:	e794      	b.n	800a764 <_malloc_r+0x20>
 800a83a:	6005      	str	r5, [r0, #0]
 800a83c:	e7d6      	b.n	800a7ec <_malloc_r+0xa8>
 800a83e:	bf00      	nop
 800a840:	20001634 	.word	0x20001634

0800a844 <__malloc_lock>:
 800a844:	4801      	ldr	r0, [pc, #4]	@ (800a84c <__malloc_lock+0x8>)
 800a846:	f7ff bf0f 	b.w	800a668 <__retarget_lock_acquire_recursive>
 800a84a:	bf00      	nop
 800a84c:	2000162c 	.word	0x2000162c

0800a850 <__malloc_unlock>:
 800a850:	4801      	ldr	r0, [pc, #4]	@ (800a858 <__malloc_unlock+0x8>)
 800a852:	f7ff bf0a 	b.w	800a66a <__retarget_lock_release_recursive>
 800a856:	bf00      	nop
 800a858:	2000162c 	.word	0x2000162c

0800a85c <__ssputs_r>:
 800a85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a860:	688e      	ldr	r6, [r1, #8]
 800a862:	461f      	mov	r7, r3
 800a864:	42be      	cmp	r6, r7
 800a866:	680b      	ldr	r3, [r1, #0]
 800a868:	4682      	mov	sl, r0
 800a86a:	460c      	mov	r4, r1
 800a86c:	4690      	mov	r8, r2
 800a86e:	d82d      	bhi.n	800a8cc <__ssputs_r+0x70>
 800a870:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a874:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a878:	d026      	beq.n	800a8c8 <__ssputs_r+0x6c>
 800a87a:	6965      	ldr	r5, [r4, #20]
 800a87c:	6909      	ldr	r1, [r1, #16]
 800a87e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a882:	eba3 0901 	sub.w	r9, r3, r1
 800a886:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a88a:	1c7b      	adds	r3, r7, #1
 800a88c:	444b      	add	r3, r9
 800a88e:	106d      	asrs	r5, r5, #1
 800a890:	429d      	cmp	r5, r3
 800a892:	bf38      	it	cc
 800a894:	461d      	movcc	r5, r3
 800a896:	0553      	lsls	r3, r2, #21
 800a898:	d527      	bpl.n	800a8ea <__ssputs_r+0x8e>
 800a89a:	4629      	mov	r1, r5
 800a89c:	f7ff ff52 	bl	800a744 <_malloc_r>
 800a8a0:	4606      	mov	r6, r0
 800a8a2:	b360      	cbz	r0, 800a8fe <__ssputs_r+0xa2>
 800a8a4:	6921      	ldr	r1, [r4, #16]
 800a8a6:	464a      	mov	r2, r9
 800a8a8:	f000 fae8 	bl	800ae7c <memcpy>
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a8b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8b6:	81a3      	strh	r3, [r4, #12]
 800a8b8:	6126      	str	r6, [r4, #16]
 800a8ba:	6165      	str	r5, [r4, #20]
 800a8bc:	444e      	add	r6, r9
 800a8be:	eba5 0509 	sub.w	r5, r5, r9
 800a8c2:	6026      	str	r6, [r4, #0]
 800a8c4:	60a5      	str	r5, [r4, #8]
 800a8c6:	463e      	mov	r6, r7
 800a8c8:	42be      	cmp	r6, r7
 800a8ca:	d900      	bls.n	800a8ce <__ssputs_r+0x72>
 800a8cc:	463e      	mov	r6, r7
 800a8ce:	6820      	ldr	r0, [r4, #0]
 800a8d0:	4632      	mov	r2, r6
 800a8d2:	4641      	mov	r1, r8
 800a8d4:	f000 faa8 	bl	800ae28 <memmove>
 800a8d8:	68a3      	ldr	r3, [r4, #8]
 800a8da:	1b9b      	subs	r3, r3, r6
 800a8dc:	60a3      	str	r3, [r4, #8]
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	4433      	add	r3, r6
 800a8e2:	6023      	str	r3, [r4, #0]
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ea:	462a      	mov	r2, r5
 800a8ec:	f000 fad4 	bl	800ae98 <_realloc_r>
 800a8f0:	4606      	mov	r6, r0
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	d1e0      	bne.n	800a8b8 <__ssputs_r+0x5c>
 800a8f6:	6921      	ldr	r1, [r4, #16]
 800a8f8:	4650      	mov	r0, sl
 800a8fa:	f7ff feb7 	bl	800a66c <_free_r>
 800a8fe:	230c      	movs	r3, #12
 800a900:	f8ca 3000 	str.w	r3, [sl]
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a90a:	81a3      	strh	r3, [r4, #12]
 800a90c:	f04f 30ff 	mov.w	r0, #4294967295
 800a910:	e7e9      	b.n	800a8e6 <__ssputs_r+0x8a>
	...

0800a914 <_svfiprintf_r>:
 800a914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a918:	4698      	mov	r8, r3
 800a91a:	898b      	ldrh	r3, [r1, #12]
 800a91c:	061b      	lsls	r3, r3, #24
 800a91e:	b09d      	sub	sp, #116	@ 0x74
 800a920:	4607      	mov	r7, r0
 800a922:	460d      	mov	r5, r1
 800a924:	4614      	mov	r4, r2
 800a926:	d510      	bpl.n	800a94a <_svfiprintf_r+0x36>
 800a928:	690b      	ldr	r3, [r1, #16]
 800a92a:	b973      	cbnz	r3, 800a94a <_svfiprintf_r+0x36>
 800a92c:	2140      	movs	r1, #64	@ 0x40
 800a92e:	f7ff ff09 	bl	800a744 <_malloc_r>
 800a932:	6028      	str	r0, [r5, #0]
 800a934:	6128      	str	r0, [r5, #16]
 800a936:	b930      	cbnz	r0, 800a946 <_svfiprintf_r+0x32>
 800a938:	230c      	movs	r3, #12
 800a93a:	603b      	str	r3, [r7, #0]
 800a93c:	f04f 30ff 	mov.w	r0, #4294967295
 800a940:	b01d      	add	sp, #116	@ 0x74
 800a942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a946:	2340      	movs	r3, #64	@ 0x40
 800a948:	616b      	str	r3, [r5, #20]
 800a94a:	2300      	movs	r3, #0
 800a94c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a94e:	2320      	movs	r3, #32
 800a950:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a954:	f8cd 800c 	str.w	r8, [sp, #12]
 800a958:	2330      	movs	r3, #48	@ 0x30
 800a95a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aaf8 <_svfiprintf_r+0x1e4>
 800a95e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a962:	f04f 0901 	mov.w	r9, #1
 800a966:	4623      	mov	r3, r4
 800a968:	469a      	mov	sl, r3
 800a96a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a96e:	b10a      	cbz	r2, 800a974 <_svfiprintf_r+0x60>
 800a970:	2a25      	cmp	r2, #37	@ 0x25
 800a972:	d1f9      	bne.n	800a968 <_svfiprintf_r+0x54>
 800a974:	ebba 0b04 	subs.w	fp, sl, r4
 800a978:	d00b      	beq.n	800a992 <_svfiprintf_r+0x7e>
 800a97a:	465b      	mov	r3, fp
 800a97c:	4622      	mov	r2, r4
 800a97e:	4629      	mov	r1, r5
 800a980:	4638      	mov	r0, r7
 800a982:	f7ff ff6b 	bl	800a85c <__ssputs_r>
 800a986:	3001      	adds	r0, #1
 800a988:	f000 80a7 	beq.w	800aada <_svfiprintf_r+0x1c6>
 800a98c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a98e:	445a      	add	r2, fp
 800a990:	9209      	str	r2, [sp, #36]	@ 0x24
 800a992:	f89a 3000 	ldrb.w	r3, [sl]
 800a996:	2b00      	cmp	r3, #0
 800a998:	f000 809f 	beq.w	800aada <_svfiprintf_r+0x1c6>
 800a99c:	2300      	movs	r3, #0
 800a99e:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9a6:	f10a 0a01 	add.w	sl, sl, #1
 800a9aa:	9304      	str	r3, [sp, #16]
 800a9ac:	9307      	str	r3, [sp, #28]
 800a9ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9b4:	4654      	mov	r4, sl
 800a9b6:	2205      	movs	r2, #5
 800a9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9bc:	484e      	ldr	r0, [pc, #312]	@ (800aaf8 <_svfiprintf_r+0x1e4>)
 800a9be:	f7f5 fc0f 	bl	80001e0 <memchr>
 800a9c2:	9a04      	ldr	r2, [sp, #16]
 800a9c4:	b9d8      	cbnz	r0, 800a9fe <_svfiprintf_r+0xea>
 800a9c6:	06d0      	lsls	r0, r2, #27
 800a9c8:	bf44      	itt	mi
 800a9ca:	2320      	movmi	r3, #32
 800a9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9d0:	0711      	lsls	r1, r2, #28
 800a9d2:	bf44      	itt	mi
 800a9d4:	232b      	movmi	r3, #43	@ 0x2b
 800a9d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9da:	f89a 3000 	ldrb.w	r3, [sl]
 800a9de:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9e0:	d015      	beq.n	800aa0e <_svfiprintf_r+0xfa>
 800a9e2:	9a07      	ldr	r2, [sp, #28]
 800a9e4:	4654      	mov	r4, sl
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	f04f 0c0a 	mov.w	ip, #10
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9f2:	3b30      	subs	r3, #48	@ 0x30
 800a9f4:	2b09      	cmp	r3, #9
 800a9f6:	d94b      	bls.n	800aa90 <_svfiprintf_r+0x17c>
 800a9f8:	b1b0      	cbz	r0, 800aa28 <_svfiprintf_r+0x114>
 800a9fa:	9207      	str	r2, [sp, #28]
 800a9fc:	e014      	b.n	800aa28 <_svfiprintf_r+0x114>
 800a9fe:	eba0 0308 	sub.w	r3, r0, r8
 800aa02:	fa09 f303 	lsl.w	r3, r9, r3
 800aa06:	4313      	orrs	r3, r2
 800aa08:	9304      	str	r3, [sp, #16]
 800aa0a:	46a2      	mov	sl, r4
 800aa0c:	e7d2      	b.n	800a9b4 <_svfiprintf_r+0xa0>
 800aa0e:	9b03      	ldr	r3, [sp, #12]
 800aa10:	1d19      	adds	r1, r3, #4
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	9103      	str	r1, [sp, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bfbb      	ittet	lt
 800aa1a:	425b      	neglt	r3, r3
 800aa1c:	f042 0202 	orrlt.w	r2, r2, #2
 800aa20:	9307      	strge	r3, [sp, #28]
 800aa22:	9307      	strlt	r3, [sp, #28]
 800aa24:	bfb8      	it	lt
 800aa26:	9204      	strlt	r2, [sp, #16]
 800aa28:	7823      	ldrb	r3, [r4, #0]
 800aa2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa2c:	d10a      	bne.n	800aa44 <_svfiprintf_r+0x130>
 800aa2e:	7863      	ldrb	r3, [r4, #1]
 800aa30:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa32:	d132      	bne.n	800aa9a <_svfiprintf_r+0x186>
 800aa34:	9b03      	ldr	r3, [sp, #12]
 800aa36:	1d1a      	adds	r2, r3, #4
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	9203      	str	r2, [sp, #12]
 800aa3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa40:	3402      	adds	r4, #2
 800aa42:	9305      	str	r3, [sp, #20]
 800aa44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ab08 <_svfiprintf_r+0x1f4>
 800aa48:	7821      	ldrb	r1, [r4, #0]
 800aa4a:	2203      	movs	r2, #3
 800aa4c:	4650      	mov	r0, sl
 800aa4e:	f7f5 fbc7 	bl	80001e0 <memchr>
 800aa52:	b138      	cbz	r0, 800aa64 <_svfiprintf_r+0x150>
 800aa54:	9b04      	ldr	r3, [sp, #16]
 800aa56:	eba0 000a 	sub.w	r0, r0, sl
 800aa5a:	2240      	movs	r2, #64	@ 0x40
 800aa5c:	4082      	lsls	r2, r0
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	3401      	adds	r4, #1
 800aa62:	9304      	str	r3, [sp, #16]
 800aa64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa68:	4824      	ldr	r0, [pc, #144]	@ (800aafc <_svfiprintf_r+0x1e8>)
 800aa6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa6e:	2206      	movs	r2, #6
 800aa70:	f7f5 fbb6 	bl	80001e0 <memchr>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d036      	beq.n	800aae6 <_svfiprintf_r+0x1d2>
 800aa78:	4b21      	ldr	r3, [pc, #132]	@ (800ab00 <_svfiprintf_r+0x1ec>)
 800aa7a:	bb1b      	cbnz	r3, 800aac4 <_svfiprintf_r+0x1b0>
 800aa7c:	9b03      	ldr	r3, [sp, #12]
 800aa7e:	3307      	adds	r3, #7
 800aa80:	f023 0307 	bic.w	r3, r3, #7
 800aa84:	3308      	adds	r3, #8
 800aa86:	9303      	str	r3, [sp, #12]
 800aa88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa8a:	4433      	add	r3, r6
 800aa8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa8e:	e76a      	b.n	800a966 <_svfiprintf_r+0x52>
 800aa90:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa94:	460c      	mov	r4, r1
 800aa96:	2001      	movs	r0, #1
 800aa98:	e7a8      	b.n	800a9ec <_svfiprintf_r+0xd8>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	3401      	adds	r4, #1
 800aa9e:	9305      	str	r3, [sp, #20]
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	f04f 0c0a 	mov.w	ip, #10
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaac:	3a30      	subs	r2, #48	@ 0x30
 800aaae:	2a09      	cmp	r2, #9
 800aab0:	d903      	bls.n	800aaba <_svfiprintf_r+0x1a6>
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d0c6      	beq.n	800aa44 <_svfiprintf_r+0x130>
 800aab6:	9105      	str	r1, [sp, #20]
 800aab8:	e7c4      	b.n	800aa44 <_svfiprintf_r+0x130>
 800aaba:	fb0c 2101 	mla	r1, ip, r1, r2
 800aabe:	4604      	mov	r4, r0
 800aac0:	2301      	movs	r3, #1
 800aac2:	e7f0      	b.n	800aaa6 <_svfiprintf_r+0x192>
 800aac4:	ab03      	add	r3, sp, #12
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	462a      	mov	r2, r5
 800aaca:	4b0e      	ldr	r3, [pc, #56]	@ (800ab04 <_svfiprintf_r+0x1f0>)
 800aacc:	a904      	add	r1, sp, #16
 800aace:	4638      	mov	r0, r7
 800aad0:	f3af 8000 	nop.w
 800aad4:	1c42      	adds	r2, r0, #1
 800aad6:	4606      	mov	r6, r0
 800aad8:	d1d6      	bne.n	800aa88 <_svfiprintf_r+0x174>
 800aada:	89ab      	ldrh	r3, [r5, #12]
 800aadc:	065b      	lsls	r3, r3, #25
 800aade:	f53f af2d 	bmi.w	800a93c <_svfiprintf_r+0x28>
 800aae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aae4:	e72c      	b.n	800a940 <_svfiprintf_r+0x2c>
 800aae6:	ab03      	add	r3, sp, #12
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	462a      	mov	r2, r5
 800aaec:	4b05      	ldr	r3, [pc, #20]	@ (800ab04 <_svfiprintf_r+0x1f0>)
 800aaee:	a904      	add	r1, sp, #16
 800aaf0:	4638      	mov	r0, r7
 800aaf2:	f000 f879 	bl	800abe8 <_printf_i>
 800aaf6:	e7ed      	b.n	800aad4 <_svfiprintf_r+0x1c0>
 800aaf8:	0800afbc 	.word	0x0800afbc
 800aafc:	0800afc6 	.word	0x0800afc6
 800ab00:	00000000 	.word	0x00000000
 800ab04:	0800a85d 	.word	0x0800a85d
 800ab08:	0800afc2 	.word	0x0800afc2

0800ab0c <_printf_common>:
 800ab0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab10:	4616      	mov	r6, r2
 800ab12:	4698      	mov	r8, r3
 800ab14:	688a      	ldr	r2, [r1, #8]
 800ab16:	690b      	ldr	r3, [r1, #16]
 800ab18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	bfb8      	it	lt
 800ab20:	4613      	movlt	r3, r2
 800ab22:	6033      	str	r3, [r6, #0]
 800ab24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab28:	4607      	mov	r7, r0
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	b10a      	cbz	r2, 800ab32 <_printf_common+0x26>
 800ab2e:	3301      	adds	r3, #1
 800ab30:	6033      	str	r3, [r6, #0]
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	0699      	lsls	r1, r3, #26
 800ab36:	bf42      	ittt	mi
 800ab38:	6833      	ldrmi	r3, [r6, #0]
 800ab3a:	3302      	addmi	r3, #2
 800ab3c:	6033      	strmi	r3, [r6, #0]
 800ab3e:	6825      	ldr	r5, [r4, #0]
 800ab40:	f015 0506 	ands.w	r5, r5, #6
 800ab44:	d106      	bne.n	800ab54 <_printf_common+0x48>
 800ab46:	f104 0a19 	add.w	sl, r4, #25
 800ab4a:	68e3      	ldr	r3, [r4, #12]
 800ab4c:	6832      	ldr	r2, [r6, #0]
 800ab4e:	1a9b      	subs	r3, r3, r2
 800ab50:	42ab      	cmp	r3, r5
 800ab52:	dc26      	bgt.n	800aba2 <_printf_common+0x96>
 800ab54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab58:	6822      	ldr	r2, [r4, #0]
 800ab5a:	3b00      	subs	r3, #0
 800ab5c:	bf18      	it	ne
 800ab5e:	2301      	movne	r3, #1
 800ab60:	0692      	lsls	r2, r2, #26
 800ab62:	d42b      	bmi.n	800abbc <_printf_common+0xb0>
 800ab64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab68:	4641      	mov	r1, r8
 800ab6a:	4638      	mov	r0, r7
 800ab6c:	47c8      	blx	r9
 800ab6e:	3001      	adds	r0, #1
 800ab70:	d01e      	beq.n	800abb0 <_printf_common+0xa4>
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	6922      	ldr	r2, [r4, #16]
 800ab76:	f003 0306 	and.w	r3, r3, #6
 800ab7a:	2b04      	cmp	r3, #4
 800ab7c:	bf02      	ittt	eq
 800ab7e:	68e5      	ldreq	r5, [r4, #12]
 800ab80:	6833      	ldreq	r3, [r6, #0]
 800ab82:	1aed      	subeq	r5, r5, r3
 800ab84:	68a3      	ldr	r3, [r4, #8]
 800ab86:	bf0c      	ite	eq
 800ab88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab8c:	2500      	movne	r5, #0
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	bfc4      	itt	gt
 800ab92:	1a9b      	subgt	r3, r3, r2
 800ab94:	18ed      	addgt	r5, r5, r3
 800ab96:	2600      	movs	r6, #0
 800ab98:	341a      	adds	r4, #26
 800ab9a:	42b5      	cmp	r5, r6
 800ab9c:	d11a      	bne.n	800abd4 <_printf_common+0xc8>
 800ab9e:	2000      	movs	r0, #0
 800aba0:	e008      	b.n	800abb4 <_printf_common+0xa8>
 800aba2:	2301      	movs	r3, #1
 800aba4:	4652      	mov	r2, sl
 800aba6:	4641      	mov	r1, r8
 800aba8:	4638      	mov	r0, r7
 800abaa:	47c8      	blx	r9
 800abac:	3001      	adds	r0, #1
 800abae:	d103      	bne.n	800abb8 <_printf_common+0xac>
 800abb0:	f04f 30ff 	mov.w	r0, #4294967295
 800abb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb8:	3501      	adds	r5, #1
 800abba:	e7c6      	b.n	800ab4a <_printf_common+0x3e>
 800abbc:	18e1      	adds	r1, r4, r3
 800abbe:	1c5a      	adds	r2, r3, #1
 800abc0:	2030      	movs	r0, #48	@ 0x30
 800abc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800abc6:	4422      	add	r2, r4
 800abc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800abcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800abd0:	3302      	adds	r3, #2
 800abd2:	e7c7      	b.n	800ab64 <_printf_common+0x58>
 800abd4:	2301      	movs	r3, #1
 800abd6:	4622      	mov	r2, r4
 800abd8:	4641      	mov	r1, r8
 800abda:	4638      	mov	r0, r7
 800abdc:	47c8      	blx	r9
 800abde:	3001      	adds	r0, #1
 800abe0:	d0e6      	beq.n	800abb0 <_printf_common+0xa4>
 800abe2:	3601      	adds	r6, #1
 800abe4:	e7d9      	b.n	800ab9a <_printf_common+0x8e>
	...

0800abe8 <_printf_i>:
 800abe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abec:	7e0f      	ldrb	r7, [r1, #24]
 800abee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800abf0:	2f78      	cmp	r7, #120	@ 0x78
 800abf2:	4691      	mov	r9, r2
 800abf4:	4680      	mov	r8, r0
 800abf6:	460c      	mov	r4, r1
 800abf8:	469a      	mov	sl, r3
 800abfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800abfe:	d807      	bhi.n	800ac10 <_printf_i+0x28>
 800ac00:	2f62      	cmp	r7, #98	@ 0x62
 800ac02:	d80a      	bhi.n	800ac1a <_printf_i+0x32>
 800ac04:	2f00      	cmp	r7, #0
 800ac06:	f000 80d2 	beq.w	800adae <_printf_i+0x1c6>
 800ac0a:	2f58      	cmp	r7, #88	@ 0x58
 800ac0c:	f000 80b9 	beq.w	800ad82 <_printf_i+0x19a>
 800ac10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac18:	e03a      	b.n	800ac90 <_printf_i+0xa8>
 800ac1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac1e:	2b15      	cmp	r3, #21
 800ac20:	d8f6      	bhi.n	800ac10 <_printf_i+0x28>
 800ac22:	a101      	add	r1, pc, #4	@ (adr r1, 800ac28 <_printf_i+0x40>)
 800ac24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac28:	0800ac81 	.word	0x0800ac81
 800ac2c:	0800ac95 	.word	0x0800ac95
 800ac30:	0800ac11 	.word	0x0800ac11
 800ac34:	0800ac11 	.word	0x0800ac11
 800ac38:	0800ac11 	.word	0x0800ac11
 800ac3c:	0800ac11 	.word	0x0800ac11
 800ac40:	0800ac95 	.word	0x0800ac95
 800ac44:	0800ac11 	.word	0x0800ac11
 800ac48:	0800ac11 	.word	0x0800ac11
 800ac4c:	0800ac11 	.word	0x0800ac11
 800ac50:	0800ac11 	.word	0x0800ac11
 800ac54:	0800ad95 	.word	0x0800ad95
 800ac58:	0800acbf 	.word	0x0800acbf
 800ac5c:	0800ad4f 	.word	0x0800ad4f
 800ac60:	0800ac11 	.word	0x0800ac11
 800ac64:	0800ac11 	.word	0x0800ac11
 800ac68:	0800adb7 	.word	0x0800adb7
 800ac6c:	0800ac11 	.word	0x0800ac11
 800ac70:	0800acbf 	.word	0x0800acbf
 800ac74:	0800ac11 	.word	0x0800ac11
 800ac78:	0800ac11 	.word	0x0800ac11
 800ac7c:	0800ad57 	.word	0x0800ad57
 800ac80:	6833      	ldr	r3, [r6, #0]
 800ac82:	1d1a      	adds	r2, r3, #4
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6032      	str	r2, [r6, #0]
 800ac88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac90:	2301      	movs	r3, #1
 800ac92:	e09d      	b.n	800add0 <_printf_i+0x1e8>
 800ac94:	6833      	ldr	r3, [r6, #0]
 800ac96:	6820      	ldr	r0, [r4, #0]
 800ac98:	1d19      	adds	r1, r3, #4
 800ac9a:	6031      	str	r1, [r6, #0]
 800ac9c:	0606      	lsls	r6, r0, #24
 800ac9e:	d501      	bpl.n	800aca4 <_printf_i+0xbc>
 800aca0:	681d      	ldr	r5, [r3, #0]
 800aca2:	e003      	b.n	800acac <_printf_i+0xc4>
 800aca4:	0645      	lsls	r5, r0, #25
 800aca6:	d5fb      	bpl.n	800aca0 <_printf_i+0xb8>
 800aca8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800acac:	2d00      	cmp	r5, #0
 800acae:	da03      	bge.n	800acb8 <_printf_i+0xd0>
 800acb0:	232d      	movs	r3, #45	@ 0x2d
 800acb2:	426d      	negs	r5, r5
 800acb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acb8:	4859      	ldr	r0, [pc, #356]	@ (800ae20 <_printf_i+0x238>)
 800acba:	230a      	movs	r3, #10
 800acbc:	e011      	b.n	800ace2 <_printf_i+0xfa>
 800acbe:	6821      	ldr	r1, [r4, #0]
 800acc0:	6833      	ldr	r3, [r6, #0]
 800acc2:	0608      	lsls	r0, r1, #24
 800acc4:	f853 5b04 	ldr.w	r5, [r3], #4
 800acc8:	d402      	bmi.n	800acd0 <_printf_i+0xe8>
 800acca:	0649      	lsls	r1, r1, #25
 800accc:	bf48      	it	mi
 800acce:	b2ad      	uxthmi	r5, r5
 800acd0:	2f6f      	cmp	r7, #111	@ 0x6f
 800acd2:	4853      	ldr	r0, [pc, #332]	@ (800ae20 <_printf_i+0x238>)
 800acd4:	6033      	str	r3, [r6, #0]
 800acd6:	bf14      	ite	ne
 800acd8:	230a      	movne	r3, #10
 800acda:	2308      	moveq	r3, #8
 800acdc:	2100      	movs	r1, #0
 800acde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ace2:	6866      	ldr	r6, [r4, #4]
 800ace4:	60a6      	str	r6, [r4, #8]
 800ace6:	2e00      	cmp	r6, #0
 800ace8:	bfa2      	ittt	ge
 800acea:	6821      	ldrge	r1, [r4, #0]
 800acec:	f021 0104 	bicge.w	r1, r1, #4
 800acf0:	6021      	strge	r1, [r4, #0]
 800acf2:	b90d      	cbnz	r5, 800acf8 <_printf_i+0x110>
 800acf4:	2e00      	cmp	r6, #0
 800acf6:	d04b      	beq.n	800ad90 <_printf_i+0x1a8>
 800acf8:	4616      	mov	r6, r2
 800acfa:	fbb5 f1f3 	udiv	r1, r5, r3
 800acfe:	fb03 5711 	mls	r7, r3, r1, r5
 800ad02:	5dc7      	ldrb	r7, [r0, r7]
 800ad04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad08:	462f      	mov	r7, r5
 800ad0a:	42bb      	cmp	r3, r7
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	d9f4      	bls.n	800acfa <_printf_i+0x112>
 800ad10:	2b08      	cmp	r3, #8
 800ad12:	d10b      	bne.n	800ad2c <_printf_i+0x144>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	07df      	lsls	r7, r3, #31
 800ad18:	d508      	bpl.n	800ad2c <_printf_i+0x144>
 800ad1a:	6923      	ldr	r3, [r4, #16]
 800ad1c:	6861      	ldr	r1, [r4, #4]
 800ad1e:	4299      	cmp	r1, r3
 800ad20:	bfde      	ittt	le
 800ad22:	2330      	movle	r3, #48	@ 0x30
 800ad24:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad28:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad2c:	1b92      	subs	r2, r2, r6
 800ad2e:	6122      	str	r2, [r4, #16]
 800ad30:	f8cd a000 	str.w	sl, [sp]
 800ad34:	464b      	mov	r3, r9
 800ad36:	aa03      	add	r2, sp, #12
 800ad38:	4621      	mov	r1, r4
 800ad3a:	4640      	mov	r0, r8
 800ad3c:	f7ff fee6 	bl	800ab0c <_printf_common>
 800ad40:	3001      	adds	r0, #1
 800ad42:	d14a      	bne.n	800adda <_printf_i+0x1f2>
 800ad44:	f04f 30ff 	mov.w	r0, #4294967295
 800ad48:	b004      	add	sp, #16
 800ad4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	f043 0320 	orr.w	r3, r3, #32
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	4833      	ldr	r0, [pc, #204]	@ (800ae24 <_printf_i+0x23c>)
 800ad58:	2778      	movs	r7, #120	@ 0x78
 800ad5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	6831      	ldr	r1, [r6, #0]
 800ad62:	061f      	lsls	r7, r3, #24
 800ad64:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad68:	d402      	bmi.n	800ad70 <_printf_i+0x188>
 800ad6a:	065f      	lsls	r7, r3, #25
 800ad6c:	bf48      	it	mi
 800ad6e:	b2ad      	uxthmi	r5, r5
 800ad70:	6031      	str	r1, [r6, #0]
 800ad72:	07d9      	lsls	r1, r3, #31
 800ad74:	bf44      	itt	mi
 800ad76:	f043 0320 	orrmi.w	r3, r3, #32
 800ad7a:	6023      	strmi	r3, [r4, #0]
 800ad7c:	b11d      	cbz	r5, 800ad86 <_printf_i+0x19e>
 800ad7e:	2310      	movs	r3, #16
 800ad80:	e7ac      	b.n	800acdc <_printf_i+0xf4>
 800ad82:	4827      	ldr	r0, [pc, #156]	@ (800ae20 <_printf_i+0x238>)
 800ad84:	e7e9      	b.n	800ad5a <_printf_i+0x172>
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	f023 0320 	bic.w	r3, r3, #32
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	e7f6      	b.n	800ad7e <_printf_i+0x196>
 800ad90:	4616      	mov	r6, r2
 800ad92:	e7bd      	b.n	800ad10 <_printf_i+0x128>
 800ad94:	6833      	ldr	r3, [r6, #0]
 800ad96:	6825      	ldr	r5, [r4, #0]
 800ad98:	6961      	ldr	r1, [r4, #20]
 800ad9a:	1d18      	adds	r0, r3, #4
 800ad9c:	6030      	str	r0, [r6, #0]
 800ad9e:	062e      	lsls	r6, r5, #24
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	d501      	bpl.n	800ada8 <_printf_i+0x1c0>
 800ada4:	6019      	str	r1, [r3, #0]
 800ada6:	e002      	b.n	800adae <_printf_i+0x1c6>
 800ada8:	0668      	lsls	r0, r5, #25
 800adaa:	d5fb      	bpl.n	800ada4 <_printf_i+0x1bc>
 800adac:	8019      	strh	r1, [r3, #0]
 800adae:	2300      	movs	r3, #0
 800adb0:	6123      	str	r3, [r4, #16]
 800adb2:	4616      	mov	r6, r2
 800adb4:	e7bc      	b.n	800ad30 <_printf_i+0x148>
 800adb6:	6833      	ldr	r3, [r6, #0]
 800adb8:	1d1a      	adds	r2, r3, #4
 800adba:	6032      	str	r2, [r6, #0]
 800adbc:	681e      	ldr	r6, [r3, #0]
 800adbe:	6862      	ldr	r2, [r4, #4]
 800adc0:	2100      	movs	r1, #0
 800adc2:	4630      	mov	r0, r6
 800adc4:	f7f5 fa0c 	bl	80001e0 <memchr>
 800adc8:	b108      	cbz	r0, 800adce <_printf_i+0x1e6>
 800adca:	1b80      	subs	r0, r0, r6
 800adcc:	6060      	str	r0, [r4, #4]
 800adce:	6863      	ldr	r3, [r4, #4]
 800add0:	6123      	str	r3, [r4, #16]
 800add2:	2300      	movs	r3, #0
 800add4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800add8:	e7aa      	b.n	800ad30 <_printf_i+0x148>
 800adda:	6923      	ldr	r3, [r4, #16]
 800addc:	4632      	mov	r2, r6
 800adde:	4649      	mov	r1, r9
 800ade0:	4640      	mov	r0, r8
 800ade2:	47d0      	blx	sl
 800ade4:	3001      	adds	r0, #1
 800ade6:	d0ad      	beq.n	800ad44 <_printf_i+0x15c>
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	079b      	lsls	r3, r3, #30
 800adec:	d413      	bmi.n	800ae16 <_printf_i+0x22e>
 800adee:	68e0      	ldr	r0, [r4, #12]
 800adf0:	9b03      	ldr	r3, [sp, #12]
 800adf2:	4298      	cmp	r0, r3
 800adf4:	bfb8      	it	lt
 800adf6:	4618      	movlt	r0, r3
 800adf8:	e7a6      	b.n	800ad48 <_printf_i+0x160>
 800adfa:	2301      	movs	r3, #1
 800adfc:	4632      	mov	r2, r6
 800adfe:	4649      	mov	r1, r9
 800ae00:	4640      	mov	r0, r8
 800ae02:	47d0      	blx	sl
 800ae04:	3001      	adds	r0, #1
 800ae06:	d09d      	beq.n	800ad44 <_printf_i+0x15c>
 800ae08:	3501      	adds	r5, #1
 800ae0a:	68e3      	ldr	r3, [r4, #12]
 800ae0c:	9903      	ldr	r1, [sp, #12]
 800ae0e:	1a5b      	subs	r3, r3, r1
 800ae10:	42ab      	cmp	r3, r5
 800ae12:	dcf2      	bgt.n	800adfa <_printf_i+0x212>
 800ae14:	e7eb      	b.n	800adee <_printf_i+0x206>
 800ae16:	2500      	movs	r5, #0
 800ae18:	f104 0619 	add.w	r6, r4, #25
 800ae1c:	e7f5      	b.n	800ae0a <_printf_i+0x222>
 800ae1e:	bf00      	nop
 800ae20:	0800afcd 	.word	0x0800afcd
 800ae24:	0800afde 	.word	0x0800afde

0800ae28 <memmove>:
 800ae28:	4288      	cmp	r0, r1
 800ae2a:	b510      	push	{r4, lr}
 800ae2c:	eb01 0402 	add.w	r4, r1, r2
 800ae30:	d902      	bls.n	800ae38 <memmove+0x10>
 800ae32:	4284      	cmp	r4, r0
 800ae34:	4623      	mov	r3, r4
 800ae36:	d807      	bhi.n	800ae48 <memmove+0x20>
 800ae38:	1e43      	subs	r3, r0, #1
 800ae3a:	42a1      	cmp	r1, r4
 800ae3c:	d008      	beq.n	800ae50 <memmove+0x28>
 800ae3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae46:	e7f8      	b.n	800ae3a <memmove+0x12>
 800ae48:	4402      	add	r2, r0
 800ae4a:	4601      	mov	r1, r0
 800ae4c:	428a      	cmp	r2, r1
 800ae4e:	d100      	bne.n	800ae52 <memmove+0x2a>
 800ae50:	bd10      	pop	{r4, pc}
 800ae52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae5a:	e7f7      	b.n	800ae4c <memmove+0x24>

0800ae5c <_sbrk_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	4d06      	ldr	r5, [pc, #24]	@ (800ae78 <_sbrk_r+0x1c>)
 800ae60:	2300      	movs	r3, #0
 800ae62:	4604      	mov	r4, r0
 800ae64:	4608      	mov	r0, r1
 800ae66:	602b      	str	r3, [r5, #0]
 800ae68:	f7f6 f874 	bl	8000f54 <_sbrk>
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	d102      	bne.n	800ae76 <_sbrk_r+0x1a>
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	b103      	cbz	r3, 800ae76 <_sbrk_r+0x1a>
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	20001628 	.word	0x20001628

0800ae7c <memcpy>:
 800ae7c:	440a      	add	r2, r1
 800ae7e:	4291      	cmp	r1, r2
 800ae80:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae84:	d100      	bne.n	800ae88 <memcpy+0xc>
 800ae86:	4770      	bx	lr
 800ae88:	b510      	push	{r4, lr}
 800ae8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae92:	4291      	cmp	r1, r2
 800ae94:	d1f9      	bne.n	800ae8a <memcpy+0xe>
 800ae96:	bd10      	pop	{r4, pc}

0800ae98 <_realloc_r>:
 800ae98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9c:	4680      	mov	r8, r0
 800ae9e:	4615      	mov	r5, r2
 800aea0:	460c      	mov	r4, r1
 800aea2:	b921      	cbnz	r1, 800aeae <_realloc_r+0x16>
 800aea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aea8:	4611      	mov	r1, r2
 800aeaa:	f7ff bc4b 	b.w	800a744 <_malloc_r>
 800aeae:	b92a      	cbnz	r2, 800aebc <_realloc_r+0x24>
 800aeb0:	f7ff fbdc 	bl	800a66c <_free_r>
 800aeb4:	2400      	movs	r4, #0
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aebc:	f000 f81a 	bl	800aef4 <_malloc_usable_size_r>
 800aec0:	4285      	cmp	r5, r0
 800aec2:	4606      	mov	r6, r0
 800aec4:	d802      	bhi.n	800aecc <_realloc_r+0x34>
 800aec6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aeca:	d8f4      	bhi.n	800aeb6 <_realloc_r+0x1e>
 800aecc:	4629      	mov	r1, r5
 800aece:	4640      	mov	r0, r8
 800aed0:	f7ff fc38 	bl	800a744 <_malloc_r>
 800aed4:	4607      	mov	r7, r0
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d0ec      	beq.n	800aeb4 <_realloc_r+0x1c>
 800aeda:	42b5      	cmp	r5, r6
 800aedc:	462a      	mov	r2, r5
 800aede:	4621      	mov	r1, r4
 800aee0:	bf28      	it	cs
 800aee2:	4632      	movcs	r2, r6
 800aee4:	f7ff ffca 	bl	800ae7c <memcpy>
 800aee8:	4621      	mov	r1, r4
 800aeea:	4640      	mov	r0, r8
 800aeec:	f7ff fbbe 	bl	800a66c <_free_r>
 800aef0:	463c      	mov	r4, r7
 800aef2:	e7e0      	b.n	800aeb6 <_realloc_r+0x1e>

0800aef4 <_malloc_usable_size_r>:
 800aef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aef8:	1f18      	subs	r0, r3, #4
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	bfbc      	itt	lt
 800aefe:	580b      	ldrlt	r3, [r1, r0]
 800af00:	18c0      	addlt	r0, r0, r3
 800af02:	4770      	bx	lr

0800af04 <_init>:
 800af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af06:	bf00      	nop
 800af08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af0a:	bc08      	pop	{r3}
 800af0c:	469e      	mov	lr, r3
 800af0e:	4770      	bx	lr

0800af10 <_fini>:
 800af10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af12:	bf00      	nop
 800af14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af16:	bc08      	pop	{r3}
 800af18:	469e      	mov	lr, r3
 800af1a:	4770      	bx	lr
